

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Tue Jul 08 21:03:09 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,space=0,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x0,0
    14     0000                     
    15                           ; Generated 17/08/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC12F675 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     GPIO            equ	5	;# 
    63     000A                     PCLATH          equ	10	;# 
    64     000B                     INTCON          equ	11	;# 
    65     000C                     PIR1            equ	12	;# 
    66     000E                     TMR1            equ	14	;# 
    67     000E                     TMR1L           equ	14	;# 
    68     000F                     TMR1H           equ	15	;# 
    69     0010                     T1CON           equ	16	;# 
    70     0019                     CMCON           equ	25	;# 
    71     001E                     ADRESH          equ	30	;# 
    72     001F                     ADCON0          equ	31	;# 
    73     0081                     OPTION_REG      equ	129	;# 
    74     0085                     TRISIO          equ	133	;# 
    75     008C                     PIE1            equ	140	;# 
    76     008E                     PCON            equ	142	;# 
    77     0090                     OSCCAL          equ	144	;# 
    78     0095                     WPU             equ	149	;# 
    79     0096                     IOC             equ	150	;# 
    80     0096                     IOCB            equ	150	;# 
    81     0099                     VRCON           equ	153	;# 
    82     009A                     EEDATA          equ	154	;# 
    83     009A                     EEDAT           equ	154	;# 
    84     009B                     EEADR           equ	155	;# 
    85     009C                     EECON1          equ	156	;# 
    86     009D                     EECON2          equ	157	;# 
    87     009E                     ADRESL          equ	158	;# 
    88     009F                     ANSEL           equ	159	;# 
    89     0000                     INDF            equ	0	;# 
    90     0001                     TMR0            equ	1	;# 
    91     0002                     PCL             equ	2	;# 
    92     0003                     STATUS          equ	3	;# 
    93     0004                     FSR             equ	4	;# 
    94     0005                     GPIO            equ	5	;# 
    95     000A                     PCLATH          equ	10	;# 
    96     000B                     INTCON          equ	11	;# 
    97     000C                     PIR1            equ	12	;# 
    98     000E                     TMR1            equ	14	;# 
    99     000E                     TMR1L           equ	14	;# 
   100     000F                     TMR1H           equ	15	;# 
   101     0010                     T1CON           equ	16	;# 
   102     0019                     CMCON           equ	25	;# 
   103     001E                     ADRESH          equ	30	;# 
   104     001F                     ADCON0          equ	31	;# 
   105     0081                     OPTION_REG      equ	129	;# 
   106     0085                     TRISIO          equ	133	;# 
   107     008C                     PIE1            equ	140	;# 
   108     008E                     PCON            equ	142	;# 
   109     0090                     OSCCAL          equ	144	;# 
   110     0095                     WPU             equ	149	;# 
   111     0096                     IOC             equ	150	;# 
   112     0096                     IOCB            equ	150	;# 
   113     0099                     VRCON           equ	153	;# 
   114     009A                     EEDATA          equ	154	;# 
   115     009A                     EEDAT           equ	154	;# 
   116     009B                     EEADR           equ	155	;# 
   117     009C                     EECON1          equ	156	;# 
   118     009D                     EECON2          equ	157	;# 
   119     009E                     ADRESL          equ	158	;# 
   120     009F                     ANSEL           equ	159	;# 
   121     000B                     _INTCON         set	11
   122     0019                     _CMCON          set	25
   123     0001                     _TMR0           set	1
   124     001E                     _ADRESH         set	30
   125     001F                     _ADCON0         set	31
   126     0063                     _CMIF           set	99
   127     002D                     _GP5            set	45
   128     005A                     _T0IF           set	90
   129     0085                     _TRISIO         set	133
   130     0081                     _OPTION_REG     set	129
   131     0090                     _OSCCAL         set	144
   132     0095                     _WPU            set	149
   133     009F                     _ANSEL          set	159
   134     009E                     _ADRESL         set	158
   135     0463                     _CMIE           set	1123
   136                           
   137                           	psect	cinit
   138     000C                     start_initialization:	
   139                           ; #config settings
   140                           
   141     000C                     __initialization:
   142                           
   143                           ; Clear objects allocated to BANK0
   144     000C  1383               	bcf	3,7	;select IRP bank0
   145     000D  3020               	movlw	low __pbssBANK0
   146     000E  0084               	movwf	4
   147     000F  3032               	movlw	low (__pbssBANK0+18)
   148     0010  20FB               	fcall	clear_ram0
   149     0011                     end_of_initialization:	
   150                           ;End of C runtime variable initialization code
   151                           
   152     0011                     __end_of__initialization:
   153     0011  0183               	clrf	3
   154     0012  2813               	ljmp	_main	;jump to C main() function
   155                           
   156                           	psect	bssBANK0
   157     0020                     __pbssBANK0:
   158     0020                     _tempo_led:
   159     0020                     	ds	4
   160     0024                     _adc_value:
   161     0024                     	ds	2
   162     0026                     _stop:
   163     0026                     	ds	2
   164     0028                     _startbutton:
   165     0028                     	ds	2
   166     002A                     _start:
   167     002A                     	ds	2
   168     002C                     _twohundredms:
   169     002C                     	ds	2
   170     002E                     _fortyms:
   171     002E                     	ds	2
   172     0030                     _buttonpressed:
   173     0030                     	ds	2
   174                           
   175                           	psect	clrtext
   176     00FB                     clear_ram0:	
   177                           ;	Called with FSR containing the base address, and
   178                           ;	W with the last address+1
   179                           
   180     00FB  0064               	clrwdt	;clear the watchdog before getting into this loop
   181     00FC                     clrloop0:
   182     00FC  0180               	clrf	0	;clear RAM location pointed to by FSR
   183     00FD  0A84               	incf	4,f	;increment pointer
   184     00FE  0604               	xorwf	4,w	;XOR with final address
   185     00FF  1903               	btfsc	3,2	;have we reached the end yet?
   186     0100  3400               	retlw	0	;all done for this memory range, return
   187     0101  0604               	xorwf	4,w	;XOR again to restore value
   188     0102  28FC               	goto	clrloop0	;do the next byte
   189                           
   190                           	psect	cstackBANK0
   191     0032                     __pcstackBANK0:
   192     0032                     ?_ISR:
   193     0032                     ?_main:	
   194                           ; 1 bytes @ 0x0
   195                           
   196     0032                     ??_ISR:	
   197                           ; 1 bytes @ 0x0
   198                           
   199                           
   200                           ; 1 bytes @ 0x0
   201     0032                     	ds	2
   202     0034                     ?_Read_Adc:
   203                           
   204                           ; 2 bytes @ 0x2
   205     0034                     	ds	2
   206     0036                     ??_Read_Adc:
   207     0036                     ??_main:	
   208                           ; 1 bytes @ 0x4
   209                           
   210                           
   211                           	psect	maintext
   212     0013                     __pmaintext:	
   213                           ; 1 bytes @ 0x4
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 81 in file "main.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;		None
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, status,2, status,0, btemp+0, pclath, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:      BANK0
   233 ;;      Params:         0
   234 ;;      Locals:         0
   235 ;;      Temps:          0
   236 ;;      Totals:         0
   237 ;;Total ram usage:        0 bytes
   238 ;; Hardware stack levels required when called: 2
   239 ;; This function calls:
   240 ;;		_Read_Adc
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246     0013                     _main:	
   247                           ;psect for function _main
   248                           
   249     0013                     l712:	
   250                           ;incstack = 0
   251                           ; Regs used in _main: [wreg+status,2-btemp+0+pclath+cstack]
   252                           
   253                           
   254                           ;main.c: 82:            }else if(adc_value <= 300 || adc_value > 450){
   255     0013  3002               	movlw	2
   256     0014  1283               	bcf	3,5	;RP0=0, select bank0
   257     0015  0099               	movwf	25	;volatile
   258                           
   259                           ;main.c: 83: 
   260     0016  3011               	movlw	17
   261     0017  1683               	bsf	3,5	;RP0=1, select bank1
   262     0018  009F               	movwf	31	;volatile
   263                           
   264                           ;main.c: 84:                stop= 0;
   265     0019  3081               	movlw	129
   266     001A  1283               	bcf	3,5	;RP0=0, select bank0
   267     001B  009F               	movwf	31	;volatile
   268     001C                     l714:
   269                           
   270                           ;main.c: 85:                startbutton=1;
   271     001C  1683               	bsf	3,5	;RP0=1, select bank1
   272     001D  0195               	clrf	21	;volatile
   273                           
   274                           ;main.c: 86:            }else{
   275     001E  1283               	bcf	3,5	;RP0=0, select bank0
   276     001F  0181               	clrf	1	;volatile
   277     0020                     l716:
   278                           
   279                           ;main.c: 87: 
   280     0020  30FF               	movlw	255
   281     0021  1683               	bsf	3,5	;RP0=1, select bank1
   282     0022  0090               	movwf	16	;volatile
   283     0023                     l718:
   284                           
   285                           ;main.c: 88:            }
   286     0023  3081               	movlw	129
   287     0024  0081               	movwf	1	;volatile
   288     0025                     l720:
   289                           
   290                           ;main.c: 89:        }
   291     0025  30E0               	movlw	224
   292     0026  008B               	movwf	11	;volatile
   293     0027                     l722:
   294                           
   295                           ;main.c: 90:     }
   296     0027  158C               	bsf	12,3	;volatile
   297     0028                     l724:
   298                           
   299                           ;main.c: 91: 
   300     0028  3003               	movlw	3
   301     0029  0085               	movwf	5	;volatile
   302     002A                     l726:
   303     002A  30C8               	movlw	200
   304     002B  1283               	bcf	3,5	;RP0=0, select bank0
   305     002C  062C               	xorwf	_twohundredms,w
   306     002D  042D               	iorwf	_twohundredms+1,w
   307     002E  1D03               	btfss	3,2
   308     002F  2831               	goto	u171
   309     0030  2832               	goto	u170
   310     0031                     u171:
   311     0031  282A               	goto	l726
   312     0032                     u170:
   313     0032                     l728:
   314     0032  01AC               	clrf	_twohundredms
   315     0033  01AD               	clrf	_twohundredms+1
   316     0034                     l730:
   317     0034  2835               	nop2	;2 cycle nop
   318     0035  2836               	nop2	;2 cycle nop
   319     0036  0000               	nop
   320     0037                     l732:
   321     0037  20EA               	fcall	_Read_Adc
   322     0038  1283               	bcf	3,5	;RP0=0, select bank0
   323     0039  0835               	movf	?_Read_Adc+1,w
   324     003A  00A5               	movwf	_adc_value+1
   325     003B  0834               	movf	?_Read_Adc,w
   326     003C  00A4               	movwf	_adc_value
   327     003D                     l734:
   328     003D  283E               	nop2	;2 cycle nop
   329     003E  283F               	nop2	;2 cycle nop
   330     003F  0000               	nop
   331     0040                     l736:
   332     0040  1283               	bcf	3,5	;RP0=0, select bank0
   333     0041  0825               	movf	_adc_value+1,w
   334     0042  3A80               	xorlw	128
   335     0043  0080               	movwf	btemp
   336     0044  3081               	movlw	129
   337     0045  0200               	subwf	btemp,w
   338     0046  1D03               	skipz
   339     0047  284A               	goto	u185
   340     0048  302D               	movlw	45
   341     0049  0224               	subwf	_adc_value,w
   342     004A                     u185:
   343     004A  1C03               	skipc
   344     004B  284D               	goto	u181
   345     004C  284E               	goto	u180
   346     004D                     u181:
   347     004D  2864               	goto	l744
   348     004E                     u180:
   349     004E                     l738:
   350     004E  1283               	bcf	3,5	;RP0=0, select bank0
   351     004F  0825               	movf	_adc_value+1,w
   352     0050  3A80               	xorlw	128
   353     0051  0080               	movwf	btemp
   354     0052  3081               	movlw	129
   355     0053  0200               	subwf	btemp,w
   356     0054  1D03               	skipz
   357     0055  2858               	goto	u195
   358     0056  30C3               	movlw	195
   359     0057  0224               	subwf	_adc_value,w
   360     0058                     u195:
   361     0058  1803               	skipnc
   362     0059  285B               	goto	u191
   363     005A  285C               	goto	u190
   364     005B                     u191:
   365     005B  2864               	goto	l744
   366     005C                     u190:
   367     005C                     l740:
   368     005C  1283               	bcf	3,5	;RP0=0, select bank0
   369     005D  01A8               	clrf	_startbutton
   370     005E  01A9               	clrf	_startbutton+1
   371     005F                     l742:
   372     005F  3001               	movlw	1
   373     0060  00A6               	movwf	_stop
   374     0061  3000               	movlw	0
   375     0062  00A7               	movwf	_stop+1
   376     0063  282A               	goto	l726
   377     0064                     l744:
   378     0064  1283               	bcf	3,5	;RP0=0, select bank0
   379     0065  0825               	movf	_adc_value+1,w
   380     0066  3A80               	xorlw	128
   381     0067  0080               	movwf	btemp
   382     0068  3081               	movlw	129
   383     0069  0200               	subwf	btemp,w
   384     006A  1D03               	skipz
   385     006B  286E               	goto	u205
   386     006C  302D               	movlw	45
   387     006D  0224               	subwf	_adc_value,w
   388     006E                     u205:
   389     006E  1C03               	skipc
   390     006F  2871               	goto	u201
   391     0070  2872               	goto	u200
   392     0071                     u201:
   393     0071  2880               	goto	l748
   394     0072                     u200:
   395     0072                     l746:
   396     0072  1283               	bcf	3,5	;RP0=0, select bank0
   397     0073  0825               	movf	_adc_value+1,w
   398     0074  3A80               	xorlw	128
   399     0075  0080               	movwf	btemp
   400     0076  3081               	movlw	129
   401     0077  0200               	subwf	btemp,w
   402     0078  1D03               	skipz
   403     0079  287C               	goto	u215
   404     007A  30C3               	movlw	195
   405     007B  0224               	subwf	_adc_value,w
   406     007C                     u215:
   407     007C  1C03               	skipc
   408     007D  287F               	goto	u211
   409     007E  2880               	goto	u210
   410     007F                     u211:
   411     007F  2888               	goto	l78
   412     0080                     u210:
   413     0080                     l748:
   414     0080  1283               	bcf	3,5	;RP0=0, select bank0
   415     0081  01A6               	clrf	_stop
   416     0082  01A7               	clrf	_stop+1
   417     0083                     l750:
   418     0083  3001               	movlw	1
   419     0084  00A8               	movwf	_startbutton
   420     0085  3000               	movlw	0
   421     0086  00A9               	movwf	_startbutton+1
   422     0087  282A               	goto	l726
   423     0088                     l78:
   424     0088  282A               	goto	l726
   425     0089  280B               	ljmp	start
   426     008A                     __end_of_main:
   427                           
   428                           	psect	text1
   429     00EA                     __ptext1:	
   430 ;; *************** function _Read_Adc *****************
   431 ;; Defined at:
   432 ;;		line 33 in file "main.c"
   433 ;; Parameters:    Size  Location     Type
   434 ;;		None
   435 ;; Auto vars:     Size  Location     Type
   436 ;;		None
   437 ;; Return value:  Size  Location     Type
   438 ;;                  2    2[BANK0 ] int 
   439 ;; Registers used:
   440 ;;		wreg
   441 ;; Tracked objects:
   442 ;;		On entry : 0/0
   443 ;;		On exit  : 0/0
   444 ;;		Unchanged: 0/0
   445 ;; Data sizes:      BANK0
   446 ;;      Params:         2
   447 ;;      Locals:         0
   448 ;;      Temps:          0
   449 ;;      Totals:         2
   450 ;;Total ram usage:        2 bytes
   451 ;; Hardware stack levels used: 1
   452 ;; Hardware stack levels required when called: 1
   453 ;; This function calls:
   454 ;;		Nothing
   455 ;; This function is called by:
   456 ;;		_main
   457 ;; This function uses a non-reentrant model
   458 ;;
   459                           
   460     00EA                     _Read_Adc:	
   461                           ;psect for function _Read_Adc
   462                           
   463     00EA                     l706:	
   464                           ;incstack = 0
   465                           ; Regs used in _Read_Adc: [wreg]
   466                           
   467                           
   468                           ;main.c: 34:               start= 1;
   469     00EA  1283               	bcf	3,5	;RP0=0, select bank0
   470     00EB  149F               	bsf	31,1	;volatile
   471                           
   472                           ;main.c: 35:             }
   473     00EC  28ED               	nop2	;2 cycle nop
   474     00ED  28EE               	nop2	;2 cycle nop
   475     00EE  0000               	nop
   476     00EF                     l51:	
   477                           ;main.c: 36:             fortyms= 0;
   478                           
   479     00EF  1283               	bcf	3,5	;RP0=0, select bank0
   480     00F0  189F               	btfsc	31,1	;volatile
   481     00F1  28F3               	goto	u161
   482     00F2  28F4               	goto	u160
   483     00F3                     u161:
   484     00F3  28EF               	goto	l51
   485     00F4                     u160:
   486     00F4                     l708:
   487                           
   488                           ;main.c: 38:         if(start == 1){
   489     00F4  081E               	movf	30,w	;volatile
   490     00F5  00B5               	movwf	?_Read_Adc+1
   491     00F6  1683               	bsf	3,5	;RP0=1, select bank1
   492     00F7  081E               	movf	30,w	;volatile
   493     00F8  1283               	bcf	3,5	;RP0=0, select bank0
   494     00F9  00B4               	movwf	?_Read_Adc
   495     00FA                     l54:
   496     00FA  0008               	return
   497     00FB                     __end_of_Read_Adc:
   498                           
   499                           	psect	text2
   500     008A                     __ptext2:	
   501 ;; *************** function _ISR *****************
   502 ;; Defined at:
   503 ;;		line 41 in file "main.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2, status,0
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:      BANK0
   517 ;;      Params:         0
   518 ;;      Locals:         0
   519 ;;      Temps:          2
   520 ;;      Totals:         2
   521 ;;Total ram usage:        2 bytes
   522 ;; Hardware stack levels used: 1
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		Interrupt level 1
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530     008A                     _ISR:	
   531                           ;psect for function _ISR
   532                           
   533     008A                     i1l634:
   534                           
   535                           ;main.c: 43: 
   536     008A  1D0B               	btfss	11,2	;volatile
   537     008B  288D               	goto	u2_21
   538     008C  288E               	goto	u2_20
   539     008D                     u2_21:
   540     008D  28DE               	goto	i1l59
   541     008E                     u2_20:
   542     008E                     i1l636:
   543                           
   544                           ;main.c: 44:         };main.c: 46:         TMR0 = 6;
   545     008E  3001               	movlw	1
   546     008F  07AE               	addwf	_fortyms,f
   547     0090  1803               	skipnc
   548     0091  0AAF               	incf	_fortyms+1,f
   549     0092  3000               	movlw	0
   550     0093  07AF               	addwf	_fortyms+1,f
   551                           
   552                           ;main.c: 47:     }
   553     0094  3001               	movlw	1
   554     0095  07AC               	addwf	_twohundredms,f
   555     0096  1803               	skipnc
   556     0097  0AAD               	incf	_twohundredms+1,f
   557     0098  3000               	movlw	0
   558     0099  07AD               	addwf	_twohundredms+1,f
   559     009A                     i1l638:
   560                           
   561                           ;main.c: 49:     {
   562     009A  30E8               	movlw	232
   563     009B  062E               	xorwf	_fortyms,w
   564     009C  3003               	movlw	3
   565     009D  1903               	skipnz
   566     009E  062F               	xorwf	_fortyms+1,w
   567     009F  1D03               	btfss	3,2
   568     00A0  28A2               	goto	u3_21
   569     00A1  28A3               	goto	u3_20
   570     00A2                     u3_21:
   571     00A2  28AE               	goto	i1l644
   572     00A3                     u3_20:
   573     00A3                     i1l640:
   574     00A3  0828               	movf	_startbutton,w
   575     00A4  0429               	iorwf	_startbutton+1,w
   576     00A5  1D03               	btfss	3,2
   577     00A6  28A8               	goto	u4_21
   578     00A7  28A9               	goto	u4_20
   579     00A8                     u4_21:
   580     00A8  28AE               	goto	i1l644
   581     00A9                     u4_20:
   582     00A9                     i1l642:
   583                           
   584                           ;main.c: 50: 
   585     00A9  01AA               	clrf	_start
   586     00AA  01AB               	clrf	_start+1
   587                           
   588                           ;main.c: 51:          CMIF =0;
   589     00AB  01AE               	clrf	_fortyms
   590     00AC  01AF               	clrf	_fortyms+1
   591                           
   592                           ;main.c: 53:  }
   593     00AD  28CC               	goto	i1l656
   594     00AE                     i1l644:
   595     00AE  30E8               	movlw	232
   596     00AF  062E               	xorwf	_fortyms,w
   597     00B0  3003               	movlw	3
   598     00B1  1903               	skipnz
   599     00B2  062F               	xorwf	_fortyms+1,w
   600     00B3  1D03               	btfss	3,2
   601     00B4  28B6               	goto	u5_21
   602     00B5  28B7               	goto	u5_20
   603     00B6                     u5_21:
   604     00B6  28CC               	goto	i1l656
   605     00B7                     u5_20:
   606     00B7                     i1l646:
   607     00B7  0328               	decf	_startbutton,w
   608     00B8  0429               	iorwf	_startbutton+1,w
   609     00B9  1D03               	btfss	3,2
   610     00BA  28BC               	goto	u6_21
   611     00BB  28BD               	goto	u6_20
   612     00BC                     u6_21:
   613     00BC  28CC               	goto	i1l656
   614     00BD                     u6_20:
   615     00BD                     i1l648:
   616                           
   617                           ;main.c: 54: 
   618     00BD  032A               	decf	_start,w
   619     00BE  042B               	iorwf	_start+1,w
   620     00BF  1D03               	btfss	3,2
   621     00C0  28C2               	goto	u7_21
   622     00C1  28C3               	goto	u7_20
   623     00C2                     u7_21:
   624     00C2  28C6               	goto	i1l652
   625     00C3                     u7_20:
   626     00C3                     i1l650:
   627                           
   628                           ;main.c: 55: 
   629     00C3  01AA               	clrf	_start
   630     00C4  01AB               	clrf	_start+1
   631                           
   632                           ;main.c: 56: 
   633     00C5  28CA               	goto	i1l654
   634     00C6                     i1l652:
   635                           
   636                           ;main.c: 57: 
   637     00C6  3001               	movlw	1
   638     00C7  00AA               	movwf	_start
   639     00C8  3000               	movlw	0
   640     00C9  00AB               	movwf	_start+1
   641     00CA                     i1l654:
   642                           
   643                           ;main.c: 59:     CMCON = 2;
   644     00CA  01AE               	clrf	_fortyms
   645     00CB  01AF               	clrf	_fortyms+1
   646     00CC                     i1l656:
   647                           
   648                           ;main.c: 61:     ADCON0 = 0b10000001;
   649     00CC  032A               	decf	_start,w
   650     00CD  042B               	iorwf	_start+1,w
   651     00CE  1D03               	btfss	3,2
   652     00CF  28D1               	goto	u8_21
   653     00D0  28D2               	goto	u8_20
   654     00D1                     u8_21:
   655     00D1  28D4               	goto	i1l660
   656     00D2                     u8_20:
   657     00D2                     i1l658:
   658                           
   659                           ;main.c: 62:     WPU = 0X00;
   660     00D2  1685               	bsf	5,5	;volatile
   661                           
   662                           ;main.c: 63:     TMR0 = 0;
   663     00D3  28DB               	goto	i1l66
   664     00D4                     i1l660:
   665     00D4  082A               	movf	_start,w
   666     00D5  042B               	iorwf	_start+1,w
   667     00D6  1D03               	btfss	3,2
   668     00D7  28D9               	goto	u9_21
   669     00D8  28DA               	goto	u9_20
   670     00D9                     u9_21:
   671     00D9  28DB               	goto	i1l66
   672     00DA                     u9_20:
   673     00DA                     i1l662:
   674                           
   675                           ;main.c: 64:     OSCCAL = 0XFF;
   676     00DA  1285               	bcf	5,5	;volatile
   677     00DB                     i1l66:	
   678                           ;main.c: 65:     OPTION_REG = 0X81;
   679                           
   680                           
   681                           ;main.c: 68:     TRISIO = 0X03;
   682     00DB  110B               	bcf	11,2	;volatile
   683                           
   684                           ;main.c: 69: 
   685     00DC  3006               	movlw	6
   686     00DD  0081               	movwf	1	;volatile
   687     00DE                     i1l59:	
   688                           ;main.c: 70: 
   689                           
   690                           
   691                           ;main.c: 71:     for(;;)
   692     00DE  1D8C               	btfss	12,3	;volatile
   693     00DF  28E1               	goto	u10_21
   694     00E0  28E2               	goto	u10_20
   695     00E1                     u10_21:
   696     00E1  28E3               	goto	i1l70
   697     00E2                     u10_20:
   698     00E2                     i1l664:
   699                           
   700                           ;main.c: 72:     {;main.c: 74:            twohundredms= 0;
   701     00E2  118C               	bcf	12,3	;volatile
   702     00E3                     i1l70:
   703     00E3  0833               	movf	??_ISR+1,w
   704     00E4  008A               	movwf	10
   705     00E5  0E32               	swapf	??_ISR,w
   706     00E6  0083               	movwf	3
   707     00E7  0E80               	swapf	btemp,f
   708     00E8  0E00               	swapf	btemp,w
   709     00E9  0009               	retfie
   710     00EA                     __end_of_ISR:
   711     0000                     ___latbits      equ	0
   712     0000                     btemp           set	0	;btemp
   713                           
   714                           	psect	intentry
   715     0004                     __pintentry:	
   716                           ;incstack = 0
   717                           ; Regs used in _ISR: [wreg+status,2+status,0]
   718                           
   719     0004                     interrupt_function:
   720     0000                     saved_w         set	btemp
   721     0004  0080               	movwf	btemp
   722     0005  0E03               	swapf	3,w
   723     0006  1283               	bcf	3,5	;RP0=0, select bank0
   724     0007  00B2               	movwf	??_ISR
   725     0008  080A               	movf	10,w
   726     0009  00B3               	movwf	??_ISR+1
   727     000A  288A               	ljmp	_ISR
   728                           
   729                           	psect	config
   730                           
   731                           ;Config register CONFIG @ 0x2007
   732                           ;	Oscillator Selection bits
   733                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   734                           ;	Watchdog Timer Enable bit
   735                           ;	WDTE = OFF, WDT disabled
   736                           ;	Power-Up Timer Enable bit
   737                           ;	PWRTE = OFF, PWRT disabled
   738                           ;	GP3/MCLR pin function select
   739                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   740                           ;	Brown-out Detect Enable bit
   741                           ;	BOREN = OFF, BOD disabled
   742                           ;	Code Protection bit
   743                           ;	CP = OFF, Program Memory code protection is disabled
   744                           ;	Data Code Protection bit
   745                           ;	CPD = OFF, Data memory code protection is disabled
   746     2007                     	org	8199
   747     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    BANK0            52      4      22

Pointer List with Targets:

    None.

Critical Paths under _main in BANK0

    _main->_Read_Adc

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITBANK0            52      0       0      0.0%
BANK0               52      4      22     42.3%
STACK                0      0       0      0.0%
DATA                 0      0      22      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Tue Jul 08 21:03:09 2025

                     l51 00EF                       l54 00FA                       l78 0088  
                     fsr 0004                      l720 0025                      l712 0013  
                    l706 00EA                      l730 0034                      l722 0027  
                    l714 001C                      l708 00F4                      l740 005C  
                    l732 0037                      l724 0028                      l716 0020  
                    l750 0083                      l742 005F                      l734 003D  
                    l726 002A                      l718 0023                      l744 0064  
                    l736 0040                      l728 0032                      l746 0072  
                    l738 004E                      l748 0080                      _GP5 002D  
                    u200 0072                      u201 0071                      u210 0080  
                    u211 007F                      u205 006E                      u215 007C  
                    u160 00F4                      u161 00F3                      u170 0032  
                    u171 0031                      u180 004E                      u181 004D  
                    u190 005C                      u191 005B                      u185 004A  
                    u195 0058                      _ISR 008A                      _WPU 0095  
                    indf 0000              _startbutton 0028                     ?_ISR 0032  
                   _CMIE 0463                     _CMIF 0063                     _T0IF 005A  
                   i1l70 00E3                     i1l66 00DB                     i1l59 00DE  
                   _TMR0 0001                     u2_20 008E                     u2_21 008D  
                   u3_20 00A3                     u3_21 00A2                     u4_20 00A9  
                   u4_21 00A8                     u5_20 00B7                     u5_21 00B6  
                   u6_20 00BD                     u6_21 00BC                     u7_20 00C3  
                   u7_21 00C2                     u8_20 00D2                     u8_21 00D1  
                   u9_20 00DA                     u9_21 00D9                     _main 0013  
                   btemp 0000                     _stop 0026                     start 000B  
                  ??_ISR 0032                    ?_main 0032                    _CMCON 0019  
                  _ANSEL 009F                    i1l640 00A3                    i1l650 00C3  
                  i1l642 00A9                    i1l634 008A                    i1l660 00D4  
                  i1l652 00C6                    i1l644 00AE                    i1l636 008E  
                  i1l662 00DA                    i1l654 00CA                    i1l646 00B7  
                  i1l638 009A                    i1l664 00E2                    i1l648 00BD  
                  i1l656 00CC                    i1l658 00D2                    u10_20 00E2  
                  u10_21 00E1                    _start 002A                    pclath 000A  
                  status 0003          __initialization 000C             __end_of_main 008A  
       __end_of_Read_Adc 00FB                   ??_main 0036                   _ADCON0 001F  
                 _ADRESH 001E                   _ADRESL 009E                   _INTCON 000B  
                 _OSCCAL 0090                   _TRISIO 0085             _twohundredms 002C  
                 saved_w 0000  __end_of__initialization 0011               __pbssBANK0 0020  
              ?_Read_Adc 0034               __pmaintext 0013               __pintentry 0004  
          _buttonpressed 0030               ??_Read_Adc 0036                  __ptext1 00EA  
                __ptext2 008A                  _fortyms 002E                  clrloop0 00FC  
   end_of_initialization 0011      start_initialization 000C              __end_of_ISR 00EA  
              ___latbits 0000            __pcstackBANK0 0032                _adc_value 0024  
      interrupt_function 0004                clear_ram0 00FB                _tempo_led 0020  
               _Read_Adc 00EA                 intlevel1 0000               _OPTION_REG 0081  
