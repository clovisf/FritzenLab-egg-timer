

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 22 12:13:00 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,space=0,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x5E,2
    15     0000                     
    16                           ; Generated 17/08/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F675 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     GPIO            equ	5	;# 
    64     000A                     PCLATH          equ	10	;# 
    65     000B                     INTCON          equ	11	;# 
    66     000C                     PIR1            equ	12	;# 
    67     000E                     TMR1            equ	14	;# 
    68     000E                     TMR1L           equ	14	;# 
    69     000F                     TMR1H           equ	15	;# 
    70     0010                     T1CON           equ	16	;# 
    71     0019                     CMCON           equ	25	;# 
    72     001E                     ADRESH          equ	30	;# 
    73     001F                     ADCON0          equ	31	;# 
    74     0081                     OPTION_REG      equ	129	;# 
    75     0085                     TRISIO          equ	133	;# 
    76     008C                     PIE1            equ	140	;# 
    77     008E                     PCON            equ	142	;# 
    78     0090                     OSCCAL          equ	144	;# 
    79     0095                     WPU             equ	149	;# 
    80     0096                     IOC             equ	150	;# 
    81     0096                     IOCB            equ	150	;# 
    82     0099                     VRCON           equ	153	;# 
    83     009A                     EEDATA          equ	154	;# 
    84     009A                     EEDAT           equ	154	;# 
    85     009B                     EEADR           equ	155	;# 
    86     009C                     EECON1          equ	156	;# 
    87     009D                     EECON2          equ	157	;# 
    88     009E                     ADRESL          equ	158	;# 
    89     009F                     ANSEL           equ	159	;# 
    90     0000                     INDF            equ	0	;# 
    91     0001                     TMR0            equ	1	;# 
    92     0002                     PCL             equ	2	;# 
    93     0003                     STATUS          equ	3	;# 
    94     0004                     FSR             equ	4	;# 
    95     0005                     GPIO            equ	5	;# 
    96     000A                     PCLATH          equ	10	;# 
    97     000B                     INTCON          equ	11	;# 
    98     000C                     PIR1            equ	12	;# 
    99     000E                     TMR1            equ	14	;# 
   100     000E                     TMR1L           equ	14	;# 
   101     000F                     TMR1H           equ	15	;# 
   102     0010                     T1CON           equ	16	;# 
   103     0019                     CMCON           equ	25	;# 
   104     001E                     ADRESH          equ	30	;# 
   105     001F                     ADCON0          equ	31	;# 
   106     0081                     OPTION_REG      equ	129	;# 
   107     0085                     TRISIO          equ	133	;# 
   108     008C                     PIE1            equ	140	;# 
   109     008E                     PCON            equ	142	;# 
   110     0090                     OSCCAL          equ	144	;# 
   111     0095                     WPU             equ	149	;# 
   112     0096                     IOC             equ	150	;# 
   113     0096                     IOCB            equ	150	;# 
   114     0099                     VRCON           equ	153	;# 
   115     009A                     EEDATA          equ	154	;# 
   116     009A                     EEDAT           equ	154	;# 
   117     009B                     EEADR           equ	155	;# 
   118     009C                     EECON1          equ	156	;# 
   119     009D                     EECON2          equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ANSEL           equ	159	;# 
   122     000B                     _INTCON         set	11
   123     0019                     _CMCON          set	25
   124     0001                     _TMR0           set	1
   125     001E                     _ADRESH         set	30
   126     001F                     _ADCON0         set	31
   127     0063                     _CMIF           set	99
   128     002D                     _GP5            set	45
   129     005A                     _T0IF           set	90
   130     0085                     _TRISIO         set	133
   131     0081                     _OPTION_REG     set	129
   132     0090                     _OSCCAL         set	144
   133     0095                     _WPU            set	149
   134     009F                     _ANSEL          set	159
   135     009E                     _ADRESL         set	158
   136     0463                     _CMIE           set	1123
   137                           
   138                           	psect	cinit
   139     000C                     start_initialization:	
   140                           ; #config settings
   141                           
   142     000C                     __initialization:
   143                           
   144                           ; Clear objects allocated to BANK0
   145     000C  1383               	bcf	3,7	;select IRP bank0
   146     000D  3020               	movlw	low __pbssBANK0
   147     000E  0084               	movwf	4
   148     000F  302E               	movlw	low (__pbssBANK0+14)
   149     0010  20B5               	fcall	clear_ram0
   150     0011                     end_of_initialization:	
   151                           ;End of C runtime variable initialization code
   152                           
   153     0011                     __end_of__initialization:
   154     0011  0183               	clrf	3
   155     0012  2813               	ljmp	_main	;jump to C main() function
   156                           
   157                           	psect	bssBANK0
   158     0020                     __pbssBANK0:
   159     0020                     _tempo_led:
   160     0020                     	ds	4
   161     0024                     _adc_value:
   162     0024                     	ds	2
   163     0026                     _stop:
   164     0026                     	ds	2
   165     0028                     _start:
   166     0028                     	ds	2
   167     002A                     _fortyms:
   168     002A                     	ds	2
   169     002C                     _buttonpressed:
   170     002C                     	ds	2
   171                           
   172                           	psect	clrtext
   173     00B5                     clear_ram0:	
   174                           ;	Called with FSR containing the base address, and
   175                           ;	W with the last address+1
   176                           
   177     00B5  0064               	clrwdt	;clear the watchdog before getting into this loop
   178     00B6                     clrloop0:
   179     00B6  0180               	clrf	0	;clear RAM location pointed to by FSR
   180     00B7  0A84               	incf	4,f	;increment pointer
   181     00B8  0604               	xorwf	4,w	;XOR with final address
   182     00B9  1903               	btfsc	3,2	;have we reached the end yet?
   183     00BA  3400               	retlw	0	;all done for this memory range, return
   184     00BB  0604               	xorwf	4,w	;XOR again to restore value
   185     00BC  28B6               	goto	clrloop0	;do the next byte
   186                           
   187                           	psect	cstackCOMMON
   188     0000                     __pcstackCOMMON:
   189     0000                     ??_Read_Adc:
   190     0000                     ??_main:	
   191                           ; 1 bytes @ 0x0
   192                           
   193                           
   194                           	psect	cstackBANK0
   195     002E                     __pcstackBANK0:	
   196                           ; 1 bytes @ 0x0
   197                           
   198     002E                     ?_ISR:
   199     002E                     ?_main:	
   200                           ; 1 bytes @ 0x0
   201                           
   202     002E                     ??_ISR:	
   203                           ; 1 bytes @ 0x0
   204                           
   205                           
   206                           ; 1 bytes @ 0x0
   207     002E                     	ds	2
   208     0030                     ?_Read_Adc:
   209                           
   210                           ; 2 bytes @ 0x2
   211     0030                     	ds	2
   212                           
   213                           	psect	maintext
   214     0013                     __pmaintext:	
   215 ;;
   216 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   217 ;;
   218 ;; *************** function _main *****************
   219 ;; Defined at:
   220 ;;		line 73 in file "main.c"
   221 ;; Parameters:    Size  Location     Type
   222 ;;		None
   223 ;; Auto vars:     Size  Location     Type
   224 ;;		None
   225 ;; Return value:  Size  Location     Type
   226 ;;                  1    wreg      void 
   227 ;; Registers used:
   228 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   229 ;; Tracked objects:
   230 ;;		On entry : B00/0
   231 ;;		On exit  : 0/0
   232 ;;		Unchanged: 0/0
   233 ;; Data sizes:     COMMON   BANK0
   234 ;;      Params:         0       0
   235 ;;      Locals:         0       0
   236 ;;      Temps:          0       0
   237 ;;      Totals:         0       0
   238 ;;Total ram usage:        0 bytes
   239 ;; Hardware stack levels required when called: 2
   240 ;; This function calls:
   241 ;;		_Read_Adc
   242 ;; This function is called by:
   243 ;;		Startup code after reset
   244 ;; This function uses a non-reentrant model
   245 ;;
   246                           
   247     0013                     _main:	
   248                           ;psect for function _main
   249                           
   250     0013                     l695:	
   251                           ;incstack = 0
   252                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   253                           
   254                           
   255                           ;main.c: 74:     CMCON = 2;
   256     0013  3002               	movlw	2
   257     0014  1283               	bcf	3,5	;RP0=0, select bank0
   258     0015  0099               	movwf	25	;volatile
   259                           
   260                           ;main.c: 75:     ANSEL = 0b0010001;
   261     0016  3011               	movlw	17
   262     0017  1683               	bsf	3,5	;RP0=1, select bank1
   263     0018  009F               	movwf	31	;volatile
   264                           
   265                           ;main.c: 76:     ADCON0 = 0b10000001;
   266     0019  3081               	movlw	129
   267     001A  1283               	bcf	3,5	;RP0=0, select bank0
   268     001B  009F               	movwf	31	;volatile
   269     001C                     l697:
   270                           
   271                           ;main.c: 77:     WPU = 0X00;
   272     001C  1683               	bsf	3,5	;RP0=1, select bank1
   273     001D  0195               	clrf	21	;volatile
   274                           
   275                           ;main.c: 78:     TMR0 = 0;
   276     001E  1283               	bcf	3,5	;RP0=0, select bank0
   277     001F  0181               	clrf	1	;volatile
   278     0020                     l699:
   279                           
   280                           ;main.c: 79:     OSCCAL = 0XFF;
   281     0020  30FF               	movlw	255
   282     0021  1683               	bsf	3,5	;RP0=1, select bank1
   283     0022  0090               	movwf	16	;volatile
   284     0023                     l701:
   285                           
   286                           ;main.c: 80:     OPTION_REG = 0X81;
   287     0023  3081               	movlw	129
   288     0024  0081               	movwf	1	;volatile
   289     0025                     l703:
   290                           
   291                           ;main.c: 81:     INTCON = 0XE0;
   292     0025  30E0               	movlw	224
   293     0026  008B               	movwf	11	;volatile
   294     0027                     l705:
   295                           
   296                           ;main.c: 82:     CMIE = 1;
   297     0027  158C               	bsf	12,3	;volatile
   298     0028                     l707:
   299                           
   300                           ;main.c: 83:     TRISIO = 0X03;
   301     0028  3003               	movlw	3
   302     0029  0085               	movwf	5	;volatile
   303     002A                     l709:
   304                           
   305                           ;main.c: 87:     {;main.c: 88:        if(fortyms == 40){
   306     002A  3028               	movlw	40
   307     002B  1283               	bcf	3,5	;RP0=0, select bank0
   308     002C  062A               	xorwf	_fortyms,w
   309     002D  042B               	iorwf	_fortyms+1,w
   310     002E  1D03               	btfss	3,2
   311     002F  2831               	goto	u151
   312     0030  2832               	goto	u150
   313     0031                     u151:
   314     0031  282A               	goto	l709
   315     0032                     u150:
   316     0032                     l711:
   317                           
   318                           ;main.c: 89:            fortyms= 0;
   319     0032  01AA               	clrf	_fortyms
   320     0033  01AB               	clrf	_fortyms+1
   321     0034                     l713:
   322                           
   323                           ;main.c: 90:            _delay((unsigned long)((5)*(4000000/4000000.0)));
   324     0034  2835               	nop2	;2 cycle nop
   325     0035  2836               	nop2	;2 cycle nop
   326     0036  0000               	nop
   327     0037                     l715:
   328                           
   329                           ;main.c: 91:            adc_value = Read_Adc();
   330     0037  20A4               	fcall	_Read_Adc
   331     0038  1283               	bcf	3,5	;RP0=0, select bank0
   332     0039  0831               	movf	?_Read_Adc+1,w
   333     003A  00A5               	movwf	_adc_value+1
   334     003B  0830               	movf	?_Read_Adc,w
   335     003C  00A4               	movwf	_adc_value
   336     003D                     l717:
   337                           
   338                           ;main.c: 92:            _delay((unsigned long)((5)*(4000000/4000000.0)));
   339     003D  283E               	nop2	;2 cycle nop
   340     003E  283F               	nop2	;2 cycle nop
   341     003F  0000               	nop
   342     0040                     l719:
   343                           
   344                           ;main.c: 93:            if(adc_value > 300 && adc_value < 450){
   345     0040  1283               	bcf	3,5	;RP0=0, select bank0
   346     0041  0825               	movf	_adc_value+1,w
   347     0042  3A80               	xorlw	128
   348     0043  00DF               	movwf	btemp+1
   349     0044  3081               	movlw	129
   350     0045  025F               	subwf	btemp+1,w
   351     0046  1D03               	skipz
   352     0047  284A               	goto	u165
   353     0048  302D               	movlw	45
   354     0049  0224               	subwf	_adc_value,w
   355     004A                     u165:
   356     004A  1C03               	skipc
   357     004B  284D               	goto	u161
   358     004C  284E               	goto	u160
   359     004D                     u161:
   360     004D  2864               	goto	l727
   361     004E                     u160:
   362     004E                     l721:
   363     004E  1283               	bcf	3,5	;RP0=0, select bank0
   364     004F  0825               	movf	_adc_value+1,w
   365     0050  3A80               	xorlw	128
   366     0051  00DF               	movwf	btemp+1
   367     0052  3081               	movlw	129
   368     0053  025F               	subwf	btemp+1,w
   369     0054  1D03               	skipz
   370     0055  2858               	goto	u175
   371     0056  30C2               	movlw	194
   372     0057  0224               	subwf	_adc_value,w
   373     0058                     u175:
   374     0058  1803               	skipnc
   375     0059  285B               	goto	u171
   376     005A  285C               	goto	u170
   377     005B                     u171:
   378     005B  2864               	goto	l727
   379     005C                     u170:
   380     005C                     l723:
   381                           
   382                           ;main.c: 95:                start= 0;
   383     005C  1283               	bcf	3,5	;RP0=0, select bank0
   384     005D  01A8               	clrf	_start
   385     005E  01A9               	clrf	_start+1
   386     005F                     l725:
   387                           
   388                           ;main.c: 96:                stop= 1;
   389     005F  3001               	movlw	1
   390     0060  00A6               	movwf	_stop
   391     0061  3000               	movlw	0
   392     0062  00A7               	movwf	_stop+1
   393                           
   394                           ;main.c: 97:            }else if(adc_value > 451){
   395     0063  282A               	goto	l709
   396     0064                     l727:
   397     0064  1283               	bcf	3,5	;RP0=0, select bank0
   398     0065  0825               	movf	_adc_value+1,w
   399     0066  3A80               	xorlw	128
   400     0067  00DF               	movwf	btemp+1
   401     0068  3081               	movlw	129
   402     0069  025F               	subwf	btemp+1,w
   403     006A  1D03               	skipz
   404     006B  286E               	goto	u185
   405     006C  30C4               	movlw	196
   406     006D  0224               	subwf	_adc_value,w
   407     006E                     u185:
   408     006E  1C03               	skipc
   409     006F  2871               	goto	u181
   410     0070  2872               	goto	u180
   411     0071                     u181:
   412     0071  287A               	goto	l69
   413     0072                     u180:
   414     0072                     l729:
   415                           
   416                           ;main.c: 99:                stop= 0;
   417     0072  1283               	bcf	3,5	;RP0=0, select bank0
   418     0073  01A6               	clrf	_stop
   419     0074  01A7               	clrf	_stop+1
   420     0075                     l731:
   421                           
   422                           ;main.c: 100:                start=1;
   423     0075  3001               	movlw	1
   424     0076  00A8               	movwf	_start
   425     0077  3000               	movlw	0
   426     0078  00A9               	movwf	_start+1
   427                           
   428                           ;main.c: 101:            }else{
   429     0079  282A               	goto	l709
   430     007A                     l69:
   431     007A  282A               	goto	l709
   432     007B  280B               	ljmp	start
   433     007C                     __end_of_main:
   434                           
   435                           	psect	text1
   436     00A4                     __ptext1:	
   437 ;; *************** function _Read_Adc *****************
   438 ;; Defined at:
   439 ;;		line 31 in file "main.c"
   440 ;; Parameters:    Size  Location     Type
   441 ;;		None
   442 ;; Auto vars:     Size  Location     Type
   443 ;;		None
   444 ;; Return value:  Size  Location     Type
   445 ;;                  2    2[BANK0 ] int 
   446 ;; Registers used:
   447 ;;		wreg
   448 ;; Tracked objects:
   449 ;;		On entry : 0/0
   450 ;;		On exit  : 0/0
   451 ;;		Unchanged: 0/0
   452 ;; Data sizes:     COMMON   BANK0
   453 ;;      Params:         0       2
   454 ;;      Locals:         0       0
   455 ;;      Temps:          0       0
   456 ;;      Totals:         0       2
   457 ;;Total ram usage:        2 bytes
   458 ;; Hardware stack levels used: 1
   459 ;; Hardware stack levels required when called: 1
   460 ;; This function calls:
   461 ;;		Nothing
   462 ;; This function is called by:
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467     00A4                     _Read_Adc:	
   468                           ;psect for function _Read_Adc
   469                           
   470     00A4                     l675:	
   471                           ;incstack = 0
   472                           ; Regs used in _Read_Adc: [wreg]
   473                           
   474     00A4  1283               	bcf	3,5	;RP0=0, select bank0
   475     00A5  149F               	bsf	31,1	;volatile
   476     00A6  28A7               	nop2	;2 cycle nop
   477     00A7  28A8               	nop2	;2 cycle nop
   478     00A8  0000               	nop
   479     00A9                     l47:
   480     00A9  1283               	bcf	3,5	;RP0=0, select bank0
   481     00AA  189F               	btfsc	31,1	;volatile
   482     00AB  28AD               	goto	u101
   483     00AC  28AE               	goto	u100
   484     00AD                     u101:
   485     00AD  28A9               	goto	l47
   486     00AE                     u100:
   487     00AE                     l677:
   488     00AE  081E               	movf	30,w	;volatile
   489     00AF  00B1               	movwf	?_Read_Adc+1
   490     00B0  1683               	bsf	3,5	;RP0=1, select bank1
   491     00B1  081E               	movf	30,w	;volatile
   492     00B2  1283               	bcf	3,5	;RP0=0, select bank0
   493     00B3  00B0               	movwf	?_Read_Adc
   494     00B4                     l50:
   495     00B4  0008               	return
   496     00B5                     __end_of_Read_Adc:
   497                           
   498                           	psect	text2
   499     007C                     __ptext2:	
   500 ;; *************** function _ISR *****************
   501 ;; Defined at:
   502 ;;		line 39 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0
   516 ;;      Params:         0       0
   517 ;;      Locals:         0       0
   518 ;;      Temps:          0       2
   519 ;;      Totals:         0       2
   520 ;;Total ram usage:        2 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		Interrupt level 1
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529     007C                     _ISR:	
   530                           ;psect for function _ISR
   531                           
   532     007C                     i1l681:
   533     007C  1D0B               	btfss	11,2	;volatile
   534     007D  287F               	goto	u11_21
   535     007E  2880               	goto	u11_20
   536     007F                     u11_21:
   537     007F  2898               	goto	i1l55
   538     0080                     u11_20:
   539     0080                     i1l683:
   540     0080  3001               	movlw	1
   541     0081  07AA               	addwf	_fortyms,f
   542     0082  1803               	skipnc
   543     0083  0AAB               	incf	_fortyms+1,f
   544     0084  3000               	movlw	0
   545     0085  07AB               	addwf	_fortyms+1,f
   546     0086                     i1l685:
   547                           
   548                           ;main.c: 53:         if(start == 1){
   549     0086  0328               	decf	_start,w
   550     0087  0429               	iorwf	_start+1,w
   551     0088  1D03               	btfss	3,2
   552     0089  288B               	goto	u12_21
   553     008A  288C               	goto	u12_20
   554     008B                     u12_21:
   555     008B  288E               	goto	i1l689
   556     008C                     u12_20:
   557     008C                     i1l687:
   558                           
   559                           ;main.c: 54:             GP5= 1;
   560     008C  1685               	bsf	5,5	;volatile
   561                           
   562                           ;main.c: 55:         }else if(start== 0){
   563     008D  2895               	goto	i1l57
   564     008E                     i1l689:
   565     008E  0828               	movf	_start,w
   566     008F  0429               	iorwf	_start+1,w
   567     0090  1D03               	btfss	3,2
   568     0091  2893               	goto	u13_21
   569     0092  2894               	goto	u13_20
   570     0093                     u13_21:
   571     0093  2895               	goto	i1l57
   572     0094                     u13_20:
   573     0094                     i1l691:
   574                           
   575                           ;main.c: 56:             GP5= 0;
   576     0094  1285               	bcf	5,5	;volatile
   577     0095                     i1l57:	
   578                           ;main.c: 57:         }else{
   579                           
   580                           
   581                           ;main.c: 60:         T0IF = 0;
   582     0095  110B               	bcf	11,2	;volatile
   583                           
   584                           ;main.c: 61:         TMR0 = 6;
   585     0096  3006               	movlw	6
   586     0097  0081               	movwf	1	;volatile
   587     0098                     i1l55:	
   588                           ;main.c: 62:     }
   589                           
   590                           
   591                           ;main.c: 63:     if(CMIF)
   592     0098  1D8C               	btfss	12,3	;volatile
   593     0099  289B               	goto	u14_21
   594     009A  289C               	goto	u14_20
   595     009B                     u14_21:
   596     009B  289D               	goto	i1l61
   597     009C                     u14_20:
   598     009C                     i1l693:
   599                           
   600                           ;main.c: 64:     {;main.c: 66:          CMIF =0;
   601     009C  118C               	bcf	12,3	;volatile
   602     009D                     i1l61:
   603     009D  082F               	movf	??_ISR+1,w
   604     009E  008A               	movwf	10
   605     009F  0E2E               	swapf	??_ISR,w
   606     00A0  0083               	movwf	3
   607     00A1  0EDE               	swapf	btemp,f
   608     00A2  0E5E               	swapf	btemp,w
   609     00A3  0009               	retfie
   610     00A4                     __end_of_ISR:
   611     0000                     ___latbits      equ	0
   612     005E                     btemp           set	94	;btemp
   613     005E                     wtemp0          set	94
   614                           
   615                           	psect	intentry
   616     0004                     __pintentry:	
   617                           ;incstack = 0
   618                           ; Regs used in _ISR: [wreg+status,2+status,0]
   619                           
   620     0004                     interrupt_function:
   621     005E                     saved_w         set	btemp
   622     0004  00DE               	movwf	btemp
   623     0005  0E03               	swapf	3,w
   624     0006  1283               	bcf	3,5	;RP0=0, select bank0
   625     0007  00AE               	movwf	??_ISR
   626     0008  080A               	movf	10,w
   627     0009  00AF               	movwf	??_ISR+1
   628     000A  287C               	ljmp	_ISR
   629                           
   630                           	psect	config
   631                           
   632                           ;Config register CONFIG @ 0x2007
   633                           ;	Oscillator Selection bits
   634                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   635                           ;	Watchdog Timer Enable bit
   636                           ;	WDTE = OFF, WDT disabled
   637                           ;	Power-Up Timer Enable bit
   638                           ;	PWRTE = OFF, PWRT disabled
   639                           ;	GP3/MCLR pin function select
   640                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   641                           ;	Brown-out Detect Enable bit
   642                           ;	BOREN = OFF, BOD disabled
   643                           ;	Code Protection bit
   644                           ;	CP = OFF, Program Memory code protection is disabled
   645                           ;	Data Code Protection bit
   646                           ;	CPD = OFF, Data memory code protection is disabled
   647     2007                     	org	8199
   648     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      4      18

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Read_Adc

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               62      4      18     29.0%
STACK                0      0       0      0.0%
DATA                 0      0      18      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 22 12:13:00 2024

                     l50 00B4                       l47 00A9                       l69 007A  
                     fsr 0004                      l701 0023                      l711 0032  
                    l703 0025                      l721 004E                      l713 0034  
                    l705 0027                      l731 0075                      l723 005C  
                    l715 0037                      l707 0028                      l725 005F  
                    l717 003D                      l709 002A                      l727 0064  
                    l719 0040                      l729 0072                      l675 00A4  
                    l677 00AE                      l695 0013                      l697 001C  
                    l699 0020                      _GP5 002D                      u100 00AE  
                    u101 00AD                      u150 0032                      u151 0031  
                    u160 004E                      u161 004D                      u170 005C  
                    u171 005B                      u180 0072                      u181 0071  
                    u165 004A                      u175 0058                      u185 006E  
                    _ISR 007C                      _WPU 0095                      indf 0000  
                   ?_ISR 002E                     _CMIE 0463                     _CMIF 0063  
                   _T0IF 005A                     i1l61 009D                     i1l55 0098  
                   i1l57 0095                     _TMR0 0001                     _main 0013  
                   btemp 005E                     _stop 0026                     start 000B  
                  ??_ISR 002E                    ?_main 002E                    _CMCON 0019  
                  _ANSEL 009F                    i1l681 007C                    i1l691 0094  
                  i1l683 0080                    i1l693 009C                    i1l685 0086  
                  i1l687 008C                    i1l689 008E                    u11_20 0080  
                  u11_21 007F                    u12_20 008C                    u12_21 008B  
                  u13_20 0094                    u13_21 0093                    u14_20 009C  
                  u14_21 009B                    _start 0028                    pclath 000A  
                  status 0003                    wtemp0 005E          __initialization 000C  
           __end_of_main 007C         __end_of_Read_Adc 00B5                   ??_main 0000  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
                 _INTCON 000B                   _OSCCAL 0090                   _TRISIO 0085  
                 saved_w 005E  __end_of__initialization 0011           __pcstackCOMMON 0000  
             __pbssBANK0 0020                ?_Read_Adc 0030               __pmaintext 0013  
             __pintentry 0004            _buttonpressed 002C               ??_Read_Adc 0000  
                __ptext1 00A4                  __ptext2 007C                  _fortyms 002A  
                clrloop0 00B6     end_of_initialization 0011      start_initialization 000C  
            __end_of_ISR 00A4                ___latbits 0000            __pcstackBANK0 002E  
              _adc_value 0024        interrupt_function 0004                clear_ram0 00B5  
              _tempo_led 0020                 _Read_Adc 00A4                 intlevel1 0000  
             _OPTION_REG 0081  
