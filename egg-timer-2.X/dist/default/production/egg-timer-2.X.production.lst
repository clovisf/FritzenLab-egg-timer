

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Jul 13 12:41:36 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,space=0,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x5E,2
    17     0000                     
    18                           ; Generated 17/08/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F675 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0004                     fsr             equ	4
    53     0004                     fsr0            equ	4
    54     0000                     indf            equ	0
    55     0000                     indf0           equ	0
    56     0002                     pc              equ	2
    57     0002                     pcl             equ	2
    58     000A                     pclath          equ	10
    59     0003                     status          equ	3
    60     0000                     INDF            equ	0	;# 
    61     0001                     TMR0            equ	1	;# 
    62     0002                     PCL             equ	2	;# 
    63     0003                     STATUS          equ	3	;# 
    64     0004                     FSR             equ	4	;# 
    65     0005                     GPIO            equ	5	;# 
    66     000A                     PCLATH          equ	10	;# 
    67     000B                     INTCON          equ	11	;# 
    68     000C                     PIR1            equ	12	;# 
    69     000E                     TMR1            equ	14	;# 
    70     000E                     TMR1L           equ	14	;# 
    71     000F                     TMR1H           equ	15	;# 
    72     0010                     T1CON           equ	16	;# 
    73     0019                     CMCON           equ	25	;# 
    74     001E                     ADRESH          equ	30	;# 
    75     001F                     ADCON0          equ	31	;# 
    76     0081                     OPTION_REG      equ	129	;# 
    77     0085                     TRISIO          equ	133	;# 
    78     008C                     PIE1            equ	140	;# 
    79     008E                     PCON            equ	142	;# 
    80     0090                     OSCCAL          equ	144	;# 
    81     0095                     WPU             equ	149	;# 
    82     0096                     IOC             equ	150	;# 
    83     0096                     IOCB            equ	150	;# 
    84     0099                     VRCON           equ	153	;# 
    85     009A                     EEDATA          equ	154	;# 
    86     009A                     EEDAT           equ	154	;# 
    87     009B                     EEADR           equ	155	;# 
    88     009C                     EECON1          equ	156	;# 
    89     009D                     EECON2          equ	157	;# 
    90     009E                     ADRESL          equ	158	;# 
    91     009F                     ANSEL           equ	159	;# 
    92     0000                     INDF            equ	0	;# 
    93     0001                     TMR0            equ	1	;# 
    94     0002                     PCL             equ	2	;# 
    95     0003                     STATUS          equ	3	;# 
    96     0004                     FSR             equ	4	;# 
    97     0005                     GPIO            equ	5	;# 
    98     000A                     PCLATH          equ	10	;# 
    99     000B                     INTCON          equ	11	;# 
   100     000C                     PIR1            equ	12	;# 
   101     000E                     TMR1            equ	14	;# 
   102     000E                     TMR1L           equ	14	;# 
   103     000F                     TMR1H           equ	15	;# 
   104     0010                     T1CON           equ	16	;# 
   105     0019                     CMCON           equ	25	;# 
   106     001E                     ADRESH          equ	30	;# 
   107     001F                     ADCON0          equ	31	;# 
   108     0081                     OPTION_REG      equ	129	;# 
   109     0085                     TRISIO          equ	133	;# 
   110     008C                     PIE1            equ	140	;# 
   111     008E                     PCON            equ	142	;# 
   112     0090                     OSCCAL          equ	144	;# 
   113     0095                     WPU             equ	149	;# 
   114     0096                     IOC             equ	150	;# 
   115     0096                     IOCB            equ	150	;# 
   116     0099                     VRCON           equ	153	;# 
   117     009A                     EEDATA          equ	154	;# 
   118     009A                     EEDAT           equ	154	;# 
   119     009B                     EEADR           equ	155	;# 
   120     009C                     EECON1          equ	156	;# 
   121     009D                     EECON2          equ	157	;# 
   122     009E                     ADRESL          equ	158	;# 
   123     009F                     ANSEL           equ	159	;# 
   124                           
   125                           	psect	idataBANK0
   126     020F                     __pidataBANK0:
   127                           
   128                           ;initializer for _finalquantity
   129     020F  34D0               	retlw	208
   130     0210  3407               	retlw	7
   131     000B                     _INTCON         set	11
   132     001F                     _ADCON0         set	31
   133     0019                     _CMCON          set	25
   134     0001                     _TMR0           set	1
   135     001E                     _ADRESH         set	30
   136     001F                     _ADCON0bits     set	31
   137     002A                     _GP2            set	42
   138     002D                     _GP5            set	45
   139     005A                     _T0IF           set	90
   140     0085                     _TRISIO         set	133
   141     0081                     _OPTION_REG     set	129
   142     0090                     _OSCCAL         set	144
   143     0095                     _WPU            set	149
   144     009F                     _ANSEL          set	159
   145     0081                     _OPTION_REGbits set	129
   146     009E                     _ADRESL         set	158
   147                           
   148                           	psect	cinit
   149     000E                     start_initialization:	
   150                           ; #config settings
   151                           
   152     000E                     __initialization:
   153                           
   154                           ; Initialize objects allocated to BANK0
   155     000E  220F               	fcall	__pidataBANK0	;fetch initializer
   156     000F  00CA               	movwf	__pdataBANK0& (0+127)
   157     0010  2210               	fcall	__pidataBANK0+1	;fetch initializer
   158     0011  00CB               	movwf	(__pdataBANK0+1)& (0+127)
   159                           
   160                           ; Clear objects allocated to BANK0
   161     0012  1383               	bcf	3,7	;select IRP bank0
   162     0013  3020               	movlw	low __pbssBANK0
   163     0014  0084               	movwf	4
   164     0015  3043               	movlw	low (__pbssBANK0+35)
   165     0016  2207               	fcall	clear_ram0
   166     0017                     end_of_initialization:	
   167                           ;End of C runtime variable initialization code
   168                           
   169     0017                     __end_of__initialization:
   170     0017  0183               	clrf	3
   171     0018  294B               	ljmp	_main	;jump to C main() function
   172                           
   173                           	psect	bssBANK0
   174     0020                     __pbssBANK0:
   175     0020                     _tempo_led:
   176     0020                     	ds	4
   177     0024                     _longtimecounter:
   178     0024                     	ds	2
   179     0026                     _finalbuzzercounter:
   180     0026                     	ds	2
   181     0028                     _supercounter:
   182     0028                     	ds	2
   183     002A                     _counttime:
   184     002A                     	ds	2
   185     002C                     _buttontimercounter:
   186     002C                     	ds	2
   187     002E                     _processbuttonclicks:
   188     002E                     	ds	2
   189     0030                     _adc_value:
   190     0030                     	ds	2
   191     0032                     _buttonstimer:
   192     0032                     	ds	2
   193     0034                     _ledtimer:
   194     0034                     	ds	2
   195     0036                     _buttonpressed:
   196     0036                     	ds	2
   197     0038                     _processstarted:
   198     0038                     	ds	1
   199     0039                     _buzzeron:
   200     0039                     	ds	1
   201     003A                     _finalbuzzer:
   202     003A                     	ds	1
   203     003B                     _timecontrol:
   204     003B                     	ds	1
   205     003C                     _starttimer:
   206     003C                     	ds	1
   207     003D                     _enterbuttontimercounter:
   208     003D                     	ds	1
   209     003E                     _canstartblinking:
   210     003E                     	ds	1
   211     003F                     _startbutton:
   212     003F                     	ds	1
   213     0040                     _start:
   214     0040                     	ds	1
   215     0041                     _buttonclicks:
   216     0041                     	ds	2
   217                           
   218                           	psect	dataBANK0
   219     004A                     __pdataBANK0:
   220     004A                     _finalquantity:
   221     004A                     	ds	2
   222                           
   223                           	psect	clrtext
   224     0207                     clear_ram0:	
   225                           ;	Called with FSR containing the base address, and
   226                           ;	W with the last address+1
   227                           
   228     0207  0064               	clrwdt	;clear the watchdog before getting into this loop
   229     0208                     clrloop0:
   230     0208  0180               	clrf	0	;clear RAM location pointed to by FSR
   231     0209  0A84               	incf	4,f	;increment pointer
   232     020A  0604               	xorwf	4,w	;XOR with final address
   233     020B  1903               	btfsc	3,2	;have we reached the end yet?
   234     020C  3400               	retlw	0	;all done for this memory range, return
   235     020D  0604               	xorwf	4,w	;XOR again to restore value
   236     020E  2A08               	goto	clrloop0	;do the next byte
   237                           
   238                           	psect	cstackCOMMON
   239     0000                     __pcstackCOMMON:
   240     0000                     ??_Read_Adc:
   241     0000                     ??_main:	
   242                           ; 1 bytes @ 0x0
   243                           
   244                           
   245                           	psect	cstackBANK0
   246     0043                     __pcstackBANK0:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0043                     ?_ISR:
   250     0043                     ?_main:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0043                     ??_ISR:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258     0043                     	ds	5
   259     0048                     ?_Read_Adc:
   260                           
   261                           ; 2 bytes @ 0x5
   262     0048                     	ds	2
   263                           
   264                           	psect	maintext
   265     014B                     __pmaintext:	
   266 ;;
   267 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   268 ;;
   269 ;; *************** function _main *****************
   270 ;; Defined at:
   271 ;;		line 168 in file "main.c"
   272 ;; Parameters:    Size  Location     Type
   273 ;;		None
   274 ;; Auto vars:     Size  Location     Type
   275 ;;		None
   276 ;; Return value:  Size  Location     Type
   277 ;;                  1    wreg      void 
   278 ;; Registers used:
   279 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   280 ;; Tracked objects:
   281 ;;		On entry : B00/0
   282 ;;		On exit  : 0/0
   283 ;;		Unchanged: 0/0
   284 ;; Data sizes:     COMMON   BANK0
   285 ;;      Params:         0       0
   286 ;;      Locals:         0       0
   287 ;;      Temps:          0       0
   288 ;;      Totals:         0       0
   289 ;;Total ram usage:        0 bytes
   290 ;; Hardware stack levels required when called: 2
   291 ;; This function calls:
   292 ;;		_Read_Adc
   293 ;; This function is called by:
   294 ;;		Startup code after reset
   295 ;; This function uses a non-reentrant model
   296 ;;
   297                           
   298     014B                     _main:	
   299                           ;psect for function _main
   300                           
   301     014B                     l955:	
   302                           ;incstack = 0
   303                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   304                           
   305     014B  1683               	bsf	3,5	;RP0=1, select bank1
   306     014C  1581               	bsf	1,3	;volatile
   307     014D                     l957:
   308     014D  3007               	movlw	7
   309     014E  0481               	iorwf	1,f	;volatile
   310     014F                     l959:
   311     014F  3007               	movlw	7
   312     0150  1283               	bcf	3,5	;RP0=0, select bank0
   313     0151  0099               	movwf	25	;volatile
   314     0152                     l961:
   315                           
   316                           ;main.c: 181:     ANSEL = 0b00100001;
   317     0152  3021               	movlw	33
   318     0153  1683               	bsf	3,5	;RP0=1, select bank1
   319     0154  009F               	movwf	31	;volatile
   320     0155                     l963:
   321                           
   322                           ;main.c: 189:     ADCON0 = 0b10000001;
   323     0155  3081               	movlw	129
   324     0156  1283               	bcf	3,5	;RP0=0, select bank0
   325     0157  009F               	movwf	31	;volatile
   326     0158                     l965:
   327                           
   328                           ;main.c: 192:     WPU = 0X00;
   329     0158  1683               	bsf	3,5	;RP0=1, select bank1
   330     0159  0195               	clrf	21	;volatile
   331     015A                     l967:
   332                           
   333                           ;main.c: 195:     TMR0 = 0;
   334     015A  1283               	bcf	3,5	;RP0=0, select bank0
   335     015B  0181               	clrf	1	;volatile
   336     015C                     l969:
   337                           
   338                           ;main.c: 198:     OSCCAL = 0XFF;
   339     015C  30FF               	movlw	255
   340     015D  1683               	bsf	3,5	;RP0=1, select bank1
   341     015E  0090               	movwf	16	;volatile
   342     015F                     l971:
   343                           
   344                           ;main.c: 209:     OPTION_REG = 0X81;
   345     015F  3081               	movlw	129
   346     0160  0081               	movwf	1	;volatile
   347     0161                     l973:
   348                           
   349                           ;main.c: 220:     INTCON = 0XE0;
   350     0161  30E0               	movlw	224
   351     0162  008B               	movwf	11	;volatile
   352     0163                     l975:
   353                           
   354                           ;main.c: 229:     TRISIO = 0X03;
   355     0163  3003               	movlw	3
   356     0164  0085               	movwf	5	;volatile
   357     0165                     l127:	
   358                           ;main.c: 232:     for (;;) {
   359                           
   360     0165  0064               	clrwdt	;# 
   361     0166                     l977:
   362                           
   363                           ;main.c: 235:         if (buttonstimer >= 300) {
   364     0166  1283               	bcf	3,5	;RP0=0, select bank0
   365     0167  0833               	movf	_buttonstimer+1,w	;volatile
   366     0168  3A80               	xorlw	128
   367     0169  00DF               	movwf	btemp+1
   368     016A  3081               	movlw	129
   369     016B  025F               	subwf	btemp+1,w
   370     016C  1D03               	skipz
   371     016D  2970               	goto	u645
   372     016E  302C               	movlw	44
   373     016F  0232               	subwf	_buttonstimer,w	;volatile
   374     0170                     u645:
   375     0170  1C03               	skipc
   376     0171  2973               	goto	u641
   377     0172  2974               	goto	u640
   378     0173                     u641:
   379     0173  2965               	goto	l127
   380     0174                     u640:
   381     0174                     l979:
   382                           
   383                           ;main.c: 236:             buttonstimer = 0;
   384     0174  1283               	bcf	3,5	;RP0=0, select bank0
   385     0175  01B2               	clrf	_buttonstimer	;volatile
   386     0176  01B3               	clrf	_buttonstimer+1	;volatile
   387     0177                     l981:
   388                           
   389                           ;main.c: 238:             adc_value = Read_Adc();
   390     0177  21FA               	fcall	_Read_Adc
   391     0178  1283               	bcf	3,5	;RP0=0, select bank0
   392     0179  0849               	movf	?_Read_Adc+1,w
   393     017A  00B1               	movwf	_adc_value+1	;volatile
   394     017B  0848               	movf	?_Read_Adc,w
   395     017C  00B0               	movwf	_adc_value	;volatile
   396     017D                     l983:
   397                           
   398                           ;main.c: 242:             if (adc_value > 90 && adc_value <= 1023 && canstartblinking ==
      +                           0 && starttimer == 0) {
   399     017D  3000               	movlw	0
   400     017E  0231               	subwf	_adc_value+1,w	;volatile
   401     017F  305B               	movlw	91
   402     0180  1903               	skipnz
   403     0181  0230               	subwf	_adc_value,w	;volatile
   404     0182  1C03               	skipc
   405     0183  2985               	goto	u651
   406     0184  2986               	goto	u650
   407     0185                     u651:
   408     0185  29BD               	goto	l1003
   409     0186                     u650:
   410     0186                     l985:
   411     0186  3004               	movlw	4
   412     0187  0231               	subwf	_adc_value+1,w	;volatile
   413     0188  3000               	movlw	0
   414     0189  1903               	skipnz
   415     018A  0230               	subwf	_adc_value,w	;volatile
   416     018B  1803               	skipnc
   417     018C  298E               	goto	u661
   418     018D  298F               	goto	u660
   419     018E                     u661:
   420     018E  29BD               	goto	l1003
   421     018F                     u660:
   422     018F                     l987:
   423     018F  083E               	movf	_canstartblinking,w	;volatile
   424     0190  1D03               	btfss	3,2
   425     0191  2993               	goto	u671
   426     0192  2994               	goto	u670
   427     0193                     u671:
   428     0193  29BD               	goto	l1003
   429     0194                     u670:
   430     0194                     l989:
   431     0194  083C               	movf	_starttimer,w	;volatile
   432     0195  1D03               	btfss	3,2
   433     0196  2998               	goto	u681
   434     0197  2999               	goto	u680
   435     0198                     u681:
   436     0198  29BD               	goto	l1003
   437     0199                     u680:
   438     0199                     l991:
   439                           
   440                           ;main.c: 243:                 buttonclicks++;
   441     0199  3001               	movlw	1
   442     019A  07C1               	addwf	_buttonclicks,f	;volatile
   443     019B  1803               	skipnc
   444     019C  0AC2               	incf	_buttonclicks+1,f	;volatile
   445     019D  3000               	movlw	0
   446     019E  07C2               	addwf	_buttonclicks+1,f	;volatile
   447     019F                     l993:
   448                           
   449                           ;main.c: 244:                 processstarted = 1;
   450     019F  3001               	movlw	1
   451     01A0  00B8               	movwf	_processstarted	;volatile
   452     01A1                     l995:
   453                           
   454                           ;main.c: 246:                 if (buttonclicks == 1) {
   455     01A1  0341               	decf	_buttonclicks,w	;volatile
   456     01A2  0442               	iorwf	_buttonclicks+1,w	;volatile
   457     01A3  1D03               	btfss	3,2
   458     01A4  29A6               	goto	u691
   459     01A5  29A7               	goto	u690
   460     01A6                     u691:
   461     01A6  29AA               	goto	l999
   462     01A7                     u690:
   463     01A7                     l997:
   464                           
   465                           ;main.c: 247:                     enterbuttontimercounter = 1;
   466     01A7  3001               	movlw	1
   467     01A8  00BD               	movwf	_enterbuttontimercounter	;volatile
   468                           
   469                           ;main.c: 248:                 } else if (buttonclicks > 4) {
   470     01A9  29D0               	goto	l1007
   471     01AA                     l999:
   472     01AA  0842               	movf	_buttonclicks+1,w	;volatile
   473     01AB  3A80               	xorlw	128
   474     01AC  00DF               	movwf	btemp+1
   475     01AD  3080               	movlw	128
   476     01AE  025F               	subwf	btemp+1,w
   477     01AF  1D03               	skipz
   478     01B0  29B3               	goto	u705
   479     01B1  3005               	movlw	5
   480     01B2  0241               	subwf	_buttonclicks,w	;volatile
   481     01B3                     u705:
   482     01B3  1C03               	skipc
   483     01B4  29B6               	goto	u701
   484     01B5  29B7               	goto	u700
   485     01B6                     u701:
   486     01B6  29D0               	goto	l1007
   487     01B7                     u700:
   488     01B7                     l1001:
   489                           
   490                           ;main.c: 249:                     buttonclicks = 4;
   491     01B7  3004               	movlw	4
   492     01B8  1283               	bcf	3,5	;RP0=0, select bank0
   493     01B9  00C1               	movwf	_buttonclicks	;volatile
   494     01BA  3000               	movlw	0
   495     01BB  00C2               	movwf	_buttonclicks+1	;volatile
   496     01BC  29D0               	goto	l1007
   497     01BD                     l1003:
   498     01BD  3000               	movlw	0
   499     01BE  0231               	subwf	_adc_value+1,w	;volatile
   500     01BF  305B               	movlw	91
   501     01C0  1903               	skipnz
   502     01C1  0230               	subwf	_adc_value,w	;volatile
   503     01C2  1803               	skipnc
   504     01C3  29C5               	goto	u711
   505     01C4  29C6               	goto	u710
   506     01C5                     u711:
   507     01C5  29D0               	goto	l1007
   508     01C6                     u710:
   509     01C6                     l1005:
   510     01C6  3000               	movlw	0
   511     01C7  0231               	subwf	_adc_value+1,w	;volatile
   512     01C8  3015               	movlw	21
   513     01C9  1903               	skipnz
   514     01CA  0230               	subwf	_adc_value,w	;volatile
   515     01CB  1C03               	skipc
   516     01CC  29CE               	goto	u721
   517     01CD  29CF               	goto	u720
   518     01CE                     u721:
   519     01CE  29D0               	goto	l1007
   520     01CF                     u720:
   521     01CF                     l135:	
   522                           ;main.c: 252:                 while(1){
   523                           
   524     01CF                     l136:	
   525                           ;main.c: 254:                 }
   526                           
   527     01CF  29CF               	goto	l135
   528     01D0                     l1007:
   529                           
   530                           ;main.c: 258:             if (enterbuttontimercounter == 1) {
   531     01D0  1283               	bcf	3,5	;RP0=0, select bank0
   532     01D1  033D               	decf	_enterbuttontimercounter,w	;volatile
   533     01D2  1D03               	btfss	3,2
   534     01D3  29D5               	goto	u731
   535     01D4  29D6               	goto	u730
   536     01D5                     u731:
   537     01D5  2965               	goto	l127
   538     01D6                     u730:
   539     01D6                     l1009:
   540                           
   541                           ;main.c: 259:                 buttontimercounter++;
   542     01D6  3001               	movlw	1
   543     01D7  07AC               	addwf	_buttontimercounter,f	;volatile
   544     01D8  1803               	skipnc
   545     01D9  0AAD               	incf	_buttontimercounter+1,f	;volatile
   546     01DA  3000               	movlw	0
   547     01DB  07AD               	addwf	_buttontimercounter+1,f	;volatile
   548     01DC                     l1011:
   549                           
   550                           ;main.c: 260:                 if (buttontimercounter > 15) {
   551     01DC  082D               	movf	_buttontimercounter+1,w	;volatile
   552     01DD  3A80               	xorlw	128
   553     01DE  00DF               	movwf	btemp+1
   554     01DF  3080               	movlw	128
   555     01E0  025F               	subwf	btemp+1,w
   556     01E1  1D03               	skipz
   557     01E2  29E5               	goto	u745
   558     01E3  3010               	movlw	16
   559     01E4  022C               	subwf	_buttontimercounter,w	;volatile
   560     01E5                     u745:
   561     01E5  1C03               	skipc
   562     01E6  29E8               	goto	u741
   563     01E7  29E9               	goto	u740
   564     01E8                     u741:
   565     01E8  2965               	goto	l127
   566     01E9                     u740:
   567     01E9                     l1013:
   568                           
   569                           ;main.c: 261:                     enterbuttontimercounter = 0;
   570     01E9  1283               	bcf	3,5	;RP0=0, select bank0
   571     01EA  01BD               	clrf	_enterbuttontimercounter	;volatile
   572                           
   573                           ;main.c: 262:                     buttontimercounter = 0;
   574     01EB  01AC               	clrf	_buttontimercounter	;volatile
   575     01EC  01AD               	clrf	_buttontimercounter+1	;volatile
   576     01ED                     l1015:
   577                           
   578                           ;main.c: 263:                     processbuttonclicks = 2 * buttonclicks;
   579     01ED  1003               	clrc
   580     01EE  0D41               	rlf	_buttonclicks,w	;volatile
   581     01EF  00AE               	movwf	_processbuttonclicks	;volatile
   582     01F0  0D42               	rlf	_buttonclicks+1,w	;volatile
   583     01F1  00AF               	movwf	_processbuttonclicks+1	;volatile
   584     01F2                     l1017:
   585                           
   586                           ;main.c: 264:                     timecontrol = buttonclicks;
   587     01F2  0841               	movf	_buttonclicks,w	;volatile
   588     01F3  00BB               	movwf	_timecontrol	;volatile
   589                           
   590                           ;main.c: 265:                     buttonclicks = 0;
   591     01F4  01C1               	clrf	_buttonclicks	;volatile
   592     01F5  01C2               	clrf	_buttonclicks+1	;volatile
   593     01F6                     l1019:
   594                           
   595                           ;main.c: 266:                     canstartblinking = 1;
   596     01F6  3001               	movlw	1
   597     01F7  00BE               	movwf	_canstartblinking	;volatile
   598     01F8  2965               	goto	l127
   599     01F9  280D               	ljmp	start
   600     01FA                     __end_of_main:
   601                           
   602                           	psect	text1
   603     01FA                     __ptext1:	
   604 ;; *************** function _Read_Adc *****************
   605 ;; Defined at:
   606 ;;		line 52 in file "main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  2    5[BANK0 ] unsigned int 
   613 ;; Registers used:
   614 ;;		wreg
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMMON   BANK0
   620 ;;      Params:         0       2
   621 ;;      Locals:         0       0
   622 ;;      Temps:          0       0
   623 ;;      Totals:         0       2
   624 ;;Total ram usage:        2 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; Hardware stack levels required when called: 1
   627 ;; This function calls:
   628 ;;		Nothing
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634     01FA                     _Read_Adc:	
   635                           ;psect for function _Read_Adc
   636                           
   637     01FA                     l853:	
   638                           ;incstack = 0
   639                           ; Regs used in _Read_Adc: [wreg]
   640                           
   641                           
   642                           ;main.c: 53:                 if (processstarted == 1) {
   643     01FA  1283               	bcf	3,5	;RP0=0, select bank0
   644     01FB  149F               	bsf	31,1	;volatile
   645     01FC                     l79:	
   646                           ;main.c: 54:                     finalbuzzer = 1;
   647                           
   648     01FC  189F               	btfsc	31,1	;volatile
   649     01FD  29FF               	goto	u381
   650     01FE  2A00               	goto	u380
   651     01FF                     u381:
   652     01FF  29FC               	goto	l79
   653     0200                     u380:
   654     0200                     l855:
   655                           
   656                           ;main.c: 56:                 }
   657     0200  081E               	movf	30,w	;volatile
   658     0201  00C9               	movwf	?_Read_Adc+1
   659     0202  1683               	bsf	3,5	;RP0=1, select bank1
   660     0203  081E               	movf	30,w	;volatile
   661     0204  1283               	bcf	3,5	;RP0=0, select bank0
   662     0205  00C8               	movwf	?_Read_Adc
   663     0206                     l82:
   664     0206  0008               	return
   665     0207                     __end_of_Read_Adc:
   666                           
   667                           	psect	text2
   668     0019                     __ptext2:	
   669 ;; *************** function _ISR *****************
   670 ;; Defined at:
   671 ;;		line 60 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, btemp+1
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0
   685 ;;      Params:         0       0
   686 ;;      Locals:         0       0
   687 ;;      Temps:          0       5
   688 ;;      Totals:         0       5
   689 ;;Total ram usage:        5 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; This function calls:
   692 ;;		Nothing
   693 ;; This function is called by:
   694 ;;		Interrupt level 1
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698     0019                     _ISR:	
   699                           ;psect for function _ISR
   700                           
   701     0019                     i1l859:
   702                           
   703                           ;main.c: 62: 
   704     0019  1D0B               	btfss	11,2	;volatile
   705     001A  281C               	goto	u39_21
   706     001B  281D               	goto	u39_20
   707     001C                     u39_21:
   708     001C  2943               	goto	i1l122
   709     001D                     u39_20:
   710     001D                     i1l861:
   711                           
   712                           ;main.c: 66:             canstartblinking = 0;
   713     001D  3001               	movlw	1
   714     001E  07B4               	addwf	_ledtimer,f	;volatile
   715     001F  1803               	skipnc
   716     0020  0AB5               	incf	_ledtimer+1,f	;volatile
   717     0021  3000               	movlw	0
   718     0022  07B5               	addwf	_ledtimer+1,f	;volatile
   719                           
   720                           ;main.c: 67:             if (finalbuzzercounter <= 3000) {
   721     0023  3001               	movlw	1
   722     0024  07B2               	addwf	_buttonstimer,f	;volatile
   723     0025  1803               	skipnc
   724     0026  0AB3               	incf	_buttonstimer+1,f	;volatile
   725     0027  3000               	movlw	0
   726     0028  07B3               	addwf	_buttonstimer+1,f	;volatile
   727     0029                     i1l863:
   728                           
   729                           ;main.c: 70:                 buzzeron = 0;
   730     0029  033C               	decf	_starttimer,w	;volatile
   731     002A  1D03               	btfss	3,2
   732     002B  282D               	goto	u40_21
   733     002C  282E               	goto	u40_20
   734     002D                     u40_21:
   735     002D  286C               	goto	i1l883
   736     002E                     u40_20:
   737     002E                     i1l865:
   738                           
   739                           ;main.c: 71: 
   740     002E  3001               	movlw	1
   741     002F  07AA               	addwf	_counttime,f	;volatile
   742     0030  1803               	skipnc
   743     0031  0AAB               	incf	_counttime+1,f	;volatile
   744     0032  3000               	movlw	0
   745     0033  07AB               	addwf	_counttime+1,f	;volatile
   746     0034                     i1l867:
   747                           
   748                           ;main.c: 73: 
   749     0034  082A               	movf	_counttime,w	;volatile
   750     0035  024A               	subwf	_finalquantity,w	;volatile
   751     0036  00C3               	movwf	??_ISR
   752     0037  082B               	movf	_counttime+1,w	;volatile
   753     0038  1C03               	skipc
   754     0039  0A2B               	incf	_counttime+1,w	;volatile
   755     003A  024B               	subwf	_finalquantity+1,w	;volatile
   756     003B  00C4               	movwf	??_ISR+1
   757     003C  0844               	movf	??_ISR+1,w
   758     003D  3A80               	xorlw	128
   759     003E  00DF               	movwf	btemp+1
   760     003F  3080               	movlw	128
   761     0040  025F               	subwf	btemp+1,w
   762     0041  1D03               	skipz
   763     0042  2845               	goto	u41_25
   764     0043  3001               	movlw	1
   765     0044  0243               	subwf	??_ISR,w
   766     0045                     u41_25:
   767     0045  1803               	skipnc
   768     0046  2848               	goto	u41_21
   769     0047  2849               	goto	u41_20
   770     0048                     u41_21:
   771     0048  286C               	goto	i1l883
   772     0049                     u41_20:
   773     0049                     i1l869:
   774                           
   775                           ;main.c: 74: 
   776     0049  1283               	bcf	3,5	;RP0=0, select bank0
   777     004A  01AA               	clrf	_counttime	;volatile
   778     004B  01AB               	clrf	_counttime+1	;volatile
   779     004C                     i1l871:
   780                           
   781                           ;main.c: 75: 
   782     004C  3001               	movlw	1
   783     004D  07A4               	addwf	_longtimecounter,f	;volatile
   784     004E  1803               	skipnc
   785     004F  0AA5               	incf	_longtimecounter+1,f	;volatile
   786     0050  3000               	movlw	0
   787     0051  07A5               	addwf	_longtimecounter+1,f	;volatile
   788     0052                     i1l873:
   789                           
   790                           ;main.c: 76:                 processbuttonclicks = 0;
   791     0052  0825               	movf	_longtimecounter+1,w	;volatile
   792     0053  3A80               	xorlw	128
   793     0054  00DF               	movwf	btemp+1
   794     0055  3080               	movlw	128
   795     0056  025F               	subwf	btemp+1,w
   796     0057  1D03               	skipz
   797     0058  285B               	goto	u42_25
   798     0059  3090               	movlw	144
   799     005A  0224               	subwf	_longtimecounter,w	;volatile
   800     005B                     u42_25:
   801     005B  1C03               	skipc
   802     005C  285E               	goto	u42_21
   803     005D  285F               	goto	u42_20
   804     005E                     u42_21:
   805     005E  286C               	goto	i1l883
   806     005F                     u42_20:
   807     005F                     i1l875:
   808                           
   809                           ;main.c: 77:                 processstarted = 0;
   810     005F  1283               	bcf	3,5	;RP0=0, select bank0
   811     0060  01CA               	clrf	_finalquantity	;volatile
   812     0061  01CB               	clrf	_finalquantity+1	;volatile
   813                           
   814                           ;main.c: 78:                 finalbuzzercounter = 0;
   815     0062  01BC               	clrf	_starttimer	;volatile
   816     0063                     i1l877:
   817                           
   818                           ;main.c: 80:                 while(1){
   819     0063  0338               	decf	_processstarted,w	;volatile
   820     0064  1D03               	btfss	3,2
   821     0065  2867               	goto	u43_21
   822     0066  2868               	goto	u43_20
   823     0067                     u43_21:
   824     0067  286C               	goto	i1l89
   825     0068                     u43_20:
   826     0068                     i1l879:
   827                           
   828                           ;main.c: 81: 
   829     0068  3001               	movlw	1
   830     0069  00BA               	movwf	_finalbuzzer	;volatile
   831     006A                     i1l881:
   832                           
   833                           ;main.c: 82:                 }
   834     006A  01B8               	clrf	_processstarted	;volatile
   835     006B  286C               	goto	i1l883
   836     006C                     i1l89:	
   837                           ;main.c: 87: 
   838                           
   839     006C                     i1l883:
   840                           
   841                           ;main.c: 91:             if (start == 1) {
   842     006C  1283               	bcf	3,5	;RP0=0, select bank0
   843     006D  033A               	decf	_finalbuzzer,w	;volatile
   844     006E  1D03               	btfss	3,2
   845     006F  2871               	goto	u44_21
   846     0070  2872               	goto	u44_20
   847     0071                     u44_21:
   848     0071  2895               	goto	i1l897
   849     0072                     u44_20:
   850     0072                     i1l885:
   851                           
   852                           ;main.c: 92:                 start = 0;
   853     0072  3001               	movlw	1
   854     0073  07A6               	addwf	_finalbuzzercounter,f	;volatile
   855     0074  1803               	skipnc
   856     0075  0AA7               	incf	_finalbuzzercounter+1,f	;volatile
   857     0076  3000               	movlw	0
   858     0077  07A7               	addwf	_finalbuzzercounter+1,f	;volatile
   859     0078                     i1l887:
   860                           
   861                           ;main.c: 93:                 buzzeron = 0;
   862     0078  01BE               	clrf	_canstartblinking	;volatile
   863     0079                     i1l889:
   864                           
   865                           ;main.c: 94:             } else {
   866     0079  0827               	movf	_finalbuzzercounter+1,w	;volatile
   867     007A  3A80               	xorlw	128
   868     007B  00DF               	movwf	btemp+1
   869     007C  308B               	movlw	139
   870     007D  025F               	subwf	btemp+1,w
   871     007E  1D03               	skipz
   872     007F  2882               	goto	u45_25
   873     0080  30B9               	movlw	185
   874     0081  0226               	subwf	_finalbuzzercounter,w	;volatile
   875     0082                     u45_25:
   876     0082  1803               	skipnc
   877     0083  2885               	goto	u45_21
   878     0084  2886               	goto	u45_20
   879     0085                     u45_21:
   880     0085  288A               	goto	i1l893
   881     0086                     u45_20:
   882     0086                     i1l891:
   883                           
   884                           ;main.c: 95:                 start = 1;
   885     0086  3001               	movlw	1
   886     0087  1283               	bcf	3,5	;RP0=0, select bank0
   887     0088  00B9               	movwf	_buzzeron	;volatile
   888                           
   889                           ;main.c: 96:                 buzzeron= 1;
   890     0089  2895               	goto	i1l897
   891     008A                     i1l893:
   892                           
   893                           ;main.c: 97:             }
   894     008A  1283               	bcf	3,5	;RP0=0, select bank0
   895     008B  01B9               	clrf	_buzzeron	;volatile
   896     008C                     i1l895:
   897                           
   898                           ;main.c: 99:         } else if (processbuttonclicks <= 0 && canstartblinking == 1) {
   899     008C  3001               	movlw	1
   900     008D  00BC               	movwf	_starttimer	;volatile
   901                           
   902                           ;main.c: 103:             } else if (timecontrol == 3) {
   903     008E  01AE               	clrf	_processbuttonclicks	;volatile
   904     008F  01AF               	clrf	_processbuttonclicks+1	;volatile
   905                           
   906                           ;main.c: 104:                 finalquantity = 22500;
   907     0090  01B8               	clrf	_processstarted	;volatile
   908                           
   909                           ;main.c: 105:             } else if (timecontrol == 2) {
   910     0091  01A6               	clrf	_finalbuzzercounter	;volatile
   911     0092  01A7               	clrf	_finalbuzzercounter+1	;volatile
   912                           
   913                           ;main.c: 106:                 finalquantity = 15000;
   914     0093  01BA               	clrf	_finalbuzzer	;volatile
   915     0094                     i1l95:	
   916                           ;main.c: 107:             } else if (timecontrol == 1) {
   917                           
   918     0094                     i1l96:	
   919                           ;main.c: 109:             } else {
   920                           
   921     0094  2894               	goto	i1l95
   922     0095                     i1l897:
   923                           
   924                           ;main.c: 116:             }
   925     0095  0835               	movf	_ledtimer+1,w	;volatile
   926     0096  3A80               	xorlw	128
   927     0097  00DF               	movwf	btemp+1
   928     0098  3080               	movlw	128
   929     0099  025F               	subwf	btemp+1,w
   930     009A  1D03               	skipz
   931     009B  289E               	goto	u46_25
   932     009C  30C8               	movlw	200
   933     009D  0234               	subwf	_ledtimer,w	;volatile
   934     009E                     u46_25:
   935     009E  1C03               	skipc
   936     009F  28A1               	goto	u46_21
   937     00A0  28A2               	goto	u46_20
   938     00A1                     u46_21:
   939     00A1  28CB               	goto	i1l911
   940     00A2                     u46_20:
   941     00A2                     i1l899:
   942     00A2  1283               	bcf	3,5	;RP0=0, select bank0
   943     00A3  082F               	movf	_processbuttonclicks+1,w	;volatile
   944     00A4  3A80               	xorlw	128
   945     00A5  00DF               	movwf	btemp+1
   946     00A6  3080               	movlw	128
   947     00A7  025F               	subwf	btemp+1,w
   948     00A8  1D03               	skipz
   949     00A9  28AC               	goto	u47_25
   950     00AA  3001               	movlw	1
   951     00AB  022E               	subwf	_processbuttonclicks,w	;volatile
   952     00AC                     u47_25:
   953     00AC  1C03               	skipc
   954     00AD  28AF               	goto	u47_21
   955     00AE  28B0               	goto	u47_20
   956     00AF                     u47_21:
   957     00AF  28CB               	goto	i1l911
   958     00B0                     u47_20:
   959     00B0                     i1l901:
   960     00B0  1283               	bcf	3,5	;RP0=0, select bank0
   961     00B1  033E               	decf	_canstartblinking,w	;volatile
   962     00B2  1D03               	btfss	3,2
   963     00B3  28B5               	goto	u48_21
   964     00B4  28B6               	goto	u48_20
   965     00B5                     u48_21:
   966     00B5  28CB               	goto	i1l911
   967     00B6                     u48_20:
   968     00B6                     i1l903:
   969                           
   970                           ;main.c: 117:         }
   971     00B6  30FF               	movlw	255
   972     00B7  07AE               	addwf	_processbuttonclicks,f	;volatile
   973     00B8  1803               	skipnc
   974     00B9  0AAF               	incf	_processbuttonclicks+1,f	;volatile
   975     00BA  30FF               	movlw	255
   976     00BB  07AF               	addwf	_processbuttonclicks+1,f	;volatile
   977     00BC                     i1l905:
   978                           
   979                           ;main.c: 118: 
   980     00BC  0340               	decf	_start,w	;volatile
   981     00BD  1D03               	btfss	3,2
   982     00BE  28C0               	goto	u49_21
   983     00BF  28C1               	goto	u49_20
   984     00C0                     u49_21:
   985     00C0  28C4               	goto	i1l99
   986     00C1                     u49_20:
   987     00C1                     i1l907:
   988                           
   989                           ;main.c: 119: 
   990     00C1  01C0               	clrf	_start	;volatile
   991                           
   992                           ;main.c: 120:         if ((start == 1 && starttimer == 0) || (starttimer == 1 && finalqu
      +                          antity != 0) || buzzeron == 1) {
   993     00C2  01B9               	clrf	_buzzeron	;volatile
   994                           
   995                           ;main.c: 121: 
   996     00C3  28C8               	goto	i1l909
   997     00C4                     i1l99:
   998                           
   999                           ;main.c: 122:             GP5 = 1;
  1000     00C4  3001               	movlw	1
  1001     00C5  00C0               	movwf	_start	;volatile
  1002                           
  1003                           ;main.c: 123: 
  1004     00C6  3001               	movlw	1
  1005     00C7  00B9               	movwf	_buzzeron	;volatile
  1006     00C8                     i1l909:
  1007                           
  1008                           ;main.c: 125:                 GP2 = 1;
  1009     00C8  01B4               	clrf	_ledtimer	;volatile
  1010     00C9  01B5               	clrf	_ledtimer+1	;volatile
  1011                           
  1012                           ;main.c: 126:             } else {
  1013     00CA  2919               	goto	i1l941
  1014     00CB                     i1l911:
  1015     00CB  1283               	bcf	3,5	;RP0=0, select bank0
  1016     00CC  082F               	movf	_processbuttonclicks+1,w	;volatile
  1017     00CD  3A80               	xorlw	128
  1018     00CE  00DF               	movwf	btemp+1
  1019     00CF  3080               	movlw	128
  1020     00D0  025F               	subwf	btemp+1,w
  1021     00D1  1D03               	skipz
  1022     00D2  28D5               	goto	u50_25
  1023     00D3  3001               	movlw	1
  1024     00D4  022E               	subwf	_processbuttonclicks,w	;volatile
  1025     00D5                     u50_25:
  1026     00D5  1803               	skipnc
  1027     00D6  28D8               	goto	u50_21
  1028     00D7  28D9               	goto	u50_20
  1029     00D8                     u50_21:
  1030     00D8  2919               	goto	i1l941
  1031     00D9                     u50_20:
  1032     00D9                     i1l913:
  1033     00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1034     00DA  033E               	decf	_canstartblinking,w	;volatile
  1035     00DB  1D03               	btfss	3,2
  1036     00DC  28DE               	goto	u51_21
  1037     00DD  28DF               	goto	u51_20
  1038     00DE                     u51_21:
  1039     00DE  2919               	goto	i1l941
  1040     00DF                     u51_20:
  1041     00DF                     i1l915:
  1042                           
  1043                           ;main.c: 128:             }
  1044     00DF  3004               	movlw	4
  1045     00E0  063B               	xorwf	_timecontrol,w	;volatile
  1046     00E1  1D03               	btfss	3,2
  1047     00E2  28E4               	goto	u52_21
  1048     00E3  28E5               	goto	u52_20
  1049     00E4                     u52_21:
  1050     00E4  28EA               	goto	i1l919
  1051     00E5                     u52_20:
  1052     00E5                     i1l917:
  1053                           
  1054                           ;main.c: 129:         } else {
  1055     00E5  3030               	movlw	48
  1056     00E6  00CA               	movwf	_finalquantity	;volatile
  1057     00E7  3075               	movlw	117
  1058     00E8  00CB               	movwf	_finalquantity+1	;volatile
  1059                           
  1060                           ;main.c: 130: 
  1061     00E9  290C               	goto	i1l933
  1062     00EA                     i1l919:
  1063     00EA  3003               	movlw	3
  1064     00EB  063B               	xorwf	_timecontrol,w	;volatile
  1065     00EC  1D03               	btfss	3,2
  1066     00ED  28EF               	goto	u53_21
  1067     00EE  28F0               	goto	u53_20
  1068     00EF                     u53_21:
  1069     00EF  28F5               	goto	i1l923
  1070     00F0                     u53_20:
  1071     00F0                     i1l921:
  1072                           
  1073                           ;main.c: 131:             GP5 = 0;
  1074     00F0  30E4               	movlw	228
  1075     00F1  00CA               	movwf	_finalquantity	;volatile
  1076     00F2  3057               	movlw	87
  1077     00F3  00CB               	movwf	_finalquantity+1	;volatile
  1078                           
  1079                           ;main.c: 132:             GP2 = 0;
  1080     00F4  290C               	goto	i1l933
  1081     00F5                     i1l923:
  1082     00F5  3002               	movlw	2
  1083     00F6  063B               	xorwf	_timecontrol,w	;volatile
  1084     00F7  1D03               	btfss	3,2
  1085     00F8  28FA               	goto	u54_21
  1086     00F9  28FB               	goto	u54_20
  1087     00FA                     u54_21:
  1088     00FA  2900               	goto	i1l927
  1089     00FB                     u54_20:
  1090     00FB                     i1l925:
  1091                           
  1092                           ;main.c: 133:         }
  1093     00FB  3098               	movlw	152
  1094     00FC  00CA               	movwf	_finalquantity	;volatile
  1095     00FD  303A               	movlw	58
  1096     00FE  00CB               	movwf	_finalquantity+1	;volatile
  1097                           
  1098                           ;main.c: 134: 
  1099     00FF  290C               	goto	i1l933
  1100     0100                     i1l927:
  1101     0100  033B               	decf	_timecontrol,w	;volatile
  1102     0101  1D03               	btfss	3,2
  1103     0102  2904               	goto	u55_21
  1104     0103  2905               	goto	u55_20
  1105     0104                     u55_21:
  1106     0104  290A               	goto	i1l931
  1107     0105                     u55_20:
  1108     0105                     i1l929:
  1109                           
  1110                           ;main.c: 135:         T0IF = 0;
  1111     0105  304C               	movlw	76
  1112     0106  00CA               	movwf	_finalquantity	;volatile
  1113     0107  301D               	movlw	29
  1114     0108  00CB               	movwf	_finalquantity+1	;volatile
  1115                           
  1116                           ;main.c: 136:         TMR0 = 6;
  1117     0109  290C               	goto	i1l933
  1118     010A                     i1l931:
  1119                           
  1120                           ;main.c: 137:     }
  1121     010A  01CA               	clrf	_finalquantity	;volatile
  1122     010B  01CB               	clrf	_finalquantity+1	;volatile
  1123     010C                     i1l933:
  1124                           
  1125                           ;main.c: 140: 
  1126     010C  083C               	movf	_starttimer,w	;volatile
  1127     010D  1D03               	btfss	3,2
  1128     010E  2910               	goto	u56_21
  1129     010F  2911               	goto	u56_20
  1130     0110                     u56_21:
  1131     0110  2919               	goto	i1l941
  1132     0111                     u56_20:
  1133     0111                     i1l935:
  1134     0111  083A               	movf	_finalbuzzer,w	;volatile
  1135     0112  1D03               	btfss	3,2
  1136     0113  2915               	goto	u57_21
  1137     0114  2916               	goto	u57_20
  1138     0115                     u57_21:
  1139     0115  2919               	goto	i1l941
  1140     0116                     u57_20:
  1141     0116                     i1l937:
  1142                           
  1143                           ;main.c: 141: void main(void) {
  1144     0116  3001               	movlw	1
  1145     0117  00BC               	movwf	_starttimer	;volatile
  1146     0118                     i1l939:
  1147                           
  1148                           ;main.c: 142:     OPTION_REGbits.PSA = 1;
  1149     0118  01BE               	clrf	_canstartblinking	;volatile
  1150     0119                     i1l941:
  1151     0119  1283               	bcf	3,5	;RP0=0, select bank0
  1152     011A  0340               	decf	_start,w	;volatile
  1153     011B  1D03               	btfss	3,2
  1154     011C  291E               	goto	u58_21
  1155     011D  291F               	goto	u58_20
  1156     011E                     u58_21:
  1157     011E  2924               	goto	i1l945
  1158     011F                     u58_20:
  1159     011F                     i1l943:
  1160     011F  083C               	movf	_starttimer,w	;volatile
  1161     0120  1903               	btfsc	3,2
  1162     0121  2923               	goto	u59_21
  1163     0122  2924               	goto	u59_20
  1164     0123                     u59_21:
  1165     0123  2934               	goto	i1l114
  1166     0124                     u59_20:
  1167     0124                     i1l945:
  1168     0124  033C               	decf	_starttimer,w	;volatile
  1169     0125  1D03               	btfss	3,2
  1170     0126  2928               	goto	u60_21
  1171     0127  2929               	goto	u60_20
  1172     0128                     u60_21:
  1173     0128  292F               	goto	i1l949
  1174     0129                     u60_20:
  1175     0129                     i1l947:
  1176     0129  084A               	movf	_finalquantity,w	;volatile
  1177     012A  044B               	iorwf	_finalquantity+1,w	;volatile
  1178     012B  1D03               	btfss	3,2
  1179     012C  292E               	goto	u61_21
  1180     012D  292F               	goto	u61_20
  1181     012E                     u61_21:
  1182     012E  2934               	goto	i1l114
  1183     012F                     u61_20:
  1184     012F                     i1l949:
  1185     012F  0339               	decf	_buzzeron,w	;volatile
  1186     0130  1D03               	btfss	3,2
  1187     0131  2933               	goto	u62_21
  1188     0132  2934               	goto	u62_20
  1189     0133                     u62_21:
  1190     0133  293E               	goto	i1l112
  1191     0134                     u62_20:
  1192     0134                     i1l114:
  1193     0134  1685               	bsf	5,5	;volatile
  1194     0135                     i1l951:
  1195     0135  0339               	decf	_buzzeron,w	;volatile
  1196     0136  1D03               	btfss	3,2
  1197     0137  2939               	goto	u63_21
  1198     0138  293A               	goto	u63_20
  1199     0139                     u63_21:
  1200     0139  293C               	goto	i1l119
  1201     013A                     u63_20:
  1202     013A                     i1l953:
  1203     013A  1505               	bsf	5,2	;volatile
  1204     013B  2940               	goto	i1l121
  1205     013C                     i1l119:
  1206     013C  1105               	bcf	5,2	;volatile
  1207     013D  2940               	goto	i1l121
  1208     013E                     i1l112:
  1209     013E  1285               	bcf	5,5	;volatile
  1210     013F  1105               	bcf	5,2	;volatile
  1211     0140                     i1l121:
  1212     0140  110B               	bcf	11,2	;volatile
  1213     0141  3006               	movlw	6
  1214     0142  0081               	movwf	1	;volatile
  1215     0143                     i1l122:
  1216     0143  0847               	movf	??_ISR+4,w
  1217     0144  0846               	movf	??_ISR+3,w
  1218     0145  008A               	movwf	10
  1219     0146  0E45               	swapf	??_ISR+2,w
  1220     0147  0083               	movwf	3
  1221     0148  0EDE               	swapf	btemp,f
  1222     0149  0E5E               	swapf	btemp,w
  1223     014A  0009               	retfie
  1224     014B                     __end_of_ISR:
  1225     0000                     ___latbits      equ	0
  1226     005E                     btemp           set	94	;btemp
  1227     005E                     wtemp0          set	94
  1228                           
  1229                           	psect	intentry
  1230     0004                     __pintentry:	
  1231                           ;incstack = 0
  1232                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
  1233                           
  1234     0004                     interrupt_function:
  1235     005E                     saved_w         set	btemp
  1236     0004  00DE               	movwf	btemp
  1237     0005  0E03               	swapf	3,w
  1238     0006  1283               	bcf	3,5	;RP0=0, select bank0
  1239     0007  00C5               	movwf	??_ISR+2
  1240     0008  080A               	movf	10,w
  1241     0009  00C6               	movwf	??_ISR+3
  1242     000A  085F               	movf	btemp+1,w
  1243     000B  00C7               	movwf	??_ISR+4
  1244     000C  2819               	ljmp	_ISR
  1245                           
  1246                           	psect	config
  1247                           
  1248                           ;Config register CONFIG @ 0x2007
  1249                           ;	Oscillator Selection bits
  1250                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1251                           ;	Watchdog Timer Enable bit
  1252                           ;	WDTE = ON, WDT enabled
  1253                           ;	Power-Up Timer Enable bit
  1254                           ;	PWRTE = OFF, PWRT disabled
  1255                           ;	GP3/MCLR pin function select
  1256                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1257                           ;	Brown-out Detect Enable bit
  1258                           ;	BOREN = OFF, BOD disabled
  1259                           ;	Code Protection bit
  1260                           ;	CP = OFF, Program Memory code protection is disabled
  1261                           ;	Data Code Protection bit
  1262                           ;	CPD = OFF, Data memory code protection is disabled
  1263     2007                     	org	8199
  1264     2007  319C               	dw	12700

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         35
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      7      44

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Read_Adc

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK0               62      7      44     71.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BITCOMMON            0      0       0      0.0%
DATA                 0      0      44      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Jul 13 12:41:36 2025

                     l82 0206                       l79 01FC                       fsr 0004  
                    l135 01CF                      l127 0165                      l136 01CF  
                    l853 01FA                      l855 0200                      l961 0152  
                    l971 015F                      l963 0155                      l955 014B  
                    l981 0177                      l973 0161                      l965 0158  
                    l957 014D                      _GP2 002A                      l991 0199  
                    l983 017D                      l975 0163                      l967 015A  
                    l959 014F                      l993 019F                      l985 0186  
                    l977 0166                      l969 015C                      _GP5 002D  
                    l995 01A1                      l987 018F                      l979 0174  
                    l997 01A7                      l989 0194                      l999 01AA  
                    u380 0200                      u700 01B7                      _ISR 0019  
                    u381 01FF                      u701 01B6                      u710 01C6  
                    u711 01C5                      u720 01CF                      u640 0174  
                    u721 01CE                      u705 01B3                      u641 0173  
                    u730 01D6                      u650 0186                      u731 01D5  
                    u651 0185                      u740 01E9                      u660 018F  
                    u741 01E8                      u661 018E                      u645 0170  
                    u670 0194                      u671 0193                      u680 0199  
                    u745 01E5                      u681 0198                      u690 01A7  
                    u691 01A6       _buttontimercounter 002C                      _WPU 0095  
                    indf 0000              _startbutton 003F                     ?_ISR 0043  
                   l1001 01B7                     l1011 01DC                     l1003 01BD  
                   l1013 01E9                     l1005 01C6                     l1015 01ED  
                   l1007 01D0                     l1017 01F2                     l1009 01D6  
                   l1019 01F6                     _T0IF 005A                     i1l95 0094  
                   i1l96 0094                     i1l89 006C                     i1l99 00C4  
                   _TMR0 0001                     _main 014B                     btemp 005E  
                   start 000D                    ??_ISR 0043                    ?_main 0043  
                  _CMCON 0019                    _ANSEL 009F                    i1l112 013E  
                  i1l121 0140                    i1l114 0134                    i1l122 0143  
                  i1l119 013C                    i1l901 00B0                    i1l903 00B6  
                  i1l911 00CB                    i1l921 00F0                    i1l913 00D9  
                  i1l905 00BC                    i1l931 010A                    i1l923 00F5  
                  i1l915 00DF                    i1l907 00C1                    i1l925 00FB  
                  i1l933 010C                    i1l917 00E5                    i1l941 0119  
                  i1l909 00C8                    i1l861 001D                    i1l951 0135  
                  i1l943 011F                    i1l935 0111                    i1l927 0100  
                  i1l919 00EA                    i1l871 004C                    i1l863 0029  
                  i1l953 013A                    i1l945 0124                    i1l937 0116  
                  i1l929 0105                    i1l881 006A                    i1l873 0052  
                  i1l865 002E                    i1l947 0129                    i1l939 0118  
                  i1l891 0086                    i1l875 005F                    i1l867 0034  
                  i1l883 006C                    i1l859 0019                    i1l949 012F  
                  i1l893 008A                    i1l885 0072                    i1l877 0063  
                  i1l869 0049                    i1l895 008C                    i1l887 0078  
                  i1l879 0068                    i1l889 0079                    i1l897 0095  
                  i1l899 00A2                    u40_20 002E                    u40_21 002D  
                  u41_20 0049                    u41_21 0048                    u41_25 0045  
                  u50_20 00D9                    u42_20 005F                    u50_21 00D8  
                  u42_21 005E                    u50_25 00D5                    u42_25 005B  
                  u51_20 00DF                    u43_20 0068                    u51_21 00DE  
                  u43_21 0067                    u60_20 0129                    u52_20 00E5  
                  u44_20 0072                    u60_21 0128                    u52_21 00E4  
                  u44_21 0071                    u61_20 012F                    u53_20 00F0  
                  u45_20 0086                    u61_21 012E                    u53_21 00EF  
                  u45_21 0085                    u45_25 0082                    u62_20 0134  
                  u54_20 00FB                    u46_20 00A2                    u62_21 0133  
                  u54_21 00FA                    u46_21 00A1                    u46_25 009E  
                  u63_20 013A                    u55_20 0105                    u47_20 00B0  
                  u39_20 001D                    u63_21 0139                    u55_21 0104  
                  u47_21 00AF                    u39_21 001C                    u47_25 00AC  
                  u56_20 0111                    u48_20 00B6                    u56_21 0110  
                  u48_21 00B5                    u57_20 0116                    u49_20 00C1  
                  u57_21 0115                    u49_21 00C0                    u58_20 011F  
                  u58_21 011E                    u59_20 0124                    u59_21 0123  
                  _start 0040                    pclath 000A                    status 0003  
                  wtemp0 005E          __initialization 000E             __end_of_main 01FA  
       __end_of_Read_Adc 0207             _supercounter 0028                   ??_main 0000  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
                 _INTCON 000B                   _OSCCAL 0090                   _TRISIO 0085  
                 saved_w 005E  __end_of__initialization 0017           __pcstackCOMMON 0000  
           __pidataBANK0 020F           _OPTION_REGbits 0081               __pbssBANK0 0020  
              ?_Read_Adc 0048               __pmaintext 014B               __pintentry 0004  
          _buttonpressed 0036               ??_Read_Adc 0000                  __ptext1 01FA  
                __ptext2 0019          _longtimecounter 0024                  clrloop0 0208  
   end_of_initialization 0017  _enterbuttontimercounter 003D       _finalbuzzercounter 0026  
             _starttimer 003C      _processbuttonclicks 002E      start_initialization 000E  
            __end_of_ISR 014B              __pdataBANK0 004A                ___latbits 0000  
          __pcstackBANK0 0043                _adc_value 0030             _buttonclicks 0041  
           _buttonstimer 0032                _counttime 002A        interrupt_function 0004  
              clear_ram0 0207              _finalbuzzer 003A                _tempo_led 0020  
             _ADCON0bits 001F                 _Read_Adc 01FA                 _ledtimer 0034  
               _buzzeron 0039           _processstarted 0038                 intlevel1 0000  
          _finalquantity 004A               _OPTION_REG 0081         _canstartblinking 003E  
            _timecontrol 003B  
