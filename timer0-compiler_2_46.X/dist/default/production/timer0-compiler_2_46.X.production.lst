

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Feb 04 21:46:25 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x5E,2
    16     0000                     
    17                           ; Generated 17/08/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC12F675 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000E                     	;# 
    61     000E                     	;# 
    62     000F                     	;# 
    63     0010                     	;# 
    64     0019                     	;# 
    65     001E                     	;# 
    66     001F                     	;# 
    67     0081                     	;# 
    68     0085                     	;# 
    69     008C                     	;# 
    70     008E                     	;# 
    71     0090                     	;# 
    72     0095                     	;# 
    73     0096                     	;# 
    74     0096                     	;# 
    75     0099                     	;# 
    76     009A                     	;# 
    77     009A                     	;# 
    78     009B                     	;# 
    79     009C                     	;# 
    80     009D                     	;# 
    81     009E                     	;# 
    82     009F                     	;# 
    83     0000                     	;# 
    84     0001                     	;# 
    85     0002                     	;# 
    86     0003                     	;# 
    87     0004                     	;# 
    88     0005                     	;# 
    89     000A                     	;# 
    90     000B                     	;# 
    91     000C                     	;# 
    92     000E                     	;# 
    93     000E                     	;# 
    94     000F                     	;# 
    95     0010                     	;# 
    96     0019                     	;# 
    97     001E                     	;# 
    98     001F                     	;# 
    99     0081                     	;# 
   100     0085                     	;# 
   101     008C                     	;# 
   102     008E                     	;# 
   103     0090                     	;# 
   104     0095                     	;# 
   105     0096                     	;# 
   106     0096                     	;# 
   107     0099                     	;# 
   108     009A                     	;# 
   109     009A                     	;# 
   110     009B                     	;# 
   111     009C                     	;# 
   112     009D                     	;# 
   113     009E                     	;# 
   114     009F                     	;# 
   115     000B                     _INTCON	set	11
   116     001F                     _ADCON0	set	31
   117     0019                     _CMCON	set	25
   118     0001                     _TMR0	set	1
   119     001E                     _ADRESH	set	30
   120     00F8                     _ADON	set	248
   121     002D                     _GP5	set	45
   122     005A                     _TMR0IF	set	90
   123     002A                     _GP2	set	42
   124     00F9                     _GO_nDONE	set	249
   125     0081                     _OPTION_REG	set	129
   126     0090                     _OSCCAL	set	144
   127     0095                     _WPU	set	149
   128     009F                     _ANSEL	set	159
   129     0085                     _TRISIO	set	133
   130     009E                     _ADRESL	set	158
   131                           
   132                           	psect	cinit
   133     000E                     start_initialization:	
   134                           ; #config settings
   135                           
   136     000E                     __initialization:
   137                           
   138                           ; Clear objects allocated to BANK0
   139     000E  1383               	bcf	3,7	;select IRP bank0
   140     000F  3020               	movlw	low __pbssBANK0
   141     0010  0084               	movwf	4
   142     0011  302D               	movlw	low (__pbssBANK0+13)
   143     0012  212C               	fcall	clear_ram0
   144     0013                     end_of_initialization:	
   145                           ;End of C runtime variable initialization code
   146                           
   147     0013                     __end_of__initialization:
   148     0013  0183               	clrf	3
   149     0014  28FE               	ljmp	_main	;jump to C main() function
   150                           
   151                           	psect	bssBANK0
   152     0020                     __pbssBANK0:
   153     0020                     _buzzerCount:
   154     0020                     	ds	2
   155     0022                     _activateBuzzer:
   156     0022                     	ds	2
   157     0024                     _enableCounter:
   158     0024                     	ds	2
   159     0026                     _voltageX10:
   160     0026                     	ds	2
   161     0028                     _reading:
   162     0028                     	ds	2
   163     002A                     _timerminutes:
   164     002A                     	ds	2
   165     002C                     _counter:
   166     002C                     	ds	1
   167                           
   168                           	psect	clrtext
   169     012C                     clear_ram0:	
   170                           ;	Called with FSR containing the base address, and
   171                           ;	W with the last address+1
   172                           
   173     012C  0064               	clrwdt	;clear the watchdog before getting into this loop
   174     012D                     clrloop0:
   175     012D  0180               	clrf	0	;clear RAM location pointed to by FSR
   176     012E  0A84               	incf	4,f	;increment pointer
   177     012F  0604               	xorwf	4,w	;XOR with final address
   178     0130  1903               	btfsc	3,2	;have we reached the end yet?
   179     0131  3400               	retlw	0	;all done for this memory range, return
   180     0132  0604               	xorwf	4,w	;XOR again to restore value
   181     0133  292D               	goto	clrloop0	;do the next byte
   182                           
   183                           	psect	cstackCOMMON
   184     0000                     __pcstackCOMMON:
   185     0000                     ??_driveLED:
   186     0000                     ??_main:	
   187                           ; 1 bytes @ 0x0
   188                           
   189     0000                     ??___wmul:	
   190                           ; 1 bytes @ 0x0
   191                           
   192                           
   193                           	psect	cstackBANK0
   194     002D                     __pcstackBANK0:	
   195                           ; 1 bytes @ 0x0
   196                           
   197     002D                     ?_driveLED:
   198     002D                     ?_isr:	
   199                           ; 1 bytes @ 0x0
   200                           
   201     002D                     ?_main:	
   202                           ; 1 bytes @ 0x0
   203                           
   204     002D                     ?___wmul:	
   205                           ; 1 bytes @ 0x0
   206                           
   207     002D                     driveLED@i:	
   208                           ; 2 bytes @ 0x0
   209                           
   210     002D                     ___wmul@multiplier:	
   211                           ; 2 bytes @ 0x0
   212                           
   213                           
   214                           ; 2 bytes @ 0x0
   215     002D                     	ds	2
   216     002F                     ___wmul@multiplicand:
   217                           
   218                           ; 2 bytes @ 0x2
   219     002F                     	ds	2
   220     0031                     ___wmul@product:
   221                           
   222                           ; 2 bytes @ 0x4
   223     0031                     	ds	2
   224     0033                     ??_isr:
   225                           
   226                           ; 1 bytes @ 0x6
   227     0033                     	ds	3
   228                           
   229                           	psect	maintext
   230     00FE                     __pmaintext:	
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 96 in file "main.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;		None
   241 ;; Return value:  Size  Location     Type
   242 ;;                  1    wreg      void 
   243 ;; Registers used:
   244 ;;		wreg, status,2
   245 ;; Tracked objects:
   246 ;;		On entry : B00/0
   247 ;;		On exit  : 0/0
   248 ;;		Unchanged: 0/0
   249 ;; Data sizes:     COMMON   BANK0
   250 ;;      Params:         0       0
   251 ;;      Locals:         0       0
   252 ;;      Temps:          0       0
   253 ;;      Totals:         0       0
   254 ;;Total ram usage:        0 bytes
   255 ;; Hardware stack levels required when called: 2
   256 ;; This function calls:
   257 ;;		Nothing
   258 ;; This function is called by:
   259 ;;		Startup code after reset
   260 ;; This function uses a non-reentrant model
   261 ;;
   262                           
   263     00FE                     _main:	
   264                           ;psect for function _main
   265                           
   266     00FE                     l805:	
   267                           ;incstack = 0
   268                           ; Regs used in _main: [wreg+status,2]
   269                           
   270                           
   271                           ;main.c: 97: }
   272     00FE  3001               	movlw	1
   273     00FF  1683               	bsf	3,5	;RP0=1, select bank1
   274     0100  0085               	movwf	5	;volatile
   275     0101  3007               	movlw	7
   276     0102  1283               	bcf	3,5	;RP0=0, select bank0
   277     0103  0099               	movwf	25	;volatile
   278     0104  3011               	movlw	17
   279     0105  1683               	bsf	3,5	;RP0=1, select bank1
   280     0106  009F               	movwf	31	;volatile
   281     0107  3080               	movlw	128
   282     0108  1283               	bcf	3,5	;RP0=0, select bank0
   283     0109  009F               	movwf	31	;volatile
   284     010A                     l807:
   285     010A  141F               	bsf	31,0	;volatile
   286     010B                     l809:
   287     010B  1683               	bsf	3,5	;RP0=1, select bank1
   288     010C  0195               	clrf	21	;volatile
   289     010D                     l811:
   290     010D  1283               	bcf	3,5	;RP0=0, select bank0
   291     010E  0181               	clrf	1	;volatile
   292     010F  30FF               	movlw	255
   293     0110  1683               	bsf	3,5	;RP0=1, select bank1
   294     0111  0090               	movwf	16	;volatile
   295     0112  3087               	movlw	135
   296     0113  0081               	movwf	1	;volatile
   297     0114  30E0               	movlw	224
   298     0115  008B               	movwf	11	;volatile
   299     0116                     l813:
   300     0116  1283               	bcf	3,5	;RP0=0, select bank0
   301     0117  1105               	bcf	5,2	;volatile
   302     0118                     l815:
   303     0118  1285               	bcf	5,5	;volatile
   304     0119                     l82:
   305     0119                     l83:
   306     0119  2919               	goto	l82
   307     011A  280D               	ljmp	start
   308     011B                     __end_of_main:
   309                           
   310                           	psect	text1
   311     0015                     __ptext1:	
   312 ;; *************** function _isr *****************
   313 ;; Defined at:
   314 ;;		line 30 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : 0/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMMON   BANK0
   328 ;;      Params:         0       0
   329 ;;      Locals:         0       0
   330 ;;      Temps:          0       3
   331 ;;      Totals:         0       3
   332 ;;Total ram usage:        3 bytes
   333 ;; Hardware stack levels used: 1
   334 ;; Hardware stack levels required when called: 1
   335 ;; This function calls:
   336 ;;		___wmul
   337 ;;		_driveLED
   338 ;; This function is called by:
   339 ;;		Interrupt level 1
   340 ;; This function uses a non-reentrant model
   341 ;;
   342                           
   343     0015                     _isr:	
   344                           ;psect for function _isr
   345                           
   346     0015                     i1l745:
   347                           
   348                           ;main.c: 32:            }
   349     0015  3001               	movlw	1
   350     0016  00DF               	movwf	btemp+1
   351     0017  085F               	movf	btemp+1,w
   352     0018  07AC               	addwf	_counter,f	;volatile
   353     0019                     i1l747:
   354                           
   355                           ;main.c: 33: 
   356     0019  0324               	decf	_enableCounter,w	;volatile
   357     001A  0425               	iorwf	_enableCounter+1,w	;volatile
   358     001B  1D03               	btfss	3,2
   359     001C  281E               	goto	u24_21
   360     001D  281F               	goto	u24_20
   361     001E                     u24_21:
   362     001E  2825               	goto	i1l751
   363     001F                     u24_20:
   364     001F                     i1l749:
   365                           
   366                           ;main.c: 34:         }else{
   367     001F  3001               	movlw	1
   368     0020  07AA               	addwf	_timerminutes,f	;volatile
   369     0021  1803               	skipnc
   370     0022  0AAB               	incf	_timerminutes+1,f	;volatile
   371     0023  3000               	movlw	0
   372     0024  07AB               	addwf	_timerminutes+1,f	;volatile
   373     0025                     i1l751:
   374                           
   375                           ;main.c: 38: 
   376     0025  032C               	decf	_counter,w	;volatile
   377     0026  1D03               	btfss	3,2
   378     0027  2829               	goto	u25_21
   379     0028  282A               	goto	u25_20
   380     0029                     u25_21:
   381     0029  2888               	goto	i1l779
   382     002A                     u25_20:
   383     002A                     i1l753:
   384                           
   385                           ;main.c: 39: 
   386     002A  149F               	bsf	31,1	;volatile
   387     002B                     i1l55:	
   388                           ;main.c: 40: 
   389                           
   390     002B  189F               	btfsc	31,1	;volatile
   391     002C  282E               	goto	u26_21
   392     002D  282F               	goto	u26_20
   393     002E                     u26_21:
   394     002E  282B               	goto	i1l55
   395     002F                     u26_20:
   396     002F                     i1l755:
   397                           
   398                           ;main.c: 41:     }
   399     002F  081E               	movf	30,w	;volatile
   400     0030  00A9               	movwf	_reading+1	;volatile
   401     0031  1683               	bsf	3,5	;RP0=1, select bank1
   402     0032  081E               	movf	30,w	;volatile
   403     0033  1283               	bcf	3,5	;RP0=0, select bank0
   404     0034  00A8               	movwf	_reading	;volatile
   405     0035                     i1l757:
   406                           
   407                           ;main.c: 42:     if(timerminutes == 1258){
   408     0035  0829               	movf	_reading+1,w	;volatile
   409     0036  00AE               	movwf	___wmul@multiplier+1
   410     0037  0828               	movf	_reading,w	;volatile
   411     0038  00AD               	movwf	___wmul@multiplier
   412     0039  3005               	movlw	5
   413     003A  00AF               	movwf	___wmul@multiplicand
   414     003B  3000               	movlw	0
   415     003C  00B0               	movwf	___wmul@multiplicand+1
   416     003D  20D8               	fcall	___wmul
   417     003E  1283               	bcf	3,5	;RP0=0, select bank0
   418     003F  082E               	movf	?___wmul+1,w
   419     0040  00A7               	movwf	_voltageX10+1	;volatile
   420     0041  082D               	movf	?___wmul,w
   421     0042  00A6               	movwf	_voltageX10	;volatile
   422     0043                     i1l759:
   423                           
   424                           ;main.c: 44:         enableCounter= 0;
   425     0043  0827               	movf	_voltageX10+1,w	;volatile
   426     0044  3A80               	xorlw	128
   427     0045  00DF               	movwf	btemp+1
   428     0046  3081               	movlw	129
   429     0047  025F               	subwf	btemp+1,w
   430     0048  1D03               	skipz
   431     0049  284C               	goto	u27_25
   432     004A  30F5               	movlw	245
   433     004B  0226               	subwf	_voltageX10,w	;volatile
   434     004C                     u27_25:
   435     004C  1C03               	skipc
   436     004D  284F               	goto	u27_21
   437     004E  2850               	goto	u27_20
   438     004F                     u27_21:
   439     004F  285C               	goto	i1l765
   440     0050                     u27_20:
   441     0050                     i1l761:
   442                           
   443                           ;main.c: 45:         timerminutes= 0;
   444     0050  3001               	movlw	1
   445     0051  1283               	bcf	3,5	;RP0=0, select bank0
   446     0052  00AD               	movwf	driveLED@i
   447     0053  3000               	movlw	0
   448     0054  00AE               	movwf	driveLED@i+1
   449     0055  211B               	fcall	_driveLED
   450     0056                     i1l763:
   451                           
   452                           ;main.c: 46:         activateBuzzer= 1;
   453     0056  3001               	movlw	1
   454     0057  1283               	bcf	3,5	;RP0=0, select bank0
   455     0058  00A4               	movwf	_enableCounter	;volatile
   456     0059  3000               	movlw	0
   457     005A  00A5               	movwf	_enableCounter+1	;volatile
   458                           
   459                           ;main.c: 47:     }
   460     005B  2886               	goto	i1l777
   461     005C                     i1l765:
   462     005C  1283               	bcf	3,5	;RP0=0, select bank0
   463     005D  0827               	movf	_voltageX10+1,w	;volatile
   464     005E  3A80               	xorlw	128
   465     005F  00DF               	movwf	btemp+1
   466     0060  3080               	movlw	128
   467     0061  025F               	subwf	btemp+1,w
   468     0062  1D03               	skipz
   469     0063  2866               	goto	u28_25
   470     0064  3065               	movlw	101
   471     0065  0226               	subwf	_voltageX10,w	;volatile
   472     0066                     u28_25:
   473     0066  1C03               	skipc
   474     0067  2869               	goto	u28_21
   475     0068  286A               	goto	u28_20
   476     0069                     u28_21:
   477     0069  2886               	goto	i1l777
   478     006A                     u28_20:
   479     006A                     i1l767:
   480     006A  1283               	bcf	3,5	;RP0=0, select bank0
   481     006B  0827               	movf	_voltageX10+1,w	;volatile
   482     006C  3A80               	xorlw	128
   483     006D  00DF               	movwf	btemp+1
   484     006E  3081               	movlw	129
   485     006F  025F               	subwf	btemp+1,w
   486     0070  1D03               	skipz
   487     0071  2874               	goto	u29_25
   488     0072  30F5               	movlw	245
   489     0073  0226               	subwf	_voltageX10,w	;volatile
   490     0074                     u29_25:
   491     0074  1803               	skipnc
   492     0075  2877               	goto	u29_21
   493     0076  2878               	goto	u29_20
   494     0077                     u29_21:
   495     0077  2886               	goto	i1l777
   496     0078                     u29_20:
   497     0078                     i1l769:
   498                           
   499                           ;main.c: 48: 
   500     0078  3000               	movlw	0
   501     0079  1283               	bcf	3,5	;RP0=0, select bank0
   502     007A  00AD               	movwf	driveLED@i
   503     007B  00AE               	movwf	driveLED@i+1
   504     007C  211B               	fcall	_driveLED
   505     007D                     i1l771:
   506                           
   507                           ;main.c: 49:     if(activateBuzzer == 1){
   508     007D  1283               	bcf	3,5	;RP0=0, select bank0
   509     007E  01A4               	clrf	_enableCounter	;volatile
   510     007F  01A5               	clrf	_enableCounter+1	;volatile
   511     0080                     i1l773:
   512                           
   513                           ;main.c: 50:         buzzerCount++;
   514     0080  1905               	btfsc	5,2	;volatile
   515     0081  2883               	goto	u30_21
   516     0082  2884               	goto	u30_20
   517     0083                     u30_21:
   518     0083  2886               	goto	i1l777
   519     0084                     u30_20:
   520     0084                     i1l775:
   521                           
   522                           ;main.c: 51:         if(buzzerCount < 15){
   523     0084  01A2               	clrf	_activateBuzzer	;volatile
   524     0085  01A3               	clrf	_activateBuzzer+1	;volatile
   525     0086                     i1l777:
   526                           
   527                           ;main.c: 57:         }
   528     0086  1283               	bcf	3,5	;RP0=0, select bank0
   529     0087  01AC               	clrf	_counter	;volatile
   530     0088                     i1l779:
   531                           
   532                           ;main.c: 62:     TMR0 = 0;
   533     0088  30EA               	movlw	234
   534     0089  062A               	xorwf	_timerminutes,w	;volatile
   535     008A  3004               	movlw	4
   536     008B  1903               	skipnz
   537     008C  062B               	xorwf	_timerminutes+1,w	;volatile
   538     008D  1D03               	btfss	3,2
   539     008E  2890               	goto	u31_21
   540     008F  2891               	goto	u31_20
   541     0090                     u31_21:
   542     0090  289E               	goto	i1l789
   543     0091                     u31_20:
   544     0091                     i1l781:
   545                           
   546                           ;main.c: 63: }
   547     0091  3000               	movlw	0
   548     0092  00AD               	movwf	driveLED@i
   549     0093  00AE               	movwf	driveLED@i+1
   550     0094  211B               	fcall	_driveLED
   551     0095                     i1l783:
   552                           
   553                           ;main.c: 64: 
   554     0095  1283               	bcf	3,5	;RP0=0, select bank0
   555     0096  01A4               	clrf	_enableCounter	;volatile
   556     0097  01A5               	clrf	_enableCounter+1	;volatile
   557     0098                     i1l785:
   558                           
   559                           ;main.c: 65: void driveLED(int i){
   560     0098  01AA               	clrf	_timerminutes	;volatile
   561     0099  01AB               	clrf	_timerminutes+1	;volatile
   562     009A                     i1l787:
   563                           
   564                           ;main.c: 66:     if(i == 0){
   565     009A  3001               	movlw	1
   566     009B  00A2               	movwf	_activateBuzzer	;volatile
   567     009C  3000               	movlw	0
   568     009D  00A3               	movwf	_activateBuzzer+1	;volatile
   569     009E                     i1l789:
   570                           
   571                           ;main.c: 69:         GP5= 1;
   572     009E  0322               	decf	_activateBuzzer,w	;volatile
   573     009F  0423               	iorwf	_activateBuzzer+1,w	;volatile
   574     00A0  1D03               	btfss	3,2
   575     00A1  28A3               	goto	u32_21
   576     00A2  28A4               	goto	u32_20
   577     00A3                     u32_21:
   578     00A3  28CE               	goto	i1l69
   579     00A4                     u32_20:
   580     00A4                     i1l791:
   581                           
   582                           ;main.c: 70:     }else{
   583     00A4  3001               	movlw	1
   584     00A5  07A0               	addwf	_buzzerCount,f	;volatile
   585     00A6  1803               	skipnc
   586     00A7  0AA1               	incf	_buzzerCount+1,f	;volatile
   587     00A8  3000               	movlw	0
   588     00A9  07A1               	addwf	_buzzerCount+1,f	;volatile
   589     00AA                     i1l793:
   590                           
   591                           ;main.c: 71: 
   592     00AA  0821               	movf	_buzzerCount+1,w	;volatile
   593     00AB  3A80               	xorlw	128
   594     00AC  00DF               	movwf	btemp+1
   595     00AD  3080               	movlw	128
   596     00AE  025F               	subwf	btemp+1,w
   597     00AF  1D03               	skipz
   598     00B0  28B3               	goto	u33_25
   599     00B1  300F               	movlw	15
   600     00B2  0220               	subwf	_buzzerCount,w	;volatile
   601     00B3                     u33_25:
   602     00B3  1803               	skipnc
   603     00B4  28B6               	goto	u33_21
   604     00B5  28B7               	goto	u33_20
   605     00B6                     u33_21:
   606     00B6  28BA               	goto	i1l797
   607     00B7                     u33_20:
   608     00B7                     i1l795:
   609                           
   610                           ;main.c: 72:     }
   611     00B7  1283               	bcf	3,5	;RP0=0, select bank0
   612     00B8  1505               	bsf	5,2	;volatile
   613                           
   614                           ;main.c: 73: }
   615     00B9  28CE               	goto	i1l69
   616     00BA                     i1l797:
   617     00BA  1283               	bcf	3,5	;RP0=0, select bank0
   618     00BB  0821               	movf	_buzzerCount+1,w	;volatile
   619     00BC  3A80               	xorlw	128
   620     00BD  00DF               	movwf	btemp+1
   621     00BE  3080               	movlw	128
   622     00BF  025F               	subwf	btemp+1,w
   623     00C0  1D03               	skipz
   624     00C1  28C4               	goto	u34_25
   625     00C2  301E               	movlw	30
   626     00C3  0220               	subwf	_buzzerCount,w	;volatile
   627     00C4                     u34_25:
   628     00C4  1803               	skipnc
   629     00C5  28C7               	goto	u34_21
   630     00C6  28C8               	goto	u34_20
   631     00C7                     u34_21:
   632     00C7  28CB               	goto	i1l801
   633     00C8                     u34_20:
   634     00C8                     i1l799:
   635                           
   636                           ;main.c: 74: 
   637     00C8  1283               	bcf	3,5	;RP0=0, select bank0
   638     00C9  1105               	bcf	5,2	;volatile
   639                           
   640                           ;main.c: 75: 
   641     00CA  28CE               	goto	i1l69
   642     00CB                     i1l801:
   643                           
   644                           ;main.c: 76: void main(void) {
   645     00CB  1283               	bcf	3,5	;RP0=0, select bank0
   646     00CC  01A0               	clrf	_buzzerCount	;volatile
   647     00CD  01A1               	clrf	_buzzerCount+1	;volatile
   648     00CE                     i1l69:	
   649                           ;main.c: 80:     ADCON0=0b10000000;
   650                           
   651                           
   652                           ;main.c: 81:     ADON=1;
   653     00CE  110B               	bcf	11,2	;volatile
   654     00CF                     i1l803:
   655                           
   656                           ;main.c: 82:     WPU = 0X00;
   657     00CF  0181               	clrf	1	;volatile
   658     00D0                     i1l70:
   659     00D0  0835               	movf	??_isr+2,w
   660     00D1  0834               	movf	??_isr+1,w
   661     00D2  008A               	movwf	10
   662     00D3  0E33               	swapf	??_isr,w
   663     00D4  0083               	movwf	3
   664     00D5  0EDE               	swapf	btemp,f
   665     00D6  0E5E               	swapf	btemp,w
   666     00D7  0009               	retfie
   667     00D8                     __end_of_isr:
   668                           
   669                           	psect	intentry
   670     0004                     __pintentry:	
   671                           ;incstack = 0
   672                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   673                           
   674     0004                     interrupt_function:
   675     005E                     saved_w	set	btemp
   676     0004  00DE               	movwf	btemp
   677     0005  0E03               	swapf	3,w
   678     0006  1283               	bcf	3,5	;RP0=0, select bank0
   679     0007  00B3               	movwf	??_isr
   680     0008  080A               	movf	10,w
   681     0009  00B4               	movwf	??_isr+1
   682     000A  085F               	movf	btemp+1,w
   683     000B  00B5               	movwf	??_isr+2
   684     000C  2815               	ljmp	_isr
   685                           
   686                           	psect	text2
   687     011B                     __ptext2:	
   688 ;; *************** function _driveLED *****************
   689 ;; Defined at:
   690 ;;		line 85 in file "main.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  i               2    0[BANK0 ] int 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;		None
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMMON   BANK0
   704 ;;      Params:         0       2
   705 ;;      Locals:         0       0
   706 ;;      Temps:          0       0
   707 ;;      Totals:         0       2
   708 ;;Total ram usage:        2 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; This function calls:
   711 ;;		Nothing
   712 ;; This function is called by:
   713 ;;		_isr
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717     011B                     _driveLED:	
   718                           ;psect for function _driveLED
   719                           
   720     011B                     i1l723:	
   721                           ;incstack = 0
   722                           ; Regs used in _driveLED: [wreg+status,2+status,0]
   723                           
   724                           
   725                           ;main.c: 86:     INTCON = 0b11100000;
   726     011B  1283               	bcf	3,5	;RP0=0, select bank0
   727     011C  082D               	movf	driveLED@i,w
   728     011D  042E               	iorwf	driveLED@i+1,w
   729     011E  1D03               	btfss	3,2
   730     011F  2921               	goto	u18_21
   731     0120  2922               	goto	u18_20
   732     0121                     u18_21:
   733     0121  2924               	goto	i1l727
   734     0122                     u18_20:
   735     0122                     i1l725:
   736                           
   737                           ;main.c: 87: 
   738     0122  1285               	bcf	5,5	;volatile
   739                           
   740                           ;main.c: 88:     GP2= 0;
   741     0123  292B               	goto	i1l77
   742     0124                     i1l727:
   743     0124  032D               	decf	driveLED@i,w
   744     0125  042E               	iorwf	driveLED@i+1,w
   745     0126  1D03               	btfss	3,2
   746     0127  2929               	goto	u19_21
   747     0128  292A               	goto	u19_20
   748     0129                     u19_21:
   749     0129  292B               	goto	i1l77
   750     012A                     u19_20:
   751     012A                     i1l729:
   752                           
   753                           ;main.c: 89:     GP5= 0;
   754     012A  1685               	bsf	5,5	;volatile
   755     012B                     i1l77:	
   756                           ;main.c: 90: 
   757                           
   758     012B  0008               	return
   759     012C                     __end_of_driveLED:
   760                           
   761                           	psect	text3
   762     00D8                     __ptext3:	
   763 ;; *************** function ___wmul *****************
   764 ;; Defined at:
   765 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  multiplier      2    0[BANK0 ] unsigned int 
   768 ;;  multiplicand    2    2[BANK0 ] unsigned int 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  product         2    4[BANK0 ] unsigned int 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  2    0[BANK0 ] unsigned int 
   773 ;; Registers used:
   774 ;;		wreg, status,2, status,0
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0
   780 ;;      Params:         0       4
   781 ;;      Locals:         0       2
   782 ;;      Temps:          0       0
   783 ;;      Totals:         0       6
   784 ;;Total ram usage:        6 bytes
   785 ;; Hardware stack levels used: 1
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_isr
   790 ;; This function uses a non-reentrant model
   791 ;;
   792                           
   793     00D8                     ___wmul:	
   794                           ;psect for function ___wmul
   795                           
   796     00D8                     i1l731:	
   797                           ;incstack = 0
   798                           ; Regs used in ___wmul: [wreg+status,2+status,0]
   799                           
   800     00D8  1283               	bcf	3,5	;RP0=0, select bank0
   801     00D9  01B1               	clrf	___wmul@product
   802     00DA  01B2               	clrf	___wmul@product+1
   803     00DB                     i1l733:
   804     00DB  1C2D               	btfss	___wmul@multiplier,0
   805     00DC  28DE               	goto	u20_21
   806     00DD  28DF               	goto	u20_20
   807     00DE                     u20_21:
   808     00DE  28E5               	goto	i1l171
   809     00DF                     u20_20:
   810     00DF                     i1l735:
   811     00DF  082F               	movf	___wmul@multiplicand,w
   812     00E0  07B1               	addwf	___wmul@product,f
   813     00E1  1803               	skipnc
   814     00E2  0AB2               	incf	___wmul@product+1,f
   815     00E3  0830               	movf	___wmul@multiplicand+1,w
   816     00E4  07B2               	addwf	___wmul@product+1,f
   817     00E5                     i1l171:
   818     00E5  3001               	movlw	1
   819     00E6                     u21_25:
   820     00E6  1003               	clrc
   821     00E7  0DAF               	rlf	___wmul@multiplicand,f
   822     00E8  0DB0               	rlf	___wmul@multiplicand+1,f
   823     00E9  3EFF               	addlw	-1
   824     00EA  1D03               	skipz
   825     00EB  28E6               	goto	u21_25
   826     00EC                     i1l737:
   827     00EC  3001               	movlw	1
   828     00ED                     u22_25:
   829     00ED  1003               	clrc
   830     00EE  0CAE               	rrf	___wmul@multiplier+1,f
   831     00EF  0CAD               	rrf	___wmul@multiplier,f
   832     00F0  3EFF               	addlw	-1
   833     00F1  1D03               	skipz
   834     00F2  28ED               	goto	u22_25
   835     00F3                     i1l739:
   836     00F3  082D               	movf	___wmul@multiplier,w
   837     00F4  042E               	iorwf	___wmul@multiplier+1,w
   838     00F5  1D03               	btfss	3,2
   839     00F6  28F8               	goto	u23_21
   840     00F7  28F9               	goto	u23_20
   841     00F8                     u23_21:
   842     00F8  28DB               	goto	i1l733
   843     00F9                     u23_20:
   844     00F9                     i1l741:
   845     00F9  0832               	movf	___wmul@product+1,w
   846     00FA  00AE               	movwf	?___wmul+1
   847     00FB  0831               	movf	___wmul@product,w
   848     00FC  00AD               	movwf	?___wmul
   849     00FD                     i1l173:
   850     00FD  0008               	return
   851     00FE                     __end_of___wmul:
   852     005E                     btemp	set	94	;btemp
   853     005E                     wtemp0	set	94
   854                           
   855                           	psect	config
   856                           
   857                           ;Config register CONFIG @ 0x2007
   858                           ;	Oscillator Selection bits
   859                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   860                           ;	Watchdog Timer Enable bit
   861                           ;	WDTE = OFF, WDT disabled
   862                           ;	Power-Up Timer Enable bit
   863                           ;	PWRTE = ON, PWRT enabled
   864                           ;	GP3/MCLR pin function select
   865                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   866                           ;	Brown-out Detect Enable bit
   867                           ;	BOREN = OFF, BOD disabled
   868                           ;	Code Protection bit
   869                           ;	CP = OFF, Program Memory code protection is disabled
   870                           ;	Data Code Protection bit
   871                           ;	CPD = OFF, Data memory code protection is disabled
   872     2007                     	org	8199
   873     2007  3184               	dw	12676

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      9      22

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->___wmul

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  3     3      0     516
                                              6 BANK0      3     3      0
                             ___wmul
                           _driveLED
 ---------------------------------------------------------------------------------
 (2) _driveLED                                             2     0      2     272
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   ___wmul
   _driveLED

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      9      16       4       35.5%
ABS                  0      0      16       5        0.0%
DATA                 0      0      16       6        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Feb 04 21:46:25 2025

                     l82 0119                       l83 0119                       fsr 0004  
    ___wmul@multiplicand 002F                      l811 010D                      l813 0116  
                    l805 00FE                      l815 0118                      l807 010A  
                    l809 010B                      _GP2 002A                      _GP5 002D  
                    _WPU 0095                      _isr 0015                      indf 0000  
                   ?_isr 002D                     _ADON 00F8                     i1l70 00D0  
                   i1l55 002B                     i1l77 012B                     i1l69 00CE  
                   _TMR0 0001                     _main 00FE                     btemp 005E  
                   start 000D                    ??_isr 0033                    ?_main 002D  
                  _CMCON 0019                    _ANSEL 009F                    i1l171 00E5  
                  i1l173 00FD                    i1l801 00CB                    i1l731 00D8  
                  i1l723 011B                    i1l803 00CF                    i1l741 00F9  
                  i1l733 00DB                    i1l725 0122                    i1l735 00DF  
                  i1l727 0124                    i1l751 0025                    i1l737 00EC  
                  i1l729 012A                    i1l761 0050                    i1l753 002A  
                  i1l745 0015                    i1l739 00F3                    i1l771 007D  
                  i1l763 0056                    i1l755 002F                    i1l747 0019  
                  i1l781 0091                    i1l773 0080                    i1l765 005C  
                  i1l757 0035                    i1l749 001F                    i1l791 00A4  
                  i1l783 0095                    i1l775 0084                    i1l767 006A  
                  i1l759 0043                    i1l793 00AA                    i1l785 0098  
                  i1l769 0078                    i1l777 0086                    i1l795 00B7  
                  i1l787 009A                    i1l779 0088                    i1l797 00BA  
                  i1l789 009E                    i1l799 00C8                    u20_20 00DF  
                  u20_21 00DE                    u21_25 00E6                    u30_20 0084  
                  u30_21 0083                    u22_25 00ED                    u23_20 00F9  
                  u31_20 0091                    u23_21 00F8                    u31_21 0090  
                  u32_20 00A4                    u24_20 001F                    u32_21 00A3  
                  u24_21 001E                    u33_20 00B7                    u25_20 002A  
                  u33_21 00B6                    u25_21 0029                    u33_25 00B3  
                  u18_20 0122                    u34_20 00C8                    u26_20 002F  
                  u18_21 0121                    u34_21 00C7                    u26_21 002E  
                  u34_25 00C4                    u19_20 012A                    u27_20 0050  
                  u19_21 0129                    u27_21 004F                    u27_25 004C  
                  u28_20 006A                    u28_21 0069                    u28_25 0066  
                  u29_20 0078                    u29_21 0077                    u29_25 0074  
                  pclath 000A                    status 0003                    wtemp0 005E  
         _activateBuzzer 0022          __initialization 000E             __end_of_main 011B  
                 ??_main 0000                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E                   _INTCON 000B                   _OSCCAL 0090  
                 _TMR0IF 005A                   _TRISIO 0085         __end_of_driveLED 012C  
                 ___wmul 00D8                   saved_w 005E  __end_of__initialization 0013  
         __pcstackCOMMON 0000               __pbssBANK0 0020               __pmaintext 00FE  
                ?___wmul 002D               __pintentry 0004                ?_driveLED 002D  
                __ptext1 0015                  __ptext2 011B                  __ptext3 00D8  
                _counter 002C                  _reading 0028                  clrloop0 012D  
   end_of_initialization 0013               ??_driveLED 0000               _voltageX10 0026  
         __end_of___wmul 00FE      start_initialization 000E              __end_of_isr 00D8  
               ??___wmul 0000                ___latbits 0000            __pcstackBANK0 002D  
      interrupt_function 0004           ___wmul@product 0031                clear_ram0 012C  
               _GO_nDONE 00F9        ___wmul@multiplier 002D            _enableCounter 0024  
              driveLED@i 002D                 _driveLED 011B              _buzzerCount 0020  
               intlevel1 0000               _OPTION_REG 0081             _timerminutes 002A  
