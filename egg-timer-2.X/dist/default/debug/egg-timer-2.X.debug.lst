

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 22 09:53:49 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     9                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,space=0,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x0,0
    14     0000                     
    15                           ; Generated 17/08/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC12F675 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     GPIO            equ	5	;# 
    63     000A                     PCLATH          equ	10	;# 
    64     000B                     INTCON          equ	11	;# 
    65     000C                     PIR1            equ	12	;# 
    66     000E                     TMR1            equ	14	;# 
    67     000E                     TMR1L           equ	14	;# 
    68     000F                     TMR1H           equ	15	;# 
    69     0010                     T1CON           equ	16	;# 
    70     0019                     CMCON           equ	25	;# 
    71     001E                     ADRESH          equ	30	;# 
    72     001F                     ADCON0          equ	31	;# 
    73     0081                     OPTION_REG      equ	129	;# 
    74     0085                     TRISIO          equ	133	;# 
    75     008C                     PIE1            equ	140	;# 
    76     008E                     PCON            equ	142	;# 
    77     0090                     OSCCAL          equ	144	;# 
    78     0095                     WPU             equ	149	;# 
    79     0096                     IOC             equ	150	;# 
    80     0096                     IOCB            equ	150	;# 
    81     0099                     VRCON           equ	153	;# 
    82     009A                     EEDATA          equ	154	;# 
    83     009A                     EEDAT           equ	154	;# 
    84     009B                     EEADR           equ	155	;# 
    85     009C                     EECON1          equ	156	;# 
    86     009D                     EECON2          equ	157	;# 
    87     009E                     ADRESL          equ	158	;# 
    88     009F                     ANSEL           equ	159	;# 
    89     0000                     INDF            equ	0	;# 
    90     0001                     TMR0            equ	1	;# 
    91     0002                     PCL             equ	2	;# 
    92     0003                     STATUS          equ	3	;# 
    93     0004                     FSR             equ	4	;# 
    94     0005                     GPIO            equ	5	;# 
    95     000A                     PCLATH          equ	10	;# 
    96     000B                     INTCON          equ	11	;# 
    97     000C                     PIR1            equ	12	;# 
    98     000E                     TMR1            equ	14	;# 
    99     000E                     TMR1L           equ	14	;# 
   100     000F                     TMR1H           equ	15	;# 
   101     0010                     T1CON           equ	16	;# 
   102     0019                     CMCON           equ	25	;# 
   103     001E                     ADRESH          equ	30	;# 
   104     001F                     ADCON0          equ	31	;# 
   105     0081                     OPTION_REG      equ	129	;# 
   106     0085                     TRISIO          equ	133	;# 
   107     008C                     PIE1            equ	140	;# 
   108     008E                     PCON            equ	142	;# 
   109     0090                     OSCCAL          equ	144	;# 
   110     0095                     WPU             equ	149	;# 
   111     0096                     IOC             equ	150	;# 
   112     0096                     IOCB            equ	150	;# 
   113     0099                     VRCON           equ	153	;# 
   114     009A                     EEDATA          equ	154	;# 
   115     009A                     EEDAT           equ	154	;# 
   116     009B                     EEADR           equ	155	;# 
   117     009C                     EECON1          equ	156	;# 
   118     009D                     EECON2          equ	157	;# 
   119     009E                     ADRESL          equ	158	;# 
   120     009F                     ANSEL           equ	159	;# 
   121     000B                     _INTCON         set	11
   122     0019                     _CMCON          set	25
   123     0001                     _TMR0           set	1
   124     001E                     _ADRESH         set	30
   125     001F                     _ADCON0         set	31
   126     0063                     _CMIF           set	99
   127     002D                     _GP5            set	45
   128     005A                     _T0IF           set	90
   129     0085                     _TRISIO         set	133
   130     0081                     _OPTION_REG     set	129
   131     0090                     _OSCCAL         set	144
   132     0095                     _WPU            set	149
   133     009F                     _ANSEL          set	159
   134     009E                     _ADRESL         set	158
   135     0463                     _CMIE           set	1123
   136                           
   137                           	psect	cinit
   138     000C                     start_initialization:	
   139                           ; #config settings
   140                           
   141     000C                     __initialization:
   142                           
   143                           ; Clear objects allocated to BANK0
   144     000C  1383               	bcf	3,7	;select IRP bank0
   145     000D  3020               	movlw	low __pbssBANK0
   146     000E  0084               	movwf	4
   147     000F  302E               	movlw	low (__pbssBANK0+14)
   148     0010  20A6               	fcall	clear_ram0
   149     0011                     end_of_initialization:	
   150                           ;End of C runtime variable initialization code
   151                           
   152     0011                     __end_of__initialization:
   153     0011  0183               	clrf	3
   154     0012  2813               	ljmp	_main	;jump to C main() function
   155                           
   156                           	psect	bssBANK0
   157     0020                     __pbssBANK0:
   158     0020                     _tempo_led:
   159     0020                     	ds	4
   160     0024                     _adc_value:
   161     0024                     	ds	2
   162     0026                     _stop:
   163     0026                     	ds	2
   164     0028                     _start:
   165     0028                     	ds	2
   166     002A                     _fortyms:
   167     002A                     	ds	2
   168     002C                     _buttonpressed:
   169     002C                     	ds	2
   170                           
   171                           	psect	clrtext
   172     00A6                     clear_ram0:	
   173                           ;	Called with FSR containing the base address, and
   174                           ;	W with the last address+1
   175                           
   176     00A6  0064               	clrwdt	;clear the watchdog before getting into this loop
   177     00A7                     clrloop0:
   178     00A7  0180               	clrf	0	;clear RAM location pointed to by FSR
   179     00A8  0A84               	incf	4,f	;increment pointer
   180     00A9  0604               	xorwf	4,w	;XOR with final address
   181     00AA  1903               	btfsc	3,2	;have we reached the end yet?
   182     00AB  3400               	retlw	0	;all done for this memory range, return
   183     00AC  0604               	xorwf	4,w	;XOR again to restore value
   184     00AD  28A7               	goto	clrloop0	;do the next byte
   185                           
   186                           	psect	cstackBANK0
   187     002E                     __pcstackBANK0:
   188     002E                     ?_ISR:
   189     002E                     ?_main:	
   190                           ; 1 bytes @ 0x0
   191                           
   192     002E                     ??_ISR:	
   193                           ; 1 bytes @ 0x0
   194                           
   195                           
   196                           ; 1 bytes @ 0x0
   197     002E                     	ds	2
   198     0030                     ?_Read_Adc:
   199                           
   200                           ; 2 bytes @ 0x2
   201     0030                     	ds	2
   202     0032                     ??_Read_Adc:
   203     0032                     ??_main:	
   204                           ; 1 bytes @ 0x4
   205                           
   206                           
   207                           	psect	maintext
   208     0013                     __pmaintext:	
   209                           ; 1 bytes @ 0x4
   210 ;;
   211 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   212 ;;
   213 ;; *************** function _main *****************
   214 ;; Defined at:
   215 ;;		line 61 in file "main.c"
   216 ;; Parameters:    Size  Location     Type
   217 ;;		None
   218 ;; Auto vars:     Size  Location     Type
   219 ;;		None
   220 ;; Return value:  Size  Location     Type
   221 ;;                  1    wreg      void 
   222 ;; Registers used:
   223 ;;		wreg, status,2, btemp+0, pclath, cstack
   224 ;; Tracked objects:
   225 ;;		On entry : B00/0
   226 ;;		On exit  : 0/0
   227 ;;		Unchanged: 0/0
   228 ;; Data sizes:      BANK0
   229 ;;      Params:         0
   230 ;;      Locals:         0
   231 ;;      Temps:          0
   232 ;;      Totals:         0
   233 ;;Total ram usage:        0 bytes
   234 ;; Hardware stack levels required when called: 2
   235 ;; This function calls:
   236 ;;		_Read_Adc
   237 ;; This function is called by:
   238 ;;		Startup code after reset
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242     0013                     _main:	
   243                           ;psect for function _main
   244                           
   245     0013                     l668:	
   246                           ;incstack = 0
   247                           ; Regs used in _main: [wreg+status,2+btemp+0+pclath+cstack]
   248                           
   249                           
   250                           ;main.c: 62:                start=1;
   251     0013  3002               	movlw	2
   252     0014  1283               	bcf	3,5	;RP0=0, select bank0
   253     0015  0099               	movwf	25	;volatile
   254                           
   255                           ;main.c: 63:            }
   256     0016  3011               	movlw	17
   257     0017  1683               	bsf	3,5	;RP0=1, select bank1
   258     0018  009F               	movwf	31	;volatile
   259     0019                     l670:
   260                           
   261                           ;main.c: 64:        }
   262     0019  0195               	clrf	21	;volatile
   263                           
   264                           ;main.c: 65:     }
   265     001A  1283               	bcf	3,5	;RP0=0, select bank0
   266     001B  0181               	clrf	1	;volatile
   267     001C                     l672:
   268                           
   269                           ;main.c: 66: 
   270     001C  30FF               	movlw	255
   271     001D  1683               	bsf	3,5	;RP0=1, select bank1
   272     001E  0090               	movwf	16	;volatile
   273     001F                     l674:
   274                           
   275                           ;main.c: 67: }
   276     001F  3081               	movlw	129
   277     0020  0081               	movwf	1	;volatile
   278     0021                     l676:
   279     0021  30E0               	movlw	224
   280     0022  008B               	movwf	11	;volatile
   281     0023                     l678:
   282     0023  158C               	bsf	12,3	;volatile
   283     0024                     l680:
   284     0024  3003               	movlw	3
   285     0025  0085               	movwf	5	;volatile
   286     0026                     l682:
   287     0026  1283               	bcf	3,5	;RP0=0, select bank0
   288     0027  082B               	movf	_fortyms+1,w
   289     0028  3A80               	xorlw	128
   290     0029  0080               	movwf	btemp
   291     002A  3080               	movlw	128
   292     002B  0200               	subwf	btemp,w
   293     002C  1D03               	skipz
   294     002D  2830               	goto	u105
   295     002E  3029               	movlw	41
   296     002F  022A               	subwf	_fortyms,w
   297     0030                     u105:
   298     0030  1C03               	skipc
   299     0031  2833               	goto	u101
   300     0032  2834               	goto	u100
   301     0033                     u101:
   302     0033  2826               	goto	l682
   303     0034                     u100:
   304     0034                     l684:
   305     0034  1283               	bcf	3,5	;RP0=0, select bank0
   306     0035  01AA               	clrf	_fortyms
   307     0036  01AB               	clrf	_fortyms+1
   308     0037                     l686:
   309     0037  2099               	fcall	_Read_Adc
   310     0038  1283               	bcf	3,5	;RP0=0, select bank0
   311     0039  0831               	movf	?_Read_Adc+1,w
   312     003A  00A5               	movwf	_adc_value+1
   313     003B  0830               	movf	?_Read_Adc,w
   314     003C  00A4               	movwf	_adc_value
   315     003D                     l688:
   316     003D  0825               	movf	_adc_value+1,w
   317     003E  3A80               	xorlw	128
   318     003F  0080               	movwf	btemp
   319     0040  3081               	movlw	129
   320     0041  0200               	subwf	btemp,w
   321     0042  1D03               	skipz
   322     0043  2846               	goto	u115
   323     0044  305F               	movlw	95
   324     0045  0224               	subwf	_adc_value,w
   325     0046                     u115:
   326     0046  1C03               	skipc
   327     0047  2849               	goto	u111
   328     0048  284A               	goto	u110
   329     0049                     u111:
   330     0049  2860               	goto	l696
   331     004A                     u110:
   332     004A                     l690:
   333     004A  1283               	bcf	3,5	;RP0=0, select bank0
   334     004B  0825               	movf	_adc_value+1,w
   335     004C  3A80               	xorlw	128
   336     004D  0080               	movwf	btemp
   337     004E  3081               	movlw	129
   338     004F  0200               	subwf	btemp,w
   339     0050  1D03               	skipz
   340     0051  2854               	goto	u125
   341     0052  30C2               	movlw	194
   342     0053  0224               	subwf	_adc_value,w
   343     0054                     u125:
   344     0054  1803               	skipnc
   345     0055  2857               	goto	u121
   346     0056  2858               	goto	u120
   347     0057                     u121:
   348     0057  2860               	goto	l696
   349     0058                     u120:
   350     0058                     l692:
   351     0058  1283               	bcf	3,5	;RP0=0, select bank0
   352     0059  01A8               	clrf	_start
   353     005A  01A9               	clrf	_start+1
   354     005B                     l694:
   355     005B  3001               	movlw	1
   356     005C  00A6               	movwf	_stop
   357     005D  3000               	movlw	0
   358     005E  00A7               	movwf	_stop+1
   359     005F  2826               	goto	l682
   360     0060                     l696:
   361     0060  1283               	bcf	3,5	;RP0=0, select bank0
   362     0061  0825               	movf	_adc_value+1,w
   363     0062  3A80               	xorlw	128
   364     0063  0080               	movwf	btemp
   365     0064  3081               	movlw	129
   366     0065  0200               	subwf	btemp,w
   367     0066  1D03               	skipz
   368     0067  286A               	goto	u135
   369     0068  30C4               	movlw	196
   370     0069  0224               	subwf	_adc_value,w
   371     006A                     u135:
   372     006A  1C03               	skipc
   373     006B  286D               	goto	u131
   374     006C  286E               	goto	u130
   375     006D                     u131:
   376     006D  2826               	goto	l682
   377     006E                     u130:
   378     006E                     l698:
   379     006E  1283               	bcf	3,5	;RP0=0, select bank0
   380     006F  01A6               	clrf	_stop
   381     0070  01A7               	clrf	_stop+1
   382     0071                     l700:
   383     0071  3001               	movlw	1
   384     0072  00A8               	movwf	_start
   385     0073  3000               	movlw	0
   386     0074  00A9               	movwf	_start+1
   387     0075  2826               	goto	l682
   388     0076  280B               	ljmp	start
   389     0077                     __end_of_main:
   390                           
   391                           	psect	text1
   392     0099                     __ptext1:	
   393 ;; *************** function _Read_Adc *****************
   394 ;; Defined at:
   395 ;;		line 30 in file "main.c"
   396 ;; Parameters:    Size  Location     Type
   397 ;;		None
   398 ;; Auto vars:     Size  Location     Type
   399 ;;		None
   400 ;; Return value:  Size  Location     Type
   401 ;;                  2    2[BANK0 ] unsigned int 
   402 ;; Registers used:
   403 ;;		wreg
   404 ;; Tracked objects:
   405 ;;		On entry : 0/0
   406 ;;		On exit  : 0/0
   407 ;;		Unchanged: 0/0
   408 ;; Data sizes:      BANK0
   409 ;;      Params:         2
   410 ;;      Locals:         0
   411 ;;      Temps:          0
   412 ;;      Totals:         2
   413 ;;Total ram usage:        2 bytes
   414 ;; Hardware stack levels used: 1
   415 ;; Hardware stack levels required when called: 1
   416 ;; This function calls:
   417 ;;		Nothing
   418 ;; This function is called by:
   419 ;;		_main
   420 ;; This function uses a non-reentrant model
   421 ;;
   422                           
   423     0099                     _Read_Adc:	
   424                           ;psect for function _Read_Adc
   425                           
   426     0099                     l662:	
   427                           ;incstack = 0
   428                           ; Regs used in _Read_Adc: [wreg]
   429                           
   430                           
   431                           ;main.c: 31: 
   432     0099  1283               	bcf	3,5	;RP0=0, select bank0
   433     009A  149F               	bsf	31,1	;volatile
   434     009B                     l45:	
   435                           ;main.c: 32:          CMIF =0;
   436                           
   437     009B  189F               	btfsc	31,1	;volatile
   438     009C  289E               	goto	u91
   439     009D  289F               	goto	u90
   440     009E                     u91:
   441     009E  289B               	goto	l45
   442     009F                     u90:
   443     009F                     l664:
   444                           
   445                           ;main.c: 34:  }
   446     009F  081E               	movf	30,w	;volatile
   447     00A0  00B1               	movwf	?_Read_Adc+1
   448     00A1  1683               	bsf	3,5	;RP0=1, select bank1
   449     00A2  081E               	movf	30,w	;volatile
   450     00A3  1283               	bcf	3,5	;RP0=0, select bank0
   451     00A4  00B0               	movwf	?_Read_Adc
   452     00A5                     l48:
   453     00A5  0008               	return
   454     00A6                     __end_of_Read_Adc:
   455                           
   456                           	psect	text2
   457     0077                     __ptext2:	
   458 ;; *************** function _ISR *****************
   459 ;; Defined at:
   460 ;;		line 37 in file "main.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;		None
   463 ;; Auto vars:     Size  Location     Type
   464 ;;		None
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:      BANK0
   474 ;;      Params:         0
   475 ;;      Locals:         0
   476 ;;      Temps:          2
   477 ;;      Totals:         2
   478 ;;Total ram usage:        2 bytes
   479 ;; Hardware stack levels used: 1
   480 ;; This function calls:
   481 ;;		Nothing
   482 ;; This function is called by:
   483 ;;		Interrupt level 1
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487     0077                     _ISR:	
   488                           ;psect for function _ISR
   489                           
   490     0077                     i1l618:
   491                           
   492                           ;main.c: 39: void main(void) {
   493     0077  1D0B               	btfss	11,2	;volatile
   494     0078  287A               	goto	u2_21
   495     0079  287B               	goto	u2_20
   496     007A                     u2_21:
   497     007A  288D               	goto	i1l53
   498     007B                     u2_20:
   499     007B                     i1l620:
   500                           
   501                           ;main.c: 40:     CMCON = 2;;main.c: 42:     WPU = 0X00;
   502     007B  3001               	movlw	1
   503     007C  07AA               	addwf	_fortyms,f
   504     007D  1803               	skipnc
   505     007E  0AAB               	incf	_fortyms+1,f
   506     007F  3000               	movlw	0
   507     0080  07AB               	addwf	_fortyms+1,f
   508     0081                     i1l622:
   509                           
   510                           ;main.c: 43:     TMR0 = 0;
   511     0081  0328               	decf	_start,w
   512     0082  0429               	iorwf	_start+1,w
   513     0083  1D03               	btfss	3,2
   514     0084  2886               	goto	u3_21
   515     0085  2887               	goto	u3_20
   516     0086                     u3_21:
   517     0086  2889               	goto	i1l54
   518     0087                     u3_20:
   519     0087                     i1l624:
   520                           
   521                           ;main.c: 44:     OSCCAL = 0XFF;
   522     0087  1685               	bsf	5,5	;volatile
   523                           
   524                           ;main.c: 45:     OPTION_REG = 0X81;
   525     0088  288A               	goto	i1l55
   526     0089                     i1l54:
   527                           
   528                           ;main.c: 46:     INTCON = 0XE0;
   529     0089  1285               	bcf	5,5	;volatile
   530     008A                     i1l55:	
   531                           ;main.c: 47:     CMIE = 1;
   532                           
   533                           
   534                           ;main.c: 48:     TRISIO = 0X03;
   535     008A  110B               	bcf	11,2	;volatile
   536                           
   537                           ;main.c: 49: 
   538     008B  30E7               	movlw	231
   539     008C  0081               	movwf	1	;volatile
   540     008D                     i1l53:	
   541                           ;main.c: 50:     for(;;)
   542                           
   543                           
   544                           ;main.c: 51:     {
   545     008D  1D8C               	btfss	12,3	;volatile
   546     008E  2890               	goto	u4_21
   547     008F  2891               	goto	u4_20
   548     0090                     u4_21:
   549     0090  2892               	goto	i1l57
   550     0091                     u4_20:
   551     0091                     i1l626:
   552                           
   553                           ;main.c: 52:        if(fortyms > 40){;main.c: 54:            adc_value = Read_Adc();
   554     0091  118C               	bcf	12,3	;volatile
   555     0092                     i1l57:
   556     0092  082F               	movf	??_ISR+1,w
   557     0093  008A               	movwf	10
   558     0094  0E2E               	swapf	??_ISR,w
   559     0095  0083               	movwf	3
   560     0096  0E80               	swapf	btemp,f
   561     0097  0E00               	swapf	btemp,w
   562     0098  0009               	retfie
   563     0099                     __end_of_ISR:
   564     0000                     ___latbits      equ	0
   565     0000                     btemp           set	0	;btemp
   566                           
   567                           	psect	intentry
   568     0004                     __pintentry:	
   569                           ;incstack = 0
   570                           ; Regs used in _ISR: [wreg+status,2+status,0]
   571                           
   572     0004                     interrupt_function:
   573     0000                     saved_w         set	btemp
   574     0004  0080               	movwf	btemp
   575     0005  0E03               	swapf	3,w
   576     0006  1283               	bcf	3,5	;RP0=0, select bank0
   577     0007  00AE               	movwf	??_ISR
   578     0008  080A               	movf	10,w
   579     0009  00AF               	movwf	??_ISR+1
   580     000A  2877               	ljmp	_ISR
   581                           
   582                           	psect	config
   583                           
   584                           ;Config register CONFIG @ 0x2007
   585                           ;	Oscillator Selection bits
   586                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   587                           ;	Watchdog Timer Enable bit
   588                           ;	WDTE = OFF, WDT disabled
   589                           ;	Power-Up Timer Enable bit
   590                           ;	PWRTE = OFF, PWRT disabled
   591                           ;	GP3/MCLR pin function select
   592                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   593                           ;	Brown-out Detect Enable bit
   594                           ;	BOREN = OFF, BOD disabled
   595                           ;	Code Protection bit
   596                           ;	CP = OFF, Program Memory code protection is disabled
   597                           ;	Data Code Protection bit
   598                           ;	CPD = OFF, Data memory code protection is disabled
   599     2007                     	org	8199
   600     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    BANK0            52      4      18

Pointer List with Targets:

    None.

Critical Paths under _main in BANK0

    _main->_Read_Adc

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITBANK0            52      0       0      0.0%
BANK0               52      4      18     34.6%
STACK                0      0       0      0.0%
DATA                 0      0      18      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 22 09:53:49 2024

                     l45 009B                       l48 00A5                       u90 009F  
                     u91 009E                       fsr 0004                      l700 0071  
                    l662 0099                      l670 0019                      l664 009F  
                    l680 0024                      l672 001C                      l690 004A  
                    l682 0026                      l674 001F                      l692 0058  
                    l684 0034                      l676 0021                      l668 0013  
                    l694 005B                      l686 0037                      l678 0023  
                    l696 0060                      l688 003D                      l698 006E  
                    _GP5 002D                      u100 0034                      u101 0033  
                    u110 004A                      u111 0049                      u120 0058  
                    u121 0057                      u105 0030                      u130 006E  
                    u131 006D                      u115 0046                      u125 0054  
                    u135 006A                      _ISR 0077                      _WPU 0095  
                    indf 0000                     ?_ISR 002E                     _CMIE 0463  
                   _CMIF 0063                     _T0IF 005A                     i1l53 008D  
                   i1l54 0089                     i1l55 008A                     i1l57 0092  
                   _TMR0 0001                     u2_20 007B                     u2_21 007A  
                   u3_20 0087                     u3_21 0086                     u4_20 0091  
                   u4_21 0090                     _main 0013                     btemp 0000  
                   _stop 0026                     start 000B                    ??_ISR 002E  
                  ?_main 002E                    _CMCON 0019                    _ANSEL 009F  
                  i1l620 007B                    i1l622 0081                    i1l624 0087  
                  i1l626 0091                    i1l618 0077                    _start 0028  
                  pclath 000A                    status 0003          __initialization 000C  
           __end_of_main 0077         __end_of_Read_Adc 00A6                   ??_main 0032  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
                 _INTCON 000B                   _OSCCAL 0090                   _TRISIO 0085  
                 saved_w 0000  __end_of__initialization 0011               __pbssBANK0 0020  
              ?_Read_Adc 0030               __pmaintext 0013               __pintentry 0004  
          _buttonpressed 002C               ??_Read_Adc 0032                  __ptext1 0099  
                __ptext2 0077                  _fortyms 002A                  clrloop0 00A7  
   end_of_initialization 0011      start_initialization 000C              __end_of_ISR 0099  
              ___latbits 0000            __pcstackBANK0 002E                _adc_value 0024  
      interrupt_function 0004                clear_ram0 00A6                _tempo_led 0020  
               _Read_Adc 0099                 intlevel1 0000               _OPTION_REG 0081  
