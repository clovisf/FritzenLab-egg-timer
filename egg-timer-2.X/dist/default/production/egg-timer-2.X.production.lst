

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Aug 09 16:16:58 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,space=0,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x5E,2
    18     0000                     
    19                           ; Generated 17/08/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC12F675 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0004                     fsr             equ	4
    54     0004                     fsr0            equ	4
    55     0000                     indf            equ	0
    56     0000                     indf0           equ	0
    57     0002                     pc              equ	2
    58     0002                     pcl             equ	2
    59     000A                     pclath          equ	10
    60     0003                     status          equ	3
    61     0000                     INDF            equ	0	;# 
    62     0001                     TMR0            equ	1	;# 
    63     0002                     PCL             equ	2	;# 
    64     0003                     STATUS          equ	3	;# 
    65     0004                     FSR             equ	4	;# 
    66     0005                     GPIO            equ	5	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000E                     TMR1            equ	14	;# 
    71     000E                     TMR1L           equ	14	;# 
    72     000F                     TMR1H           equ	15	;# 
    73     0010                     T1CON           equ	16	;# 
    74     0019                     CMCON           equ	25	;# 
    75     001E                     ADRESH          equ	30	;# 
    76     001F                     ADCON0          equ	31	;# 
    77     0081                     OPTION_REG      equ	129	;# 
    78     0085                     TRISIO          equ	133	;# 
    79     008C                     PIE1            equ	140	;# 
    80     008E                     PCON            equ	142	;# 
    81     0090                     OSCCAL          equ	144	;# 
    82     0095                     WPU             equ	149	;# 
    83     0096                     IOC             equ	150	;# 
    84     0096                     IOCB            equ	150	;# 
    85     0099                     VRCON           equ	153	;# 
    86     009A                     EEDATA          equ	154	;# 
    87     009A                     EEDAT           equ	154	;# 
    88     009B                     EEADR           equ	155	;# 
    89     009C                     EECON1          equ	156	;# 
    90     009D                     EECON2          equ	157	;# 
    91     009E                     ADRESL          equ	158	;# 
    92     009F                     ANSEL           equ	159	;# 
    93     0000                     INDF            equ	0	;# 
    94     0001                     TMR0            equ	1	;# 
    95     0002                     PCL             equ	2	;# 
    96     0003                     STATUS          equ	3	;# 
    97     0004                     FSR             equ	4	;# 
    98     0005                     GPIO            equ	5	;# 
    99     000A                     PCLATH          equ	10	;# 
   100     000B                     INTCON          equ	11	;# 
   101     000C                     PIR1            equ	12	;# 
   102     000E                     TMR1            equ	14	;# 
   103     000E                     TMR1L           equ	14	;# 
   104     000F                     TMR1H           equ	15	;# 
   105     0010                     T1CON           equ	16	;# 
   106     0019                     CMCON           equ	25	;# 
   107     001E                     ADRESH          equ	30	;# 
   108     001F                     ADCON0          equ	31	;# 
   109     0081                     OPTION_REG      equ	129	;# 
   110     0085                     TRISIO          equ	133	;# 
   111     008C                     PIE1            equ	140	;# 
   112     008E                     PCON            equ	142	;# 
   113     0090                     OSCCAL          equ	144	;# 
   114     0095                     WPU             equ	149	;# 
   115     0096                     IOC             equ	150	;# 
   116     0096                     IOCB            equ	150	;# 
   117     0099                     VRCON           equ	153	;# 
   118     009A                     EEDATA          equ	154	;# 
   119     009A                     EEDAT           equ	154	;# 
   120     009B                     EEADR           equ	155	;# 
   121     009C                     EECON1          equ	156	;# 
   122     009D                     EECON2          equ	157	;# 
   123     009E                     ADRESL          equ	158	;# 
   124     009F                     ANSEL           equ	159	;# 
   125                           
   126                           	psect	idataBANK0
   127     034B                     __pidataBANK0:
   128                           
   129                           ;initializer for _finalquantity
   130     034B  34D0               	retlw	208
   131     034C  3407               	retlw	7
   132     000B                     _INTCON         set	11
   133     001F                     _ADCON0         set	31
   134     0019                     _CMCON          set	25
   135     0001                     _TMR0           set	1
   136     001E                     _ADRESH         set	30
   137     001F                     _ADCON0bits     set	31
   138     002A                     _GP2            set	42
   139     002D                     _GP5            set	45
   140     005A                     _T0IF           set	90
   141     0085                     _TRISIO         set	133
   142     0081                     _OPTION_REG     set	129
   143     0090                     _OSCCAL         set	144
   144     0095                     _WPU            set	149
   145     009F                     _ANSEL          set	159
   146     009E                     _ADRESL         set	158
   147                           
   148                           	psect	cinit
   149     000E                     start_initialization:	
   150                           ; #config settings
   151                           
   152     000E                     __initialization:
   153                           
   154                           ; Initialize objects allocated to BANK0
   155     000E  234B               	fcall	__pidataBANK0	;fetch initializer
   156     000F  00DC               	movwf	__pdataBANK0& (0+127)
   157     0010  234C               	fcall	__pidataBANK0+1	;fetch initializer
   158     0011  00DD               	movwf	(__pdataBANK0+1)& (0+127)
   159                           
   160                           ; Clear objects allocated to BANK0
   161     0012  1383               	bcf	3,7	;select IRP bank0
   162     0013  3020               	movlw	low __pbssBANK0
   163     0014  0084               	movwf	4
   164     0015  304E               	movlw	low (__pbssBANK0+46)
   165     0016  2343               	fcall	clear_ram0
   166     0017                     end_of_initialization:	
   167                           ;End of C runtime variable initialization code
   168                           
   169     0017                     __end_of__initialization:
   170     0017  0183               	clrf	3
   171     0018  2819               	ljmp	_main	;jump to C main() function
   172                           
   173                           	psect	bssBANK0
   174     0020                     __pbssBANK0:
   175     0020                     _d3:
   176     0020                     	ds	2
   177     0022                     _d2:
   178     0022                     	ds	2
   179     0024                     _d1:
   180     0024                     	ds	2
   181     0026                     _currentadc:
   182     0026                     	ds	2
   183     0028                     _secondadc:
   184     0028                     	ds	2
   185     002A                     _thirdadc:
   186     002A                     	ds	2
   187     002C                     _dothemagicofreset:
   188     002C                     	ds	2
   189     002E                     _longtimecounter:
   190     002E                     	ds	2
   191     0030                     _finalbuzzercounter:
   192     0030                     	ds	2
   193     0032                     _counttime:
   194     0032                     	ds	2
   195     0034                     _buttontimercounter:
   196     0034                     	ds	2
   197     0036                     _enterbuttontimercounter:
   198     0036                     	ds	2
   199     0038                     _processbuttonclicks:
   200     0038                     	ds	2
   201     003A                     _adc_value:
   202     003A                     	ds	2
   203     003C                     _adtimer:
   204     003C                     	ds	2
   205     003E                     _buttonstimer:
   206     003E                     	ds	2
   207     0040                     _ledtimer:
   208     0040                     	ds	2
   209     0042                     _buttonpressed:
   210     0042                     	ds	2
   211     0044                     _processstarted:
   212     0044                     	ds	1
   213     0045                     _buzzeron:
   214     0045                     	ds	1
   215     0046                     _finalbuzzer:
   216     0046                     	ds	1
   217     0047                     _timecontrol:
   218     0047                     	ds	1
   219     0048                     _starttimer:
   220     0048                     	ds	1
   221     0049                     _canstartblinking:
   222     0049                     	ds	1
   223     004A                     _startbutton:
   224     004A                     	ds	1
   225     004B                     _start:
   226     004B                     	ds	1
   227     004C                     _buttonclicks:
   228     004C                     	ds	2
   229                           
   230                           	psect	dataBANK0
   231     005C                     __pdataBANK0:
   232     005C                     _finalquantity:
   233     005C                     	ds	2
   234                           
   235                           	psect	clrtext
   236     0343                     clear_ram0:	
   237                           ;	Called with FSR containing the base address, and
   238                           ;	W with the last address+1
   239                           
   240     0343  0064               	clrwdt	;clear the watchdog before getting into this loop
   241     0344                     clrloop0:
   242     0344  0180               	clrf	0	;clear RAM location pointed to by FSR
   243     0345  0A84               	incf	4,f	;increment pointer
   244     0346  0604               	xorwf	4,w	;XOR with final address
   245     0347  1903               	btfsc	3,2	;have we reached the end yet?
   246     0348  3400               	retlw	0	;all done for this memory range, return
   247     0349  0604               	xorwf	4,w	;XOR again to restore value
   248     034A  2B44               	goto	clrloop0	;do the next byte
   249                           
   250                           	psect	cstackCOMMON
   251     0000                     __pcstackCOMMON:
   252     0000                     ??_Read_Adc:
   253     0000                     ??___awdiv:	
   254                           ; 1 bytes @ 0x0
   255                           
   256                           
   257                           	psect	cstackBANK0
   258     004E                     __pcstackBANK0:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     004E                     ?_ISR:
   262     004E                     ?_main:	
   263                           ; 1 bytes @ 0x0
   264                           
   265     004E                     ??_ISR:	
   266                           ; 1 bytes @ 0x0
   267                           
   268                           
   269                           ; 1 bytes @ 0x0
   270     004E                     	ds	5
   271     0053                     ?_Read_Adc:
   272     0053                     ?___awdiv:	
   273                           ; 2 bytes @ 0x5
   274                           
   275     0053                     ___awdiv@divisor:	
   276                           ; 2 bytes @ 0x5
   277                           
   278                           
   279                           ; 2 bytes @ 0x5
   280     0053                     	ds	2
   281     0055                     ___awdiv@dividend:
   282                           
   283                           ; 2 bytes @ 0x7
   284     0055                     	ds	2
   285     0057                     ___awdiv@counter:
   286                           
   287                           ; 1 bytes @ 0x9
   288     0057                     	ds	1
   289     0058                     ___awdiv@sign:
   290                           
   291                           ; 1 bytes @ 0xA
   292     0058                     	ds	1
   293     0059                     ___awdiv@quotient:
   294                           
   295                           ; 2 bytes @ 0xB
   296     0059                     	ds	2
   297     005B                     ??_main:
   298                           
   299                           ; 1 bytes @ 0xD
   300     005B                     	ds	1
   301                           
   302                           	psect	maintext
   303     0019                     __pmaintext:	
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 174 in file "main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;		None
   314 ;; Return value:  Size  Location     Type
   315 ;;                  1    wreg      void 
   316 ;; Registers used:
   317 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   318 ;; Tracked objects:
   319 ;;		On entry : B00/0
   320 ;;		On exit  : 0/0
   321 ;;		Unchanged: 0/0
   322 ;; Data sizes:     COMMON   BANK0
   323 ;;      Params:         0       0
   324 ;;      Locals:         0       0
   325 ;;      Temps:          0       1
   326 ;;      Totals:         0       1
   327 ;;Total ram usage:        1 bytes
   328 ;; Hardware stack levels required when called: 2
   329 ;; This function calls:
   330 ;;		_Read_Adc
   331 ;;		___awdiv
   332 ;; This function is called by:
   333 ;;		Startup code after reset
   334 ;; This function uses a non-reentrant model
   335 ;;
   336                           
   337     0019                     _main:	
   338                           ;psect for function _main
   339                           
   340     0019                     l1095:	
   341                           ;incstack = 0
   342                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   343                           
   344     0019  3007               	movlw	7
   345     001A  1283               	bcf	3,5	;RP0=0, select bank0
   346     001B  0099               	movwf	25	;volatile
   347                           
   348                           ;main.c: 186:     ANSEL = 0b00100001;
   349     001C  3021               	movlw	33
   350     001D  1683               	bsf	3,5	;RP0=1, select bank1
   351     001E  009F               	movwf	31	;volatile
   352                           
   353                           ;main.c: 194:     ADCON0 = 0b10000001;
   354     001F  3081               	movlw	129
   355     0020  1283               	bcf	3,5	;RP0=0, select bank0
   356     0021  009F               	movwf	31	;volatile
   357     0022                     l1097:
   358                           
   359                           ;main.c: 197:     WPU = 0X00;
   360     0022  1683               	bsf	3,5	;RP0=1, select bank1
   361     0023  0195               	clrf	21	;volatile
   362                           
   363                           ;main.c: 200:     TMR0 = 0;
   364     0024  1283               	bcf	3,5	;RP0=0, select bank0
   365     0025  0181               	clrf	1	;volatile
   366     0026                     l1099:
   367                           
   368                           ;main.c: 203:     OSCCAL = 0XFF;
   369     0026  30FF               	movlw	255
   370     0027  1683               	bsf	3,5	;RP0=1, select bank1
   371     0028  0090               	movwf	16	;volatile
   372     0029                     l1101:
   373                           
   374                           ;main.c: 214:     OPTION_REG = 0X81;
   375     0029  3081               	movlw	129
   376     002A  0081               	movwf	1	;volatile
   377     002B                     l1103:
   378                           
   379                           ;main.c: 226:     INTCON = 0XE0;
   380     002B  30E0               	movlw	224
   381     002C  008B               	movwf	11	;volatile
   382     002D                     l1105:
   383                           
   384                           ;main.c: 235:     TRISIO = 0X03;
   385     002D  3003               	movlw	3
   386     002E  0085               	movwf	5	;volatile
   387     002F                     l137:	
   388                           ;main.c: 238:     for (;;) {
   389                           
   390     002F  0064               	clrwdt	;# 
   391     0030                     l1107:
   392                           
   393                           ;main.c: 242:         if(adtimer >= 20){
   394     0030  1283               	bcf	3,5	;RP0=0, select bank0
   395     0031  083D               	movf	_adtimer+1,w
   396     0032  3A80               	xorlw	128
   397     0033  00DF               	movwf	btemp+1
   398     0034  3080               	movlw	128
   399     0035  025F               	subwf	btemp+1,w
   400     0036  1D03               	skipz
   401     0037  283A               	goto	u905
   402     0038  3014               	movlw	20
   403     0039  023C               	subwf	_adtimer,w
   404     003A                     u905:
   405     003A  1C03               	skipc
   406     003B  283D               	goto	u901
   407     003C  283E               	goto	u900
   408     003D                     u901:
   409     003D  28DD               	goto	l1137
   410     003E                     u900:
   411     003E                     l1109:
   412                           
   413                           ;main.c: 243:             adtimer= 0;
   414     003E  1283               	bcf	3,5	;RP0=0, select bank0
   415     003F  01BC               	clrf	_adtimer
   416     0040  01BD               	clrf	_adtimer+1
   417     0041                     l1111:
   418                           
   419                           ;main.c: 244:             thirdadc= secondadc;
   420     0041  0829               	movf	_secondadc+1,w
   421     0042  00AB               	movwf	_thirdadc+1
   422     0043  0828               	movf	_secondadc,w
   423     0044  00AA               	movwf	_thirdadc
   424     0045                     l1113:
   425                           
   426                           ;main.c: 245:             secondadc= currentadc;
   427     0045  0827               	movf	_currentadc+1,w
   428     0046  00A9               	movwf	_secondadc+1
   429     0047  0826               	movf	_currentadc,w
   430     0048  00A8               	movwf	_secondadc
   431     0049                     l1115:
   432                           
   433                           ;main.c: 246:             currentadc = Read_Adc();
   434     0049  2336               	fcall	_Read_Adc
   435     004A  1283               	bcf	3,5	;RP0=0, select bank0
   436     004B  0854               	movf	?_Read_Adc+1,w
   437     004C  00A7               	movwf	_currentadc+1
   438     004D  0853               	movf	?_Read_Adc,w
   439     004E  00A6               	movwf	_currentadc
   440     004F                     l1117:
   441                           
   442                           ;main.c: 251:             d1= currentadc - secondadc;
   443     004F  0828               	movf	_secondadc,w
   444     0050  0226               	subwf	_currentadc,w
   445     0051  00A4               	movwf	_d1
   446     0052  0829               	movf	_secondadc+1,w
   447     0053  1C03               	skipc
   448     0054  0A29               	incf	_secondadc+1,w
   449     0055  0227               	subwf	_currentadc+1,w
   450     0056  00A5               	movwf	_d1+1
   451     0057                     l1119:
   452                           
   453                           ;main.c: 252:             d2= currentadc - thirdadc;
   454     0057  082A               	movf	_thirdadc,w
   455     0058  0226               	subwf	_currentadc,w
   456     0059  00A2               	movwf	_d2
   457     005A  082B               	movf	_thirdadc+1,w
   458     005B  1C03               	skipc
   459     005C  0A2B               	incf	_thirdadc+1,w
   460     005D  0227               	subwf	_currentadc+1,w
   461     005E  00A3               	movwf	_d2+1
   462     005F                     l1121:
   463                           
   464                           ;main.c: 253:             d3= secondadc - thirdadc;
   465     005F  082A               	movf	_thirdadc,w
   466     0060  0228               	subwf	_secondadc,w
   467     0061  00A0               	movwf	_d3
   468     0062  082B               	movf	_thirdadc+1,w
   469     0063  1C03               	skipc
   470     0064  0A2B               	incf	_thirdadc+1,w
   471     0065  0229               	subwf	_secondadc+1,w
   472     0066  00A1               	movwf	_d3+1
   473     0067                     l1123:
   474                           
   475                           ;main.c: 255:             if(d1 >= d2 && d1 >= d3){
   476     0067  0825               	movf	_d1+1,w
   477     0068  3A80               	xorlw	128
   478     0069  00DB               	movwf	??_main
   479     006A  0823               	movf	_d2+1,w
   480     006B  3A80               	xorlw	128
   481     006C  025B               	subwf	??_main,w
   482     006D  1D03               	skipz
   483     006E  2871               	goto	u915
   484     006F  0822               	movf	_d2,w
   485     0070  0224               	subwf	_d1,w
   486     0071                     u915:
   487     0071  1C03               	skipc
   488     0072  2874               	goto	u911
   489     0073  2875               	goto	u910
   490     0074                     u911:
   491     0074  2898               	goto	l1129
   492     0075                     u910:
   493     0075                     l1125:
   494     0075  1283               	bcf	3,5	;RP0=0, select bank0
   495     0076  0825               	movf	_d1+1,w
   496     0077  3A80               	xorlw	128
   497     0078  00DB               	movwf	??_main
   498     0079  0821               	movf	_d3+1,w
   499     007A  3A80               	xorlw	128
   500     007B  025B               	subwf	??_main,w
   501     007C  1D03               	skipz
   502     007D  2880               	goto	u925
   503     007E  0820               	movf	_d3,w
   504     007F  0224               	subwf	_d1,w
   505     0080                     u925:
   506     0080  1C03               	skipc
   507     0081  2883               	goto	u921
   508     0082  2884               	goto	u920
   509     0083                     u921:
   510     0083  2898               	goto	l1129
   511     0084                     u920:
   512     0084                     l1127:
   513                           
   514                           ;main.c: 256:                 adc_value= (currentadc + secondadc) / 2;
   515     0084  3002               	movlw	2
   516     0085  1283               	bcf	3,5	;RP0=0, select bank0
   517     0086  00D3               	movwf	___awdiv@divisor
   518     0087  3000               	movlw	0
   519     0088  00D4               	movwf	___awdiv@divisor+1
   520     0089  0828               	movf	_secondadc,w
   521     008A  0726               	addwf	_currentadc,w
   522     008B  00D5               	movwf	___awdiv@dividend
   523     008C  0829               	movf	_secondadc+1,w
   524     008D  1803               	skipnc
   525     008E  0A29               	incf	_secondadc+1,w
   526     008F  0727               	addwf	_currentadc+1,w
   527     0090  00D6               	movwf	___awdiv@dividend+1
   528     0091  22D2               	fcall	___awdiv
   529     0092  1283               	bcf	3,5	;RP0=0, select bank0
   530     0093  0854               	movf	?___awdiv+1,w
   531     0094  00BB               	movwf	_adc_value+1	;volatile
   532     0095  0853               	movf	?___awdiv,w
   533     0096  00BA               	movwf	_adc_value	;volatile
   534                           
   535                           ;main.c: 257:             }else if(d2 >= d1 && d2 >= d3){
   536     0097  28DD               	goto	l1137
   537     0098                     l1129:
   538     0098  1283               	bcf	3,5	;RP0=0, select bank0
   539     0099  0823               	movf	_d2+1,w
   540     009A  3A80               	xorlw	128
   541     009B  00DB               	movwf	??_main
   542     009C  0825               	movf	_d1+1,w
   543     009D  3A80               	xorlw	128
   544     009E  025B               	subwf	??_main,w
   545     009F  1D03               	skipz
   546     00A0  28A3               	goto	u935
   547     00A1  0824               	movf	_d1,w
   548     00A2  0222               	subwf	_d2,w
   549     00A3                     u935:
   550     00A3  1C03               	skipc
   551     00A4  28A6               	goto	u931
   552     00A5  28A7               	goto	u930
   553     00A6                     u931:
   554     00A6  28CA               	goto	l1135
   555     00A7                     u930:
   556     00A7                     l1131:
   557     00A7  1283               	bcf	3,5	;RP0=0, select bank0
   558     00A8  0823               	movf	_d2+1,w
   559     00A9  3A80               	xorlw	128
   560     00AA  00DB               	movwf	??_main
   561     00AB  0821               	movf	_d3+1,w
   562     00AC  3A80               	xorlw	128
   563     00AD  025B               	subwf	??_main,w
   564     00AE  1D03               	skipz
   565     00AF  28B2               	goto	u945
   566     00B0  0820               	movf	_d3,w
   567     00B1  0222               	subwf	_d2,w
   568     00B2                     u945:
   569     00B2  1C03               	skipc
   570     00B3  28B5               	goto	u941
   571     00B4  28B6               	goto	u940
   572     00B5                     u941:
   573     00B5  28CA               	goto	l1135
   574     00B6                     u940:
   575     00B6                     l1133:
   576                           
   577                           ;main.c: 258:                 adc_value= (currentadc + thirdadc) / 2;
   578     00B6  3002               	movlw	2
   579     00B7  1283               	bcf	3,5	;RP0=0, select bank0
   580     00B8  00D3               	movwf	___awdiv@divisor
   581     00B9  3000               	movlw	0
   582     00BA  00D4               	movwf	___awdiv@divisor+1
   583     00BB  082A               	movf	_thirdadc,w
   584     00BC  0726               	addwf	_currentadc,w
   585     00BD  00D5               	movwf	___awdiv@dividend
   586     00BE  082B               	movf	_thirdadc+1,w
   587     00BF  1803               	skipnc
   588     00C0  0A2B               	incf	_thirdadc+1,w
   589     00C1  0727               	addwf	_currentadc+1,w
   590     00C2  00D6               	movwf	___awdiv@dividend+1
   591     00C3  22D2               	fcall	___awdiv
   592     00C4  1283               	bcf	3,5	;RP0=0, select bank0
   593     00C5  0854               	movf	?___awdiv+1,w
   594     00C6  00BB               	movwf	_adc_value+1	;volatile
   595     00C7  0853               	movf	?___awdiv,w
   596     00C8  00BA               	movwf	_adc_value	;volatile
   597                           
   598                           ;main.c: 259:             }else{
   599     00C9  28DD               	goto	l1137
   600     00CA                     l1135:
   601                           
   602                           ;main.c: 260:                 adc_value= (secondadc + thirdadc) / 2;
   603     00CA  3002               	movlw	2
   604     00CB  1283               	bcf	3,5	;RP0=0, select bank0
   605     00CC  00D3               	movwf	___awdiv@divisor
   606     00CD  3000               	movlw	0
   607     00CE  00D4               	movwf	___awdiv@divisor+1
   608     00CF  082A               	movf	_thirdadc,w
   609     00D0  0728               	addwf	_secondadc,w
   610     00D1  00D5               	movwf	___awdiv@dividend
   611     00D2  082B               	movf	_thirdadc+1,w
   612     00D3  1803               	skipnc
   613     00D4  0A2B               	incf	_thirdadc+1,w
   614     00D5  0729               	addwf	_secondadc+1,w
   615     00D6  00D6               	movwf	___awdiv@dividend+1
   616     00D7  22D2               	fcall	___awdiv
   617     00D8  1283               	bcf	3,5	;RP0=0, select bank0
   618     00D9  0854               	movf	?___awdiv+1,w
   619     00DA  00BB               	movwf	_adc_value+1	;volatile
   620     00DB  0853               	movf	?___awdiv,w
   621     00DC  00BA               	movwf	_adc_value	;volatile
   622     00DD                     l1137:
   623                           
   624                           ;main.c: 265:         if (buttonstimer >= 300) {
   625     00DD  1283               	bcf	3,5	;RP0=0, select bank0
   626     00DE  083F               	movf	_buttonstimer+1,w	;volatile
   627     00DF  3A80               	xorlw	128
   628     00E0  00DF               	movwf	btemp+1
   629     00E1  3081               	movlw	129
   630     00E2  025F               	subwf	btemp+1,w
   631     00E3  1D03               	skipz
   632     00E4  28E7               	goto	u955
   633     00E5  302C               	movlw	44
   634     00E6  023E               	subwf	_buttonstimer,w	;volatile
   635     00E7                     u955:
   636     00E7  1C03               	skipc
   637     00E8  28EA               	goto	u951
   638     00E9  28EB               	goto	u950
   639     00EA                     u951:
   640     00EA  296D               	goto	l1179
   641     00EB                     u950:
   642     00EB                     l1139:
   643                           
   644                           ;main.c: 266:             buttonstimer = 0;
   645     00EB  1283               	bcf	3,5	;RP0=0, select bank0
   646     00EC  01BE               	clrf	_buttonstimer	;volatile
   647     00ED  01BF               	clrf	_buttonstimer+1	;volatile
   648     00EE                     l1141:
   649                           
   650                           ;main.c: 270:             if (adc_value > 90 && adc_value <= 1023 && canstartblinking ==
      +                           0 && starttimer == 0) {
   651     00EE  3000               	movlw	0
   652     00EF  023B               	subwf	_adc_value+1,w	;volatile
   653     00F0  305B               	movlw	91
   654     00F1  1903               	skipnz
   655     00F2  023A               	subwf	_adc_value,w	;volatile
   656     00F3  1C03               	skipc
   657     00F4  28F6               	goto	u961
   658     00F5  28F7               	goto	u960
   659     00F6                     u961:
   660     00F6  2930               	goto	l1161
   661     00F7                     u960:
   662     00F7                     l1143:
   663     00F7  3004               	movlw	4
   664     00F8  023B               	subwf	_adc_value+1,w	;volatile
   665     00F9  3000               	movlw	0
   666     00FA  1903               	skipnz
   667     00FB  023A               	subwf	_adc_value,w	;volatile
   668     00FC  1803               	skipnc
   669     00FD  28FF               	goto	u971
   670     00FE  2900               	goto	u970
   671     00FF                     u971:
   672     00FF  2930               	goto	l1161
   673     0100                     u970:
   674     0100                     l1145:
   675     0100  0849               	movf	_canstartblinking,w	;volatile
   676     0101  1D03               	btfss	3,2
   677     0102  2904               	goto	u981
   678     0103  2905               	goto	u980
   679     0104                     u981:
   680     0104  2930               	goto	l1161
   681     0105                     u980:
   682     0105                     l1147:
   683     0105  0848               	movf	_starttimer,w	;volatile
   684     0106  1D03               	btfss	3,2
   685     0107  2909               	goto	u991
   686     0108  290A               	goto	u990
   687     0109                     u991:
   688     0109  2930               	goto	l1161
   689     010A                     u990:
   690     010A                     l1149:
   691                           
   692                           ;main.c: 271:                 buttonclicks++;
   693     010A  3001               	movlw	1
   694     010B  07CC               	addwf	_buttonclicks,f	;volatile
   695     010C  1803               	skipnc
   696     010D  0ACD               	incf	_buttonclicks+1,f	;volatile
   697     010E  3000               	movlw	0
   698     010F  07CD               	addwf	_buttonclicks+1,f	;volatile
   699     0110                     l1151:
   700                           
   701                           ;main.c: 272:                 processstarted = 1;
   702     0110  3001               	movlw	1
   703     0111  00C4               	movwf	_processstarted	;volatile
   704     0112                     l1153:
   705                           
   706                           ;main.c: 274:                 if (buttonclicks == 1) {
   707     0112  034C               	decf	_buttonclicks,w	;volatile
   708     0113  044D               	iorwf	_buttonclicks+1,w	;volatile
   709     0114  1D03               	btfss	3,2
   710     0115  2917               	goto	u1001
   711     0116  2918               	goto	u1000
   712     0117                     u1001:
   713     0117  291D               	goto	l1157
   714     0118                     u1000:
   715     0118                     l1155:
   716                           
   717                           ;main.c: 275:                     enterbuttontimercounter = 1;
   718     0118  3001               	movlw	1
   719     0119  00B6               	movwf	_enterbuttontimercounter
   720     011A  3000               	movlw	0
   721     011B  00B7               	movwf	_enterbuttontimercounter+1
   722                           
   723                           ;main.c: 276:                 } else if (buttonclicks > 4) {
   724     011C  2943               	goto	l1165
   725     011D                     l1157:
   726     011D  084D               	movf	_buttonclicks+1,w	;volatile
   727     011E  3A80               	xorlw	128
   728     011F  00DF               	movwf	btemp+1
   729     0120  3080               	movlw	128
   730     0121  025F               	subwf	btemp+1,w
   731     0122  1D03               	skipz
   732     0123  2926               	goto	u1015
   733     0124  3005               	movlw	5
   734     0125  024C               	subwf	_buttonclicks,w	;volatile
   735     0126                     u1015:
   736     0126  1C03               	skipc
   737     0127  2929               	goto	u1011
   738     0128  292A               	goto	u1010
   739     0129                     u1011:
   740     0129  2943               	goto	l1165
   741     012A                     u1010:
   742     012A                     l1159:
   743                           
   744                           ;main.c: 277:                     buttonclicks = 4;
   745     012A  3004               	movlw	4
   746     012B  1283               	bcf	3,5	;RP0=0, select bank0
   747     012C  00CC               	movwf	_buttonclicks	;volatile
   748     012D  3000               	movlw	0
   749     012E  00CD               	movwf	_buttonclicks+1	;volatile
   750     012F  2943               	goto	l1165
   751     0130                     l1161:
   752     0130  3000               	movlw	0
   753     0131  023B               	subwf	_adc_value+1,w	;volatile
   754     0132  305B               	movlw	91
   755     0133  1903               	skipnz
   756     0134  023A               	subwf	_adc_value,w	;volatile
   757     0135  1803               	skipnc
   758     0136  2938               	goto	u1021
   759     0137  2939               	goto	u1020
   760     0138                     u1021:
   761     0138  2943               	goto	l1165
   762     0139                     u1020:
   763     0139                     l1163:
   764     0139  3000               	movlw	0
   765     013A  023B               	subwf	_adc_value+1,w	;volatile
   766     013B  3015               	movlw	21
   767     013C  1903               	skipnz
   768     013D  023A               	subwf	_adc_value,w	;volatile
   769     013E  1C03               	skipc
   770     013F  2941               	goto	u1031
   771     0140  2942               	goto	u1030
   772     0141                     u1031:
   773     0141  2943               	goto	l1165
   774     0142                     u1030:
   775     0142                     l150:	
   776                           ;main.c: 280:                 while(1){
   777                           
   778     0142                     l151:	
   779                           ;main.c: 282:                 }
   780                           
   781     0142  2942               	goto	l150
   782     0143                     l1165:
   783                           
   784                           ;main.c: 286:             if (enterbuttontimercounter == 1) {
   785     0143  1283               	bcf	3,5	;RP0=0, select bank0
   786     0144  0336               	decf	_enterbuttontimercounter,w
   787     0145  0437               	iorwf	_enterbuttontimercounter+1,w
   788     0146  1D03               	btfss	3,2
   789     0147  2949               	goto	u1041
   790     0148  294A               	goto	u1040
   791     0149                     u1041:
   792     0149  296D               	goto	l1179
   793     014A                     u1040:
   794     014A                     l1167:
   795                           
   796                           ;main.c: 287:                 buttontimercounter++;
   797     014A  3001               	movlw	1
   798     014B  07B4               	addwf	_buttontimercounter,f	;volatile
   799     014C  1803               	skipnc
   800     014D  0AB5               	incf	_buttontimercounter+1,f	;volatile
   801     014E  3000               	movlw	0
   802     014F  07B5               	addwf	_buttontimercounter+1,f	;volatile
   803     0150                     l1169:
   804                           
   805                           ;main.c: 288:                 if (buttontimercounter > 15) {
   806     0150  0835               	movf	_buttontimercounter+1,w	;volatile
   807     0151  3A80               	xorlw	128
   808     0152  00DF               	movwf	btemp+1
   809     0153  3080               	movlw	128
   810     0154  025F               	subwf	btemp+1,w
   811     0155  1D03               	skipz
   812     0156  2959               	goto	u1055
   813     0157  3010               	movlw	16
   814     0158  0234               	subwf	_buttontimercounter,w	;volatile
   815     0159                     u1055:
   816     0159  1C03               	skipc
   817     015A  295C               	goto	u1051
   818     015B  295D               	goto	u1050
   819     015C                     u1051:
   820     015C  296D               	goto	l1179
   821     015D                     u1050:
   822     015D                     l1171:
   823                           
   824                           ;main.c: 289:                     enterbuttontimercounter = 0;
   825     015D  1283               	bcf	3,5	;RP0=0, select bank0
   826     015E  01B6               	clrf	_enterbuttontimercounter
   827     015F  01B7               	clrf	_enterbuttontimercounter+1
   828                           
   829                           ;main.c: 290:                     buttontimercounter = 0;
   830     0160  01B4               	clrf	_buttontimercounter	;volatile
   831     0161  01B5               	clrf	_buttontimercounter+1	;volatile
   832     0162                     l1173:
   833                           
   834                           ;main.c: 291:                     processbuttonclicks = 2 * buttonclicks;
   835     0162  1003               	clrc
   836     0163  0D4C               	rlf	_buttonclicks,w	;volatile
   837     0164  00B8               	movwf	_processbuttonclicks	;volatile
   838     0165  0D4D               	rlf	_buttonclicks+1,w	;volatile
   839     0166  00B9               	movwf	_processbuttonclicks+1	;volatile
   840     0167                     l1175:
   841                           
   842                           ;main.c: 292:                     timecontrol = buttonclicks;
   843     0167  084C               	movf	_buttonclicks,w	;volatile
   844     0168  00C7               	movwf	_timecontrol	;volatile
   845                           
   846                           ;main.c: 293:                     buttonclicks = 0;
   847     0169  01CC               	clrf	_buttonclicks	;volatile
   848     016A  01CD               	clrf	_buttonclicks+1	;volatile
   849     016B                     l1177:
   850                           
   851                           ;main.c: 294:                     canstartblinking = 1;
   852     016B  3001               	movlw	1
   853     016C  00C9               	movwf	_canstartblinking	;volatile
   854     016D                     l1179:
   855                           
   856                           ;main.c: 298:         if(dothemagicofreset == 1){
   857     016D  1283               	bcf	3,5	;RP0=0, select bank0
   858     016E  032C               	decf	_dothemagicofreset,w	;volatile
   859     016F  042D               	iorwf	_dothemagicofreset+1,w	;volatile
   860     0170  1D03               	btfss	3,2
   861     0171  2973               	goto	u1061
   862     0172  2974               	goto	u1060
   863     0173                     u1061:
   864     0173  282F               	goto	l137
   865     0174                     u1060:
   866     0174                     l1181:
   867                           
   868                           ;main.c: 300:             buttonpressed = 0;
   869     0174  01C2               	clrf	_buttonpressed
   870     0175  01C3               	clrf	_buttonpressed+1
   871                           
   872                           ;main.c: 301:             ledtimer = 0;
   873     0176  01C0               	clrf	_ledtimer	;volatile
   874     0177  01C1               	clrf	_ledtimer+1	;volatile
   875                           
   876                           ;main.c: 302:             buttonstimer = 0;
   877     0178  01BE               	clrf	_buttonstimer	;volatile
   878     0179  01BF               	clrf	_buttonstimer+1	;volatile
   879                           
   880                           ;main.c: 303:             start = 0;
   881     017A  01CB               	clrf	_start	;volatile
   882                           
   883                           ;main.c: 304:             startbutton = 0;
   884     017B  01CA               	clrf	_startbutton	;volatile
   885                           
   886                           ;main.c: 305:             adc_value = 0;
   887     017C  01BA               	clrf	_adc_value	;volatile
   888     017D  01BB               	clrf	_adc_value+1	;volatile
   889                           
   890                           ;main.c: 306:             canstartblinking = 0;
   891     017E  01C9               	clrf	_canstartblinking	;volatile
   892                           
   893                           ;main.c: 307:             processbuttonclicks = 0;
   894     017F  01B8               	clrf	_processbuttonclicks	;volatile
   895     0180  01B9               	clrf	_processbuttonclicks+1	;volatile
   896                           
   897                           ;main.c: 308:             buttonclicks = 0;
   898     0181  01CC               	clrf	_buttonclicks	;volatile
   899     0182  01CD               	clrf	_buttonclicks+1	;volatile
   900                           
   901                           ;main.c: 309:             enterbuttontimercounter = 0;
   902     0183  01B6               	clrf	_enterbuttontimercounter
   903     0184  01B7               	clrf	_enterbuttontimercounter+1
   904                           
   905                           ;main.c: 310:             buttontimercounter = 0;
   906     0185  01B4               	clrf	_buttontimercounter	;volatile
   907     0186  01B5               	clrf	_buttontimercounter+1	;volatile
   908                           
   909                           ;main.c: 311:             starttimer = 0;
   910     0187  01C8               	clrf	_starttimer	;volatile
   911                           
   912                           ;main.c: 312:             counttime = 0;
   913     0188  01B2               	clrf	_counttime	;volatile
   914     0189  01B3               	clrf	_counttime+1	;volatile
   915                           
   916                           ;main.c: 313:             timecontrol = 0;
   917     018A  01C7               	clrf	_timecontrol	;volatile
   918     018B                     l1183:
   919                           
   920                           ;main.c: 314:             finalquantity = 2000;
   921     018B  30D0               	movlw	208
   922     018C  00DC               	movwf	_finalquantity	;volatile
   923     018D  3007               	movlw	7
   924     018E  00DD               	movwf	_finalquantity+1	;volatile
   925     018F                     l1185:
   926                           
   927                           ;main.c: 315:             finalbuzzer = 0;
   928     018F  01C6               	clrf	_finalbuzzer	;volatile
   929     0190                     l1187:
   930                           
   931                           ;main.c: 316:             finalbuzzercounter = 0;
   932     0190  01B0               	clrf	_finalbuzzercounter	;volatile
   933     0191  01B1               	clrf	_finalbuzzercounter+1	;volatile
   934     0192                     l1189:
   935                           
   936                           ;main.c: 317:             buzzeron = 0;
   937     0192  01C5               	clrf	_buzzeron	;volatile
   938     0193                     l1191:
   939                           
   940                           ;main.c: 318:             processstarted = 0;
   941     0193  01C4               	clrf	_processstarted	;volatile
   942     0194                     l1193:
   943                           
   944                           ;main.c: 319:             longtimecounter= 0;
   945     0194  01AE               	clrf	_longtimecounter	;volatile
   946     0195  01AF               	clrf	_longtimecounter+1	;volatile
   947     0196                     l1195:
   948                           
   949                           ;main.c: 320:             dothemagicofreset= 0;
   950     0196  01AC               	clrf	_dothemagicofreset	;volatile
   951     0197  01AD               	clrf	_dothemagicofreset+1	;volatile
   952     0198  282F               	goto	l137
   953     0199  280D               	ljmp	start
   954     019A                     __end_of_main:
   955                           
   956                           	psect	text1
   957     02D2                     __ptext1:	
   958 ;; *************** function ___awdiv *****************
   959 ;; Defined at:
   960 ;;		line 5 in file "D:\Installations\pic\sources\c99\common\awdiv.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;  divisor         2    5[BANK0 ] int 
   963 ;;  dividend        2    7[BANK0 ] int 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  quotient        2   11[BANK0 ] int 
   966 ;;  sign            1   10[BANK0 ] unsigned char 
   967 ;;  counter         1    9[BANK0 ] unsigned char 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    5[BANK0 ] int 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMMON   BANK0
   977 ;;      Params:         0       4
   978 ;;      Locals:         0       4
   979 ;;      Temps:          0       0
   980 ;;      Totals:         0       8
   981 ;;Total ram usage:        8 bytes
   982 ;; Hardware stack levels used: 1
   983 ;; Hardware stack levels required when called: 1
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_main
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991     02D2                     ___awdiv:	
   992                           ;psect for function ___awdiv
   993                           
   994     02D2                     l955:	
   995                           ;incstack = 0
   996                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   997                           
   998     02D2  1283               	bcf	3,5	;RP0=0, select bank0
   999     02D3  01D8               	clrf	___awdiv@sign
  1000     02D4                     l957:
  1001     02D4  1FD4               	btfss	___awdiv@divisor+1,7
  1002     02D5  2AD7               	goto	u551
  1003     02D6  2AD8               	goto	u550
  1004     02D7                     u551:
  1005     02D7  2ADF               	goto	l963
  1006     02D8                     u550:
  1007     02D8                     l959:
  1008     02D8  09D3               	comf	___awdiv@divisor,f
  1009     02D9  09D4               	comf	___awdiv@divisor+1,f
  1010     02DA  0AD3               	incf	___awdiv@divisor,f
  1011     02DB  1903               	skipnz
  1012     02DC  0AD4               	incf	___awdiv@divisor+1,f
  1013     02DD                     l961:
  1014     02DD  3001               	movlw	1
  1015     02DE  00D8               	movwf	___awdiv@sign
  1016     02DF                     l963:
  1017     02DF  1FD6               	btfss	___awdiv@dividend+1,7
  1018     02E0  2AE2               	goto	u561
  1019     02E1  2AE3               	goto	u560
  1020     02E2                     u561:
  1021     02E2  2AEA               	goto	l969
  1022     02E3                     u560:
  1023     02E3                     l965:
  1024     02E3  09D5               	comf	___awdiv@dividend,f
  1025     02E4  09D6               	comf	___awdiv@dividend+1,f
  1026     02E5  0AD5               	incf	___awdiv@dividend,f
  1027     02E6  1903               	skipnz
  1028     02E7  0AD6               	incf	___awdiv@dividend+1,f
  1029     02E8                     l967:
  1030     02E8  3001               	movlw	1
  1031     02E9  06D8               	xorwf	___awdiv@sign,f
  1032     02EA                     l969:
  1033     02EA  01D9               	clrf	___awdiv@quotient
  1034     02EB  01DA               	clrf	___awdiv@quotient+1
  1035     02EC                     l971:
  1036     02EC  0853               	movf	___awdiv@divisor,w
  1037     02ED  0454               	iorwf	___awdiv@divisor+1,w
  1038     02EE  1903               	btfsc	3,2
  1039     02EF  2AF1               	goto	u571
  1040     02F0  2AF2               	goto	u570
  1041     02F1                     u571:
  1042     02F1  2B27               	goto	l991
  1043     02F2                     u570:
  1044     02F2                     l973:
  1045     02F2  3001               	movlw	1
  1046     02F3  00D7               	movwf	___awdiv@counter
  1047     02F4  2AFE               	goto	l979
  1048     02F5                     l975:
  1049     02F5  3001               	movlw	1
  1050     02F6                     u585:
  1051     02F6  1003               	clrc
  1052     02F7  0DD3               	rlf	___awdiv@divisor,f
  1053     02F8  0DD4               	rlf	___awdiv@divisor+1,f
  1054     02F9  3EFF               	addlw	-1
  1055     02FA  1D03               	skipz
  1056     02FB  2AF6               	goto	u585
  1057     02FC                     l977:
  1058     02FC  3001               	movlw	1
  1059     02FD  07D7               	addwf	___awdiv@counter,f
  1060     02FE                     l979:
  1061     02FE  1FD4               	btfss	___awdiv@divisor+1,7
  1062     02FF  2B01               	goto	u591
  1063     0300  2B02               	goto	u590
  1064     0301                     u591:
  1065     0301  2AF5               	goto	l975
  1066     0302                     u590:
  1067     0302                     l981:
  1068     0302  3001               	movlw	1
  1069     0303                     u605:
  1070     0303  1003               	clrc
  1071     0304  0DD9               	rlf	___awdiv@quotient,f
  1072     0305  0DDA               	rlf	___awdiv@quotient+1,f
  1073     0306  3EFF               	addlw	-1
  1074     0307  1D03               	skipz
  1075     0308  2B03               	goto	u605
  1076     0309  0854               	movf	___awdiv@divisor+1,w
  1077     030A  0256               	subwf	___awdiv@dividend+1,w
  1078     030B  1D03               	skipz
  1079     030C  2B0F               	goto	u615
  1080     030D  0853               	movf	___awdiv@divisor,w
  1081     030E  0255               	subwf	___awdiv@dividend,w
  1082     030F                     u615:
  1083     030F  1C03               	skipc
  1084     0310  2B12               	goto	u611
  1085     0311  2B13               	goto	u610
  1086     0312                     u611:
  1087     0312  2B1A               	goto	l987
  1088     0313                     u610:
  1089     0313                     l983:
  1090     0313  0853               	movf	___awdiv@divisor,w
  1091     0314  02D5               	subwf	___awdiv@dividend,f
  1092     0315  0854               	movf	___awdiv@divisor+1,w
  1093     0316  1C03               	skipc
  1094     0317  03D6               	decf	___awdiv@dividend+1,f
  1095     0318  02D6               	subwf	___awdiv@dividend+1,f
  1096     0319                     l985:
  1097     0319  1459               	bsf	___awdiv@quotient,0
  1098     031A                     l987:
  1099     031A  3001               	movlw	1
  1100     031B                     u625:
  1101     031B  1003               	clrc
  1102     031C  0CD4               	rrf	___awdiv@divisor+1,f
  1103     031D  0CD3               	rrf	___awdiv@divisor,f
  1104     031E  3EFF               	addlw	-1
  1105     031F  1D03               	skipz
  1106     0320  2B1B               	goto	u625
  1107     0321                     l989:
  1108     0321  3001               	movlw	1
  1109     0322  02D7               	subwf	___awdiv@counter,f
  1110     0323  1D03               	btfss	3,2
  1111     0324  2B26               	goto	u631
  1112     0325  2B27               	goto	u630
  1113     0326                     u631:
  1114     0326  2B02               	goto	l981
  1115     0327                     u630:
  1116     0327                     l991:
  1117     0327  0858               	movf	___awdiv@sign,w
  1118     0328  1903               	btfsc	3,2
  1119     0329  2B2B               	goto	u641
  1120     032A  2B2C               	goto	u640
  1121     032B                     u641:
  1122     032B  2B31               	goto	l995
  1123     032C                     u640:
  1124     032C                     l993:
  1125     032C  09D9               	comf	___awdiv@quotient,f
  1126     032D  09DA               	comf	___awdiv@quotient+1,f
  1127     032E  0AD9               	incf	___awdiv@quotient,f
  1128     032F  1903               	skipnz
  1129     0330  0ADA               	incf	___awdiv@quotient+1,f
  1130     0331                     l995:
  1131     0331  085A               	movf	___awdiv@quotient+1,w
  1132     0332  00D4               	movwf	?___awdiv+1
  1133     0333  0859               	movf	___awdiv@quotient,w
  1134     0334  00D3               	movwf	?___awdiv
  1135     0335                     l396:
  1136     0335  0008               	return
  1137     0336                     __end_of___awdiv:
  1138                           
  1139                           	psect	text2
  1140     0336                     __ptext2:	
  1141 ;; *************** function _Read_Adc *****************
  1142 ;; Defined at:
  1143 ;;		line 59 in file "main.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  2    5[BANK0 ] unsigned int 
  1150 ;; Registers used:
  1151 ;;		wreg
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMMON   BANK0
  1157 ;;      Params:         0       2
  1158 ;;      Locals:         0       0
  1159 ;;      Temps:          0       0
  1160 ;;      Totals:         0       2
  1161 ;;Total ram usage:        2 bytes
  1162 ;; Hardware stack levels used: 1
  1163 ;; Hardware stack levels required when called: 1
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_main
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171     0336                     _Read_Adc:	
  1172                           ;psect for function _Read_Adc
  1173                           
  1174     0336                     l949:	
  1175                           ;incstack = 0
  1176                           ; Regs used in _Read_Adc: [wreg]
  1177                           
  1178                           
  1179                           ;main.c: 60:                     starttimer = 0;
  1180     0336  1283               	bcf	3,5	;RP0=0, select bank0
  1181     0337  149F               	bsf	31,1	;volatile
  1182     0338                     l89:	
  1183                           ;main.c: 61: 
  1184                           
  1185     0338  189F               	btfsc	31,1	;volatile
  1186     0339  2B3B               	goto	u541
  1187     033A  2B3C               	goto	u540
  1188     033B                     u541:
  1189     033B  2B38               	goto	l89
  1190     033C                     u540:
  1191     033C                     l951:
  1192                           
  1193                           ;main.c: 63:                     finalbuzzer = 1;
  1194     033C  081E               	movf	30,w	;volatile
  1195     033D  00D4               	movwf	?_Read_Adc+1
  1196     033E  1683               	bsf	3,5	;RP0=1, select bank1
  1197     033F  081E               	movf	30,w	;volatile
  1198     0340  1283               	bcf	3,5	;RP0=0, select bank0
  1199     0341  00D3               	movwf	?_Read_Adc
  1200     0342                     l92:
  1201     0342  0008               	return
  1202     0343                     __end_of_Read_Adc:
  1203                           
  1204                           	psect	text3
  1205     019A                     __ptext3:	
  1206 ;; *************** function _ISR *****************
  1207 ;; Defined at:
  1208 ;;		line 67 in file "main.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		wreg, status,2, status,0, btemp+1
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMMON   BANK0
  1222 ;;      Params:         0       0
  1223 ;;      Locals:         0       0
  1224 ;;      Temps:          0       5
  1225 ;;      Totals:         0       5
  1226 ;;Total ram usage:        5 bytes
  1227 ;; Hardware stack levels used: 1
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		Interrupt level 1
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235     019A                     _ISR:	
  1236                           ;psect for function _ISR
  1237                           
  1238     019A                     i1l999:
  1239                           
  1240                           ;main.c: 70:         }
  1241     019A  1D0B               	btfss	11,2	;volatile
  1242     019B  299D               	goto	u65_21
  1243     019C  299E               	goto	u65_20
  1244     019D                     u65_21:
  1245     019D  2ACA               	goto	i1l132
  1246     019E                     u65_20:
  1247     019E                     i1l1001:
  1248                           
  1249                           ;main.c: 74:             finalbuzzercounter++;
  1250     019E  3001               	movlw	1
  1251     019F  07C0               	addwf	_ledtimer,f	;volatile
  1252     01A0  1803               	skipnc
  1253     01A1  0AC1               	incf	_ledtimer+1,f	;volatile
  1254     01A2  3000               	movlw	0
  1255     01A3  07C1               	addwf	_ledtimer+1,f	;volatile
  1256                           
  1257                           ;main.c: 75:             canstartblinking = 0;
  1258     01A4  3001               	movlw	1
  1259     01A5  07BE               	addwf	_buttonstimer,f	;volatile
  1260     01A6  1803               	skipnc
  1261     01A7  0ABF               	incf	_buttonstimer+1,f	;volatile
  1262     01A8  3000               	movlw	0
  1263     01A9  07BF               	addwf	_buttonstimer+1,f	;volatile
  1264                           
  1265                           ;main.c: 76:             if (finalbuzzercounter <= 3000) {
  1266     01AA  3001               	movlw	1
  1267     01AB  07BC               	addwf	_adtimer,f
  1268     01AC  1803               	skipnc
  1269     01AD  0ABD               	incf	_adtimer+1,f
  1270     01AE  3000               	movlw	0
  1271     01AF  07BD               	addwf	_adtimer+1,f
  1272     01B0                     i1l1003:
  1273                           
  1274                           ;main.c: 79:                 buzzeron = 0;
  1275     01B0  0348               	decf	_starttimer,w	;volatile
  1276     01B1  1D03               	btfss	3,2
  1277     01B2  29B4               	goto	u66_21
  1278     01B3  29B5               	goto	u66_20
  1279     01B4                     u66_21:
  1280     01B4  29F3               	goto	i1l1023
  1281     01B5                     u66_20:
  1282     01B5                     i1l1005:
  1283                           
  1284                           ;main.c: 80: 
  1285     01B5  3001               	movlw	1
  1286     01B6  07B2               	addwf	_counttime,f	;volatile
  1287     01B7  1803               	skipnc
  1288     01B8  0AB3               	incf	_counttime+1,f	;volatile
  1289     01B9  3000               	movlw	0
  1290     01BA  07B3               	addwf	_counttime+1,f	;volatile
  1291     01BB                     i1l1007:
  1292                           
  1293                           ;main.c: 82: 
  1294     01BB  0832               	movf	_counttime,w	;volatile
  1295     01BC  025C               	subwf	_finalquantity,w	;volatile
  1296     01BD  00CE               	movwf	??_ISR
  1297     01BE  0833               	movf	_counttime+1,w	;volatile
  1298     01BF  1C03               	skipc
  1299     01C0  0A33               	incf	_counttime+1,w	;volatile
  1300     01C1  025D               	subwf	_finalquantity+1,w	;volatile
  1301     01C2  00CF               	movwf	??_ISR+1
  1302     01C3  084F               	movf	??_ISR+1,w
  1303     01C4  3A80               	xorlw	128
  1304     01C5  00DF               	movwf	btemp+1
  1305     01C6  3080               	movlw	128
  1306     01C7  025F               	subwf	btemp+1,w
  1307     01C8  1D03               	skipz
  1308     01C9  29CC               	goto	u67_25
  1309     01CA  3001               	movlw	1
  1310     01CB  024E               	subwf	??_ISR,w
  1311     01CC                     u67_25:
  1312     01CC  1803               	skipnc
  1313     01CD  29CF               	goto	u67_21
  1314     01CE  29D0               	goto	u67_20
  1315     01CF                     u67_21:
  1316     01CF  29F3               	goto	i1l1023
  1317     01D0                     u67_20:
  1318     01D0                     i1l1009:
  1319                           
  1320                           ;main.c: 83: 
  1321     01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1322     01D1  01B2               	clrf	_counttime	;volatile
  1323     01D2  01B3               	clrf	_counttime+1	;volatile
  1324     01D3                     i1l1011:
  1325                           
  1326                           ;main.c: 84: 
  1327     01D3  3001               	movlw	1
  1328     01D4  07AE               	addwf	_longtimecounter,f	;volatile
  1329     01D5  1803               	skipnc
  1330     01D6  0AAF               	incf	_longtimecounter+1,f	;volatile
  1331     01D7  3000               	movlw	0
  1332     01D8  07AF               	addwf	_longtimecounter+1,f	;volatile
  1333     01D9                     i1l1013:
  1334                           
  1335                           ;main.c: 85:                 processbuttonclicks = 0;
  1336     01D9  082F               	movf	_longtimecounter+1,w	;volatile
  1337     01DA  3A80               	xorlw	128
  1338     01DB  00DF               	movwf	btemp+1
  1339     01DC  3080               	movlw	128
  1340     01DD  025F               	subwf	btemp+1,w
  1341     01DE  1D03               	skipz
  1342     01DF  29E2               	goto	u68_25
  1343     01E0  3090               	movlw	144
  1344     01E1  022E               	subwf	_longtimecounter,w	;volatile
  1345     01E2                     u68_25:
  1346     01E2  1C03               	skipc
  1347     01E3  29E5               	goto	u68_21
  1348     01E4  29E6               	goto	u68_20
  1349     01E5                     u68_21:
  1350     01E5  29F3               	goto	i1l1023
  1351     01E6                     u68_20:
  1352     01E6                     i1l1015:
  1353                           
  1354                           ;main.c: 86:                 processstarted = 0;
  1355     01E6  1283               	bcf	3,5	;RP0=0, select bank0
  1356     01E7  01DC               	clrf	_finalquantity	;volatile
  1357     01E8  01DD               	clrf	_finalquantity+1	;volatile
  1358                           
  1359                           ;main.c: 87:                 finalbuzzercounter = 0;
  1360     01E9  01C8               	clrf	_starttimer	;volatile
  1361     01EA                     i1l1017:
  1362                           
  1363                           ;main.c: 89:                 while(1){
  1364     01EA  0344               	decf	_processstarted,w	;volatile
  1365     01EB  1D03               	btfss	3,2
  1366     01EC  29EE               	goto	u69_21
  1367     01ED  29EF               	goto	u69_20
  1368     01EE                     u69_21:
  1369     01EE  29F3               	goto	i1l99
  1370     01EF                     u69_20:
  1371     01EF                     i1l1019:
  1372                           
  1373                           ;main.c: 90:                 }
  1374     01EF  3001               	movlw	1
  1375     01F0  00C6               	movwf	_finalbuzzer	;volatile
  1376     01F1                     i1l1021:
  1377                           
  1378                           ;main.c: 91:             }
  1379     01F1  01C4               	clrf	_processstarted	;volatile
  1380     01F2  29F3               	goto	i1l1023
  1381     01F3                     i1l99:	
  1382                           ;main.c: 96:             processbuttonclicks--;
  1383                           
  1384     01F3                     i1l1023:
  1385                           
  1386                           ;main.c: 100:             } else {
  1387     01F3  1283               	bcf	3,5	;RP0=0, select bank0
  1388     01F4  0346               	decf	_finalbuzzer,w	;volatile
  1389     01F5  1D03               	btfss	3,2
  1390     01F6  29F8               	goto	u70_21
  1391     01F7  29F9               	goto	u70_20
  1392     01F8                     u70_21:
  1393     01F8  2A1C               	goto	i1l1037
  1394     01F9                     u70_20:
  1395     01F9                     i1l1025:
  1396                           
  1397                           ;main.c: 101:                 start = 1;
  1398     01F9  3001               	movlw	1
  1399     01FA  07B0               	addwf	_finalbuzzercounter,f	;volatile
  1400     01FB  1803               	skipnc
  1401     01FC  0AB1               	incf	_finalbuzzercounter+1,f	;volatile
  1402     01FD  3000               	movlw	0
  1403     01FE  07B1               	addwf	_finalbuzzercounter+1,f	;volatile
  1404     01FF                     i1l1027:
  1405                           
  1406                           ;main.c: 102:                 buzzeron= 1;
  1407     01FF  01C9               	clrf	_canstartblinking	;volatile
  1408     0200                     i1l1029:
  1409                           
  1410                           ;main.c: 103:             }
  1411     0200  0831               	movf	_finalbuzzercounter+1,w	;volatile
  1412     0201  3A80               	xorlw	128
  1413     0202  00DF               	movwf	btemp+1
  1414     0203  308B               	movlw	139
  1415     0204  025F               	subwf	btemp+1,w
  1416     0205  1D03               	skipz
  1417     0206  2A09               	goto	u71_25
  1418     0207  30B9               	movlw	185
  1419     0208  0230               	subwf	_finalbuzzercounter,w	;volatile
  1420     0209                     u71_25:
  1421     0209  1803               	skipnc
  1422     020A  2A0C               	goto	u71_21
  1423     020B  2A0D               	goto	u71_20
  1424     020C                     u71_21:
  1425     020C  2A11               	goto	i1l1033
  1426     020D                     u71_20:
  1427     020D                     i1l1031:
  1428                           
  1429                           ;main.c: 104:             ledtimer = 0;
  1430     020D  3001               	movlw	1
  1431     020E  1283               	bcf	3,5	;RP0=0, select bank0
  1432     020F  00C5               	movwf	_buzzeron	;volatile
  1433                           
  1434                           ;main.c: 105:         } else if (processbuttonclicks <= 0 && canstartblinking == 1) {
  1435     0210  2A1C               	goto	i1l1037
  1436     0211                     i1l1033:
  1437                           
  1438                           ;main.c: 106: 
  1439     0211  1283               	bcf	3,5	;RP0=0, select bank0
  1440     0212  01C5               	clrf	_buzzeron	;volatile
  1441     0213                     i1l1035:
  1442                           
  1443                           ;main.c: 108:                 finalquantity = 30000;
  1444     0213  3001               	movlw	1
  1445     0214  00C8               	movwf	_starttimer	;volatile
  1446                           
  1447                           ;main.c: 112:                 finalquantity = 15000;
  1448     0215  01B8               	clrf	_processbuttonclicks	;volatile
  1449     0216  01B9               	clrf	_processbuttonclicks+1	;volatile
  1450                           
  1451                           ;main.c: 113:             } else if (timecontrol == 1) {
  1452     0217  01C4               	clrf	_processstarted	;volatile
  1453                           
  1454                           ;main.c: 114:                 finalquantity = 7500;
  1455     0218  01B0               	clrf	_finalbuzzercounter	;volatile
  1456     0219  01B1               	clrf	_finalbuzzercounter+1	;volatile
  1457                           
  1458                           ;main.c: 115:             } else {
  1459     021A  01C6               	clrf	_finalbuzzer	;volatile
  1460     021B                     i1l105:	
  1461                           ;main.c: 116:                 finalquantity = 0;
  1462                           
  1463     021B                     i1l106:	
  1464                           ;main.c: 117:             }
  1465                           
  1466     021B  2A1B               	goto	i1l105
  1467     021C                     i1l1037:
  1468                           
  1469                           ;main.c: 122:             }
  1470     021C  0841               	movf	_ledtimer+1,w	;volatile
  1471     021D  3A80               	xorlw	128
  1472     021E  00DF               	movwf	btemp+1
  1473     021F  3080               	movlw	128
  1474     0220  025F               	subwf	btemp+1,w
  1475     0221  1D03               	skipz
  1476     0222  2A25               	goto	u72_25
  1477     0223  30C8               	movlw	200
  1478     0224  0240               	subwf	_ledtimer,w	;volatile
  1479     0225                     u72_25:
  1480     0225  1C03               	skipc
  1481     0226  2A28               	goto	u72_21
  1482     0227  2A29               	goto	u72_20
  1483     0228                     u72_21:
  1484     0228  2A52               	goto	i1l1051
  1485     0229                     u72_20:
  1486     0229                     i1l1039:
  1487     0229  1283               	bcf	3,5	;RP0=0, select bank0
  1488     022A  0839               	movf	_processbuttonclicks+1,w	;volatile
  1489     022B  3A80               	xorlw	128
  1490     022C  00DF               	movwf	btemp+1
  1491     022D  3080               	movlw	128
  1492     022E  025F               	subwf	btemp+1,w
  1493     022F  1D03               	skipz
  1494     0230  2A33               	goto	u73_25
  1495     0231  3001               	movlw	1
  1496     0232  0238               	subwf	_processbuttonclicks,w	;volatile
  1497     0233                     u73_25:
  1498     0233  1C03               	skipc
  1499     0234  2A36               	goto	u73_21
  1500     0235  2A37               	goto	u73_20
  1501     0236                     u73_21:
  1502     0236  2A52               	goto	i1l1051
  1503     0237                     u73_20:
  1504     0237                     i1l1041:
  1505     0237  1283               	bcf	3,5	;RP0=0, select bank0
  1506     0238  0349               	decf	_canstartblinking,w	;volatile
  1507     0239  1D03               	btfss	3,2
  1508     023A  2A3C               	goto	u74_21
  1509     023B  2A3D               	goto	u74_20
  1510     023C                     u74_21:
  1511     023C  2A52               	goto	i1l1051
  1512     023D                     u74_20:
  1513     023D                     i1l1043:
  1514                           
  1515                           ;main.c: 123:         }
  1516     023D  30FF               	movlw	255
  1517     023E  07B8               	addwf	_processbuttonclicks,f	;volatile
  1518     023F  1803               	skipnc
  1519     0240  0AB9               	incf	_processbuttonclicks+1,f	;volatile
  1520     0241  30FF               	movlw	255
  1521     0242  07B9               	addwf	_processbuttonclicks+1,f	;volatile
  1522     0243                     i1l1045:
  1523                           
  1524                           ;main.c: 124: 
  1525     0243  034B               	decf	_start,w	;volatile
  1526     0244  1D03               	btfss	3,2
  1527     0245  2A47               	goto	u75_21
  1528     0246  2A48               	goto	u75_20
  1529     0247                     u75_21:
  1530     0247  2A4B               	goto	i1l109
  1531     0248                     u75_20:
  1532     0248                     i1l1047:
  1533                           
  1534                           ;main.c: 125: 
  1535     0248  01CB               	clrf	_start	;volatile
  1536                           
  1537                           ;main.c: 126:         if ((start == 1 && starttimer == 0) || (starttimer == 1 && finalqu
      +                          antity != 0) || buzzeron == 1) {
  1538     0249  01C5               	clrf	_buzzeron	;volatile
  1539                           
  1540                           ;main.c: 127: 
  1541     024A  2A4F               	goto	i1l1049
  1542     024B                     i1l109:
  1543                           
  1544                           ;main.c: 128:             GP5 = 1;
  1545     024B  3001               	movlw	1
  1546     024C  00CB               	movwf	_start	;volatile
  1547                           
  1548                           ;main.c: 129: 
  1549     024D  3001               	movlw	1
  1550     024E  00C5               	movwf	_buzzeron	;volatile
  1551     024F                     i1l1049:
  1552                           
  1553                           ;main.c: 131:                 GP2 = 1;
  1554     024F  01C0               	clrf	_ledtimer	;volatile
  1555     0250  01C1               	clrf	_ledtimer+1	;volatile
  1556                           
  1557                           ;main.c: 132:             } else {
  1558     0251  2AA0               	goto	i1l1081
  1559     0252                     i1l1051:
  1560     0252  1283               	bcf	3,5	;RP0=0, select bank0
  1561     0253  0839               	movf	_processbuttonclicks+1,w	;volatile
  1562     0254  3A80               	xorlw	128
  1563     0255  00DF               	movwf	btemp+1
  1564     0256  3080               	movlw	128
  1565     0257  025F               	subwf	btemp+1,w
  1566     0258  1D03               	skipz
  1567     0259  2A5C               	goto	u76_25
  1568     025A  3001               	movlw	1
  1569     025B  0238               	subwf	_processbuttonclicks,w	;volatile
  1570     025C                     u76_25:
  1571     025C  1803               	skipnc
  1572     025D  2A5F               	goto	u76_21
  1573     025E  2A60               	goto	u76_20
  1574     025F                     u76_21:
  1575     025F  2AA0               	goto	i1l1081
  1576     0260                     u76_20:
  1577     0260                     i1l1053:
  1578     0260  1283               	bcf	3,5	;RP0=0, select bank0
  1579     0261  0349               	decf	_canstartblinking,w	;volatile
  1580     0262  1D03               	btfss	3,2
  1581     0263  2A65               	goto	u77_21
  1582     0264  2A66               	goto	u77_20
  1583     0265                     u77_21:
  1584     0265  2AA0               	goto	i1l1081
  1585     0266                     u77_20:
  1586     0266                     i1l1055:
  1587                           
  1588                           ;main.c: 134:             }
  1589     0266  3004               	movlw	4
  1590     0267  0647               	xorwf	_timecontrol,w	;volatile
  1591     0268  1D03               	btfss	3,2
  1592     0269  2A6B               	goto	u78_21
  1593     026A  2A6C               	goto	u78_20
  1594     026B                     u78_21:
  1595     026B  2A71               	goto	i1l1059
  1596     026C                     u78_20:
  1597     026C                     i1l1057:
  1598                           
  1599                           ;main.c: 135:         } else {
  1600     026C  3030               	movlw	48
  1601     026D  00DC               	movwf	_finalquantity	;volatile
  1602     026E  3075               	movlw	117
  1603     026F  00DD               	movwf	_finalquantity+1	;volatile
  1604                           
  1605                           ;main.c: 136: 
  1606     0270  2A93               	goto	i1l1073
  1607     0271                     i1l1059:
  1608     0271  3003               	movlw	3
  1609     0272  0647               	xorwf	_timecontrol,w	;volatile
  1610     0273  1D03               	btfss	3,2
  1611     0274  2A76               	goto	u79_21
  1612     0275  2A77               	goto	u79_20
  1613     0276                     u79_21:
  1614     0276  2A7C               	goto	i1l1063
  1615     0277                     u79_20:
  1616     0277                     i1l1061:
  1617                           
  1618                           ;main.c: 137:             GP5 = 0;
  1619     0277  30E4               	movlw	228
  1620     0278  00DC               	movwf	_finalquantity	;volatile
  1621     0279  3057               	movlw	87
  1622     027A  00DD               	movwf	_finalquantity+1	;volatile
  1623                           
  1624                           ;main.c: 138:             GP2 = 0;
  1625     027B  2A93               	goto	i1l1073
  1626     027C                     i1l1063:
  1627     027C  3002               	movlw	2
  1628     027D  0647               	xorwf	_timecontrol,w	;volatile
  1629     027E  1D03               	btfss	3,2
  1630     027F  2A81               	goto	u80_21
  1631     0280  2A82               	goto	u80_20
  1632     0281                     u80_21:
  1633     0281  2A87               	goto	i1l1067
  1634     0282                     u80_20:
  1635     0282                     i1l1065:
  1636                           
  1637                           ;main.c: 139:         }
  1638     0282  3098               	movlw	152
  1639     0283  00DC               	movwf	_finalquantity	;volatile
  1640     0284  303A               	movlw	58
  1641     0285  00DD               	movwf	_finalquantity+1	;volatile
  1642                           
  1643                           ;main.c: 140: 
  1644     0286  2A93               	goto	i1l1073
  1645     0287                     i1l1067:
  1646     0287  0347               	decf	_timecontrol,w	;volatile
  1647     0288  1D03               	btfss	3,2
  1648     0289  2A8B               	goto	u81_21
  1649     028A  2A8C               	goto	u81_20
  1650     028B                     u81_21:
  1651     028B  2A91               	goto	i1l1071
  1652     028C                     u81_20:
  1653     028C                     i1l1069:
  1654                           
  1655                           ;main.c: 141:         T0IF = 0;
  1656     028C  304C               	movlw	76
  1657     028D  00DC               	movwf	_finalquantity	;volatile
  1658     028E  301D               	movlw	29
  1659     028F  00DD               	movwf	_finalquantity+1	;volatile
  1660                           
  1661                           ;main.c: 142:         TMR0 = 6;
  1662     0290  2A93               	goto	i1l1073
  1663     0291                     i1l1071:
  1664                           
  1665                           ;main.c: 143:     }
  1666     0291  01DC               	clrf	_finalquantity	;volatile
  1667     0292  01DD               	clrf	_finalquantity+1	;volatile
  1668     0293                     i1l1073:
  1669                           
  1670                           ;main.c: 146: 
  1671     0293  0848               	movf	_starttimer,w	;volatile
  1672     0294  1D03               	btfss	3,2
  1673     0295  2A97               	goto	u82_21
  1674     0296  2A98               	goto	u82_20
  1675     0297                     u82_21:
  1676     0297  2AA0               	goto	i1l1081
  1677     0298                     u82_20:
  1678     0298                     i1l1075:
  1679     0298  0846               	movf	_finalbuzzer,w	;volatile
  1680     0299  1D03               	btfss	3,2
  1681     029A  2A9C               	goto	u83_21
  1682     029B  2A9D               	goto	u83_20
  1683     029C                     u83_21:
  1684     029C  2AA0               	goto	i1l1081
  1685     029D                     u83_20:
  1686     029D                     i1l1077:
  1687                           
  1688                           ;main.c: 147: void main(void) {
  1689     029D  3001               	movlw	1
  1690     029E  00C8               	movwf	_starttimer	;volatile
  1691     029F                     i1l1079:
  1692                           
  1693                           ;main.c: 148: 
  1694     029F  01C9               	clrf	_canstartblinking	;volatile
  1695     02A0                     i1l1081:
  1696     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1697     02A1  034B               	decf	_start,w	;volatile
  1698     02A2  1D03               	btfss	3,2
  1699     02A3  2AA5               	goto	u84_21
  1700     02A4  2AA6               	goto	u84_20
  1701     02A5                     u84_21:
  1702     02A5  2AAB               	goto	i1l1085
  1703     02A6                     u84_20:
  1704     02A6                     i1l1083:
  1705     02A6  0848               	movf	_starttimer,w	;volatile
  1706     02A7  1903               	btfsc	3,2
  1707     02A8  2AAA               	goto	u85_21
  1708     02A9  2AAB               	goto	u85_20
  1709     02AA                     u85_21:
  1710     02AA  2ABB               	goto	i1l124
  1711     02AB                     u85_20:
  1712     02AB                     i1l1085:
  1713     02AB  0348               	decf	_starttimer,w	;volatile
  1714     02AC  1D03               	btfss	3,2
  1715     02AD  2AAF               	goto	u86_21
  1716     02AE  2AB0               	goto	u86_20
  1717     02AF                     u86_21:
  1718     02AF  2AB6               	goto	i1l1089
  1719     02B0                     u86_20:
  1720     02B0                     i1l1087:
  1721     02B0  085C               	movf	_finalquantity,w	;volatile
  1722     02B1  045D               	iorwf	_finalquantity+1,w	;volatile
  1723     02B2  1D03               	btfss	3,2
  1724     02B3  2AB5               	goto	u87_21
  1725     02B4  2AB6               	goto	u87_20
  1726     02B5                     u87_21:
  1727     02B5  2ABB               	goto	i1l124
  1728     02B6                     u87_20:
  1729     02B6                     i1l1089:
  1730     02B6  0345               	decf	_buzzeron,w	;volatile
  1731     02B7  1D03               	btfss	3,2
  1732     02B8  2ABA               	goto	u88_21
  1733     02B9  2ABB               	goto	u88_20
  1734     02BA                     u88_21:
  1735     02BA  2AC5               	goto	i1l122
  1736     02BB                     u88_20:
  1737     02BB                     i1l124:
  1738     02BB  1685               	bsf	5,5	;volatile
  1739     02BC                     i1l1091:
  1740     02BC  0345               	decf	_buzzeron,w	;volatile
  1741     02BD  1D03               	btfss	3,2
  1742     02BE  2AC0               	goto	u89_21
  1743     02BF  2AC1               	goto	u89_20
  1744     02C0                     u89_21:
  1745     02C0  2AC3               	goto	i1l129
  1746     02C1                     u89_20:
  1747     02C1                     i1l1093:
  1748     02C1  1505               	bsf	5,2	;volatile
  1749     02C2  2AC7               	goto	i1l131
  1750     02C3                     i1l129:
  1751     02C3  1105               	bcf	5,2	;volatile
  1752     02C4  2AC7               	goto	i1l131
  1753     02C5                     i1l122:
  1754     02C5  1285               	bcf	5,5	;volatile
  1755     02C6  1105               	bcf	5,2	;volatile
  1756     02C7                     i1l131:
  1757     02C7  110B               	bcf	11,2	;volatile
  1758     02C8  3006               	movlw	6
  1759     02C9  0081               	movwf	1	;volatile
  1760     02CA                     i1l132:
  1761     02CA  0852               	movf	??_ISR+4,w
  1762     02CB  0851               	movf	??_ISR+3,w
  1763     02CC  008A               	movwf	10
  1764     02CD  0E50               	swapf	??_ISR+2,w
  1765     02CE  0083               	movwf	3
  1766     02CF  0EDE               	swapf	btemp,f
  1767     02D0  0E5E               	swapf	btemp,w
  1768     02D1  0009               	retfie
  1769     02D2                     __end_of_ISR:
  1770     0000                     ___latbits      equ	0
  1771     005E                     btemp           set	94	;btemp
  1772     005E                     wtemp0          set	94
  1773                           
  1774                           	psect	intentry
  1775     0004                     __pintentry:	
  1776                           ;incstack = 0
  1777                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
  1778                           
  1779     0004                     interrupt_function:
  1780     005E                     saved_w         set	btemp
  1781     0004  00DE               	movwf	btemp
  1782     0005  0E03               	swapf	3,w
  1783     0006  1283               	bcf	3,5	;RP0=0, select bank0
  1784     0007  00D0               	movwf	??_ISR+2
  1785     0008  080A               	movf	10,w
  1786     0009  00D1               	movwf	??_ISR+3
  1787     000A  085F               	movf	btemp+1,w
  1788     000B  00D2               	movwf	??_ISR+4
  1789     000C  299A               	ljmp	_ISR
  1790                           
  1791                           	psect	config
  1792                           
  1793                           ;Config register CONFIG @ 0x2007
  1794                           ;	Oscillator Selection bits
  1795                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
  1796                           ;	Watchdog Timer Enable bit
  1797                           ;	WDTE = ON, WDT enabled
  1798                           ;	Power-Up Timer Enable bit
  1799                           ;	PWRTE = OFF, PWRT disabled
  1800                           ;	GP3/MCLR pin function select
  1801                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
  1802                           ;	Brown-out Detect Enable bit
  1803                           ;	BOREN = OFF, BOD disabled
  1804                           ;	Code Protection bit
  1805                           ;	CP = OFF, Program Memory code protection is disabled
  1806                           ;	Data Code Protection bit
  1807                           ;	CPD = OFF, Data memory code protection is disabled
  1808     2007                     	org	8199
  1809     2007  319C               	dw	12700

Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         46
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     14      62

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     306
                                             13 BANK0      1     1      0
                           _Read_Adc
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     306
                                              5 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc
   ___awdiv

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK0               62     14      62    100.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BITCOMMON            0      0       0      0.0%
DATA                 0      0      62      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Aug 09 16:16:58 2025

                     l92 0342                       l89 0338                       _d1 0024  
                     _d2 0022                       _d3 0020             ___awdiv@sign 0058  
                     fsr 0004                      l150 0142                      l151 0142  
                    l137 002F                      l396 0335                      l951 033C  
                    l961 02DD                      l971 02EC                      l963 02DF  
                    l955 02D2                      l949 0336                      l981 0302  
                    l973 02F2                      l965 02E3                      l957 02D4  
                    _GP2 002A                      l983 0313                      l975 02F5  
                    l991 0327                      l967 02E8                      l959 02D8  
                    l993 032C                      l985 0319                      l977 02FC  
                    l969 02EA                      _GP5 002D                      l995 0331  
                    l987 031A                      l979 02FE                      l989 0321  
                    u610 0313                      u611 0312                      u540 033C  
                    _ISR 019A                      u541 033B                      u605 0303  
                    u630 0327                      u550 02D8                      u631 0326  
                    u615 030F                      u551 02D7                      u640 032C  
                    u560 02E3                      u641 032B                      u625 031B  
                    u561 02E2                      u570 02F2                      u571 02F1  
                    u900 003E                      u901 003D                      u590 0302  
                    u910 0075                      u591 0301                      u911 0074  
                    u920 0084                      u585 02F6                      u921 0083  
                    u905 003A                      u930 00A7                      u931 00A6  
                    u915 0071                      u940 00B6                      u941 00B5  
                    u925 0080                      u950 00EB                      u951 00EA  
                    u935 00A3                      u960 00F7                      u961 00F6  
                    u945 00B2                      u970 0100                      u971 00FF  
                    u955 00E7                      u980 0105                      u981 0104  
                    u990 010A                      u991 0109       _buttontimercounter 0034  
                    _WPU 0095                      indf 0000              _startbutton 004A  
                   ?_ISR 004E                     l1101 0029                     l1111 0041  
                   l1103 002B                     l1121 005F                     l1113 0045  
                   l1105 002D                     l1131 00A7                     l1123 0067  
                   l1115 0049                     l1107 0030                     l1141 00EE  
                   l1133 00B6                     l1125 0075                     l1117 004F  
                   l1109 003E                     l1151 0110                     l1143 00F7  
                   l1135 00CA                     l1127 0084                     l1119 0057  
                   l1153 0112                     l1145 0100                     l1161 0130  
                   l1129 0098                     l1137 00DD                     l1171 015D  
                   l1163 0139                     l1155 0118                     l1147 0105  
                   l1139 00EB                     l1181 0174                     l1173 0162  
                   l1165 0143                     l1157 011D                     l1149 010A  
                   l1191 0193                     l1183 018B                     l1175 0167  
                   l1167 014A                     l1159 012A                     l1095 0019  
                   l1193 0194                     l1185 018F                     l1177 016B  
                   l1169 0150                     l1097 0022                     l1195 0196  
                   l1187 0190                     l1179 016D                     l1099 0026  
                   l1189 0192                     u1000 0118                     _T0IF 005A  
                   u1001 0117                     u1010 012A                     u1011 0129  
                   u1020 0139                     u1021 0138                     u1030 0142  
                   u1031 0141                     u1015 0126                     u1040 014A  
                   u1041 0149                     u1050 015D                     u1051 015C  
                   u1060 0174                     u1061 0173                     u1055 0159  
                   i1l99 01F3                     _TMR0 0001                     _main 0019  
                   btemp 005E                     start 000D                    ??_ISR 004E  
                  ?_main 004E          __end_of___awdiv 0336                    _CMCON 0019  
                  _ANSEL 009F          ___awdiv@divisor 0053                    i1l105 021B  
                  i1l122 02C5                    i1l106 021B                    i1l131 02C7  
                  i1l124 02BB                    i1l132 02CA                    i1l109 024B  
                  i1l129 02C3                    i1l999 019A          ___awdiv@counter 0057  
                  u70_20 01F9                    u70_21 01F8                    u71_20 020D  
                  u71_21 020C                    u71_25 0209                    u80_20 0282  
                  u72_20 0229                    u80_21 0281                    u72_21 0228  
                  u72_25 0225                    u81_20 028C                    u73_20 0237  
                  u65_20 019E                    u81_21 028B                    u73_21 0236  
                  u65_21 019D                    u73_25 0233                    u82_20 0298  
                  u74_20 023D                    u66_20 01B5                    u82_21 0297  
                  u74_21 023C                    u66_21 01B4                    u83_20 029D  
                  u75_20 0248                    u67_20 01D0                    u83_21 029C  
                  u75_21 0247                    u67_21 01CF                    u67_25 01CC  
                  u84_20 02A6                    u76_20 0260                    u68_20 01E6  
                  u84_21 02A5                    u76_21 025F                    u68_21 01E5  
                  u76_25 025C                    u68_25 01E2                    u85_20 02AB  
                  u77_20 0266                    u69_20 01EF                    u85_21 02AA  
                  u77_21 0265                    u69_21 01EE                    u86_20 02B0  
                  u78_20 026C                    u86_21 02AF                    u78_21 026B  
                  u87_20 02B6                    u79_20 0277                    u87_21 02B5  
                  u79_21 0276                    u88_20 02BB                    u88_21 02BA  
                  u89_20 02C1                    u89_21 02C0                    _start 004B  
                  pclath 000A                    status 0003                    wtemp0 005E  
        __initialization 000E             __end_of_main 019A         __end_of_Read_Adc 0343  
                 ??_main 005B                   _ADCON0 001F                   _ADRESH 001E  
                 _ADRESL 009E         ___awdiv@dividend 0055                   i1l1001 019E  
                 i1l1011 01D3                   i1l1003 01B0                   i1l1021 01F1  
                 i1l1013 01D9                   i1l1005 01B5                   i1l1031 020D  
                 i1l1015 01E6                   i1l1007 01BB                   i1l1023 01F3  
                 i1l1041 0237                   i1l1033 0211                   i1l1025 01F9  
                 i1l1017 01EA                   i1l1009 01D0                   i1l1043 023D  
                 i1l1051 0252                   i1l1035 0213                   i1l1027 01FF  
                 i1l1019 01EF                   i1l1061 0277                   i1l1053 0260  
                 i1l1045 0243                   i1l1029 0200                   i1l1037 021C  
                 i1l1071 0291                   i1l1063 027C                   i1l1055 0266  
                 i1l1047 0248                   i1l1039 0229                   i1l1065 0282  
                 i1l1073 0293                   i1l1057 026C                   i1l1081 02A0  
                 i1l1049 024F                   i1l1091 02BC                   i1l1083 02A6  
                 i1l1075 0298                   i1l1067 0287                   i1l1059 0271  
                 i1l1093 02C1                   i1l1085 02AB                   i1l1077 029D  
                 i1l1069 028C                   i1l1087 02B0                   i1l1079 029F  
                 i1l1089 02B6                   _INTCON 000B                   _OSCCAL 0090  
                 _TRISIO 0085                ??___awdiv 0000         ___awdiv@quotient 0059  
                 saved_w 005E  __end_of__initialization 0017           __pcstackCOMMON 0000  
           __pidataBANK0 034B               __pbssBANK0 0020                ?_Read_Adc 0053  
             __pmaintext 0019               __pintentry 0004            _buttonpressed 0042  
             ??_Read_Adc 0000                  ___awdiv 02D2               _currentadc 0026  
                _adtimer 003C                  __ptext1 02D2                  __ptext2 0336  
                __ptext3 019A          _longtimecounter 002E                  clrloop0 0344  
   end_of_initialization 0017  _enterbuttontimercounter 0036       _finalbuzzercounter 0030  
             _starttimer 0048      _processbuttonclicks 0038      start_initialization 000E  
            __end_of_ISR 02D2              __pdataBANK0 005C                ___latbits 0000  
          __pcstackBANK0 004E                _adc_value 003A             _buttonclicks 004C  
               ?___awdiv 0053             _buttonstimer 003E                _counttime 0032  
      interrupt_function 0004                _secondadc 0028                clear_ram0 0343  
      _dothemagicofreset 002C              _finalbuzzer 0046               _ADCON0bits 001F  
               _Read_Adc 0336                 _ledtimer 0040                 _buzzeron 0045  
               _thirdadc 002A           _processstarted 0044                 intlevel1 0000  
          _finalquantity 005C               _OPTION_REG 0081         _canstartblinking 0049  
            _timecontrol 0047  
