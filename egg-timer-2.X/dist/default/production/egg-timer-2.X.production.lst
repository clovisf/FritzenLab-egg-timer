

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Jul 09 21:51:46 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,space=0,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    10                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,space=0,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x5E,2
    15     0000                     
    16                           ; Generated 17/08/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F675 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     GPIO            equ	5	;# 
    64     000A                     PCLATH          equ	10	;# 
    65     000B                     INTCON          equ	11	;# 
    66     000C                     PIR1            equ	12	;# 
    67     000E                     TMR1            equ	14	;# 
    68     000E                     TMR1L           equ	14	;# 
    69     000F                     TMR1H           equ	15	;# 
    70     0010                     T1CON           equ	16	;# 
    71     0019                     CMCON           equ	25	;# 
    72     001E                     ADRESH          equ	30	;# 
    73     001F                     ADCON0          equ	31	;# 
    74     0081                     OPTION_REG      equ	129	;# 
    75     0085                     TRISIO          equ	133	;# 
    76     008C                     PIE1            equ	140	;# 
    77     008E                     PCON            equ	142	;# 
    78     0090                     OSCCAL          equ	144	;# 
    79     0095                     WPU             equ	149	;# 
    80     0096                     IOC             equ	150	;# 
    81     0096                     IOCB            equ	150	;# 
    82     0099                     VRCON           equ	153	;# 
    83     009A                     EEDATA          equ	154	;# 
    84     009A                     EEDAT           equ	154	;# 
    85     009B                     EEADR           equ	155	;# 
    86     009C                     EECON1          equ	156	;# 
    87     009D                     EECON2          equ	157	;# 
    88     009E                     ADRESL          equ	158	;# 
    89     009F                     ANSEL           equ	159	;# 
    90     0000                     INDF            equ	0	;# 
    91     0001                     TMR0            equ	1	;# 
    92     0002                     PCL             equ	2	;# 
    93     0003                     STATUS          equ	3	;# 
    94     0004                     FSR             equ	4	;# 
    95     0005                     GPIO            equ	5	;# 
    96     000A                     PCLATH          equ	10	;# 
    97     000B                     INTCON          equ	11	;# 
    98     000C                     PIR1            equ	12	;# 
    99     000E                     TMR1            equ	14	;# 
   100     000E                     TMR1L           equ	14	;# 
   101     000F                     TMR1H           equ	15	;# 
   102     0010                     T1CON           equ	16	;# 
   103     0019                     CMCON           equ	25	;# 
   104     001E                     ADRESH          equ	30	;# 
   105     001F                     ADCON0          equ	31	;# 
   106     0081                     OPTION_REG      equ	129	;# 
   107     0085                     TRISIO          equ	133	;# 
   108     008C                     PIE1            equ	140	;# 
   109     008E                     PCON            equ	142	;# 
   110     0090                     OSCCAL          equ	144	;# 
   111     0095                     WPU             equ	149	;# 
   112     0096                     IOC             equ	150	;# 
   113     0096                     IOCB            equ	150	;# 
   114     0099                     VRCON           equ	153	;# 
   115     009A                     EEDATA          equ	154	;# 
   116     009A                     EEDAT           equ	154	;# 
   117     009B                     EEADR           equ	155	;# 
   118     009C                     EECON1          equ	156	;# 
   119     009D                     EECON2          equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ANSEL           equ	159	;# 
   122     000B                     _INTCON         set	11
   123     001F                     _ADCON0         set	31
   124     0019                     _CMCON          set	25
   125     0001                     _TMR0           set	1
   126     001E                     _ADRESH         set	30
   127     001F                     _ADCON0bits     set	31
   128     002D                     _GP5            set	45
   129     005A                     _T0IF           set	90
   130     0085                     _TRISIO         set	133
   131     0081                     _OPTION_REG     set	129
   132     0090                     _OSCCAL         set	144
   133     0095                     _WPU            set	149
   134     009F                     _ANSEL          set	159
   135     009E                     _ADRESL         set	158
   136                           
   137                           	psect	cinit
   138     000E                     start_initialization:	
   139                           ; #config settings
   140                           
   141     000E                     __initialization:
   142                           
   143                           ; Clear objects allocated to BANK0
   144     000E  1383               	bcf	3,7	;select IRP bank0
   145     000F  3020               	movlw	low __pbssBANK0
   146     0010  0084               	movwf	4
   147     0011  303C               	movlw	low (__pbssBANK0+28)
   148     0012  212B               	fcall	clear_ram0
   149     0013                     end_of_initialization:	
   150                           ;End of C runtime variable initialization code
   151                           
   152     0013                     __end_of__initialization:
   153     0013  0183               	clrf	3
   154     0014  2815               	ljmp	_main	;jump to C main() function
   155                           
   156                           	psect	bssBANK0
   157     0020                     __pbssBANK0:
   158     0020                     _tempo_led:
   159     0020                     	ds	4
   160     0024                     _supercounter:
   161     0024                     	ds	2
   162     0026                     _buttontimercounter:
   163     0026                     	ds	2
   164     0028                     _enterbuttontimercounter:
   165     0028                     	ds	2
   166     002A                     _processbuttonclicks:
   167     002A                     	ds	2
   168     002C                     _canstartblinking:
   169     002C                     	ds	2
   170     002E                     _adc_value:
   171     002E                     	ds	2
   172     0030                     _startbutton:
   173     0030                     	ds	2
   174     0032                     _start:
   175     0032                     	ds	2
   176     0034                     _buttonstimer:
   177     0034                     	ds	2
   178     0036                     _ledtimer:
   179     0036                     	ds	2
   180     0038                     _buttonpressed:
   181     0038                     	ds	2
   182     003A                     _buttonclicks:
   183     003A                     	ds	2
   184                           
   185                           	psect	clrtext
   186     012B                     clear_ram0:	
   187                           ;	Called with FSR containing the base address, and
   188                           ;	W with the last address+1
   189                           
   190     012B  0064               	clrwdt	;clear the watchdog before getting into this loop
   191     012C                     clrloop0:
   192     012C  0180               	clrf	0	;clear RAM location pointed to by FSR
   193     012D  0A84               	incf	4,f	;increment pointer
   194     012E  0604               	xorwf	4,w	;XOR with final address
   195     012F  1903               	btfsc	3,2	;have we reached the end yet?
   196     0130  3400               	retlw	0	;all done for this memory range, return
   197     0131  0604               	xorwf	4,w	;XOR again to restore value
   198     0132  292C               	goto	clrloop0	;do the next byte
   199                           
   200                           	psect	cstackCOMMON
   201     0000                     __pcstackCOMMON:
   202     0000                     ??_Read_Adc:
   203     0000                     ??_main:	
   204                           ; 1 bytes @ 0x0
   205                           
   206                           
   207                           	psect	cstackBANK0
   208     003C                     __pcstackBANK0:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     003C                     ?_ISR:
   212     003C                     ?_main:	
   213                           ; 1 bytes @ 0x0
   214                           
   215     003C                     ??_ISR:	
   216                           ; 1 bytes @ 0x0
   217                           
   218                           
   219                           ; 1 bytes @ 0x0
   220     003C                     	ds	3
   221     003F                     ?_Read_Adc:
   222                           
   223                           ; 2 bytes @ 0x3
   224     003F                     	ds	2
   225                           
   226                           	psect	maintext
   227     0015                     __pmaintext:	
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 97 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;		None
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    wreg      void 
   240 ;; Registers used:
   241 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : B00/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMMON   BANK0
   247 ;;      Params:         0       0
   248 ;;      Locals:         0       0
   249 ;;      Temps:          0       0
   250 ;;      Totals:         0       0
   251 ;;Total ram usage:        0 bytes
   252 ;; Hardware stack levels required when called: 2
   253 ;; This function calls:
   254 ;;		_Read_Adc
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260     0015                     _main:	
   261                           ;psect for function _main
   262                           
   263     0015                     l760:	
   264                           ;incstack = 0
   265                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   266                           
   267                           
   268                           ;main.c: 98:     CMCON = 0x07;
   269     0015  3007               	movlw	7
   270     0016  1283               	bcf	3,5	;RP0=0, select bank0
   271     0017  0099               	movwf	25	;volatile
   272                           
   273                           ;main.c: 99:     ANSEL = 0b0010001;
   274     0018  3011               	movlw	17
   275     0019  1683               	bsf	3,5	;RP0=1, select bank1
   276     001A  009F               	movwf	31	;volatile
   277                           
   278                           ;main.c: 100:     ADCON0 = 0b10000001;
   279     001B  3081               	movlw	129
   280     001C  1283               	bcf	3,5	;RP0=0, select bank0
   281     001D  009F               	movwf	31	;volatile
   282     001E                     l762:
   283                           
   284                           ;main.c: 101:     WPU = 0X00;
   285     001E  1683               	bsf	3,5	;RP0=1, select bank1
   286     001F  0195               	clrf	21	;volatile
   287                           
   288                           ;main.c: 102:     TMR0 = 0;
   289     0020  1283               	bcf	3,5	;RP0=0, select bank0
   290     0021  0181               	clrf	1	;volatile
   291     0022                     l764:
   292                           
   293                           ;main.c: 103:     OSCCAL = 0XFF;
   294     0022  30FF               	movlw	255
   295     0023  1683               	bsf	3,5	;RP0=1, select bank1
   296     0024  0090               	movwf	16	;volatile
   297     0025                     l766:
   298                           
   299                           ;main.c: 104:     OPTION_REG = 0X81;
   300     0025  3081               	movlw	129
   301     0026  0081               	movwf	1	;volatile
   302     0027                     l768:
   303                           
   304                           ;main.c: 105:     INTCON = 0XE0;
   305     0027  30E0               	movlw	224
   306     0028  008B               	movwf	11	;volatile
   307     0029                     l770:
   308                           
   309                           ;main.c: 107:     TRISIO = 0X03;
   310     0029  3003               	movlw	3
   311     002A  0085               	movwf	5	;volatile
   312     002B                     l772:
   313                           
   314                           ;main.c: 111:     {;main.c: 112:        if(buttonstimer >= 300){
   315     002B  1283               	bcf	3,5	;RP0=0, select bank0
   316     002C  0835               	movf	_buttonstimer+1,w	;volatile
   317     002D  3A80               	xorlw	128
   318     002E  00DF               	movwf	btemp+1
   319     002F  3081               	movlw	129
   320     0030  025F               	subwf	btemp+1,w
   321     0031  1D03               	skipz
   322     0032  2835               	goto	u295
   323     0033  302C               	movlw	44
   324     0034  0234               	subwf	_buttonstimer,w	;volatile
   325     0035                     u295:
   326     0035  1C03               	skipc
   327     0036  2838               	goto	u291
   328     0037  2839               	goto	u290
   329     0038                     u291:
   330     0038  282B               	goto	l772
   331     0039                     u290:
   332     0039                     l774:
   333                           
   334                           ;main.c: 113:            buttonstimer= 0;
   335     0039  1283               	bcf	3,5	;RP0=0, select bank0
   336     003A  01B4               	clrf	_buttonstimer	;volatile
   337     003B  01B5               	clrf	_buttonstimer+1	;volatile
   338     003C                     l776:
   339                           
   340                           ;main.c: 115:            adc_value = Read_Adc();
   341     003C  211E               	fcall	_Read_Adc
   342     003D  1283               	bcf	3,5	;RP0=0, select bank0
   343     003E  0840               	movf	?_Read_Adc+1,w
   344     003F  00AF               	movwf	_adc_value+1	;volatile
   345     0040  083F               	movf	?_Read_Adc,w
   346     0041  00AE               	movwf	_adc_value	;volatile
   347     0042                     l778:
   348                           
   349                           ;main.c: 117:            if(adc_value > 90 && adc_value <= 1023 && canstartblinking == 0
      +                          ){
   350     0042  3000               	movlw	0
   351     0043  022F               	subwf	_adc_value+1,w	;volatile
   352     0044  305B               	movlw	91
   353     0045  1903               	skipnz
   354     0046  022E               	subwf	_adc_value,w	;volatile
   355     0047  1C03               	skipc
   356     0048  284A               	goto	u301
   357     0049  284B               	goto	u300
   358     004A                     u301:
   359     004A  287E               	goto	l794
   360     004B                     u300:
   361     004B                     l780:
   362     004B  3004               	movlw	4
   363     004C  022F               	subwf	_adc_value+1,w	;volatile
   364     004D  3000               	movlw	0
   365     004E  1903               	skipnz
   366     004F  022E               	subwf	_adc_value,w	;volatile
   367     0050  1803               	skipnc
   368     0051  2853               	goto	u311
   369     0052  2854               	goto	u310
   370     0053                     u311:
   371     0053  287E               	goto	l794
   372     0054                     u310:
   373     0054                     l782:
   374     0054  082C               	movf	_canstartblinking,w	;volatile
   375     0055  042D               	iorwf	_canstartblinking+1,w	;volatile
   376     0056  1D03               	btfss	3,2
   377     0057  2859               	goto	u321
   378     0058  285A               	goto	u320
   379     0059                     u321:
   380     0059  287E               	goto	l794
   381     005A                     u320:
   382     005A                     l784:
   383                           
   384                           ;main.c: 118:                buttonclicks++;
   385     005A  3001               	movlw	1
   386     005B  07BA               	addwf	_buttonclicks,f	;volatile
   387     005C  1803               	skipnc
   388     005D  0ABB               	incf	_buttonclicks+1,f	;volatile
   389     005E  3000               	movlw	0
   390     005F  07BB               	addwf	_buttonclicks+1,f	;volatile
   391     0060                     l786:
   392                           
   393                           ;main.c: 119:                if(buttonclicks == 1){
   394     0060  033A               	decf	_buttonclicks,w	;volatile
   395     0061  043B               	iorwf	_buttonclicks+1,w	;volatile
   396     0062  1D03               	btfss	3,2
   397     0063  2865               	goto	u331
   398     0064  2866               	goto	u330
   399     0065                     u331:
   400     0065  286B               	goto	l790
   401     0066                     u330:
   402     0066                     l788:
   403                           
   404                           ;main.c: 120:                    enterbuttontimercounter= 1;
   405     0066  3001               	movlw	1
   406     0067  00A8               	movwf	_enterbuttontimercounter	;volatile
   407     0068  3000               	movlw	0
   408     0069  00A9               	movwf	_enterbuttontimercounter+1	;volatile
   409                           
   410                           ;main.c: 121:                }else if(buttonclicks > 4){
   411     006A  287E               	goto	l794
   412     006B                     l790:
   413     006B  083B               	movf	_buttonclicks+1,w	;volatile
   414     006C  3A80               	xorlw	128
   415     006D  00DF               	movwf	btemp+1
   416     006E  3080               	movlw	128
   417     006F  025F               	subwf	btemp+1,w
   418     0070  1D03               	skipz
   419     0071  2874               	goto	u345
   420     0072  3005               	movlw	5
   421     0073  023A               	subwf	_buttonclicks,w	;volatile
   422     0074                     u345:
   423     0074  1C03               	skipc
   424     0075  2877               	goto	u341
   425     0076  2878               	goto	u340
   426     0077                     u341:
   427     0077  287E               	goto	l84
   428     0078                     u340:
   429     0078                     l792:
   430                           
   431                           ;main.c: 122:                    buttonclicks= 4;
   432     0078  3004               	movlw	4
   433     0079  1283               	bcf	3,5	;RP0=0, select bank0
   434     007A  00BA               	movwf	_buttonclicks	;volatile
   435     007B  3000               	movlw	0
   436     007C  00BB               	movwf	_buttonclicks+1	;volatile
   437                           
   438                           ;main.c: 123:                }else{
   439     007D  287E               	goto	l794
   440     007E                     l84:
   441     007E                     l794:
   442                           
   443                           ;main.c: 128:            if(enterbuttontimercounter == 1){
   444     007E  1283               	bcf	3,5	;RP0=0, select bank0
   445     007F  0328               	decf	_enterbuttontimercounter,w	;volatile
   446     0080  0429               	iorwf	_enterbuttontimercounter+1,w	;volatile
   447     0081  1D03               	btfss	3,2
   448     0082  2884               	goto	u351
   449     0083  2885               	goto	u350
   450     0084                     u351:
   451     0084  282B               	goto	l772
   452     0085                     u350:
   453     0085                     l796:
   454                           
   455                           ;main.c: 129:                buttontimercounter++;
   456     0085  3001               	movlw	1
   457     0086  07A6               	addwf	_buttontimercounter,f	;volatile
   458     0087  1803               	skipnc
   459     0088  0AA7               	incf	_buttontimercounter+1,f	;volatile
   460     0089  3000               	movlw	0
   461     008A  07A7               	addwf	_buttontimercounter+1,f	;volatile
   462     008B                     l798:
   463                           
   464                           ;main.c: 130:                if(buttontimercounter > 10){
   465     008B  0827               	movf	_buttontimercounter+1,w	;volatile
   466     008C  3A80               	xorlw	128
   467     008D  00DF               	movwf	btemp+1
   468     008E  3080               	movlw	128
   469     008F  025F               	subwf	btemp+1,w
   470     0090  1D03               	skipz
   471     0091  2894               	goto	u365
   472     0092  300B               	movlw	11
   473     0093  0226               	subwf	_buttontimercounter,w	;volatile
   474     0094                     u365:
   475     0094  1C03               	skipc
   476     0095  2897               	goto	u361
   477     0096  2898               	goto	u360
   478     0097                     u361:
   479     0097  282B               	goto	l772
   480     0098                     u360:
   481     0098                     l800:
   482                           
   483                           ;main.c: 131:                    enterbuttontimercounter= 0;
   484     0098  1283               	bcf	3,5	;RP0=0, select bank0
   485     0099  01A8               	clrf	_enterbuttontimercounter	;volatile
   486     009A  01A9               	clrf	_enterbuttontimercounter+1	;volatile
   487                           
   488                           ;main.c: 132:                    buttontimercounter= 0;
   489     009B  01A6               	clrf	_buttontimercounter	;volatile
   490     009C  01A7               	clrf	_buttontimercounter+1	;volatile
   491     009D                     l802:
   492                           
   493                           ;main.c: 133:                    processbuttonclicks= 2 * buttonclicks;
   494     009D  1003               	clrc
   495     009E  0D3A               	rlf	_buttonclicks,w	;volatile
   496     009F  00AA               	movwf	_processbuttonclicks	;volatile
   497     00A0  0D3B               	rlf	_buttonclicks+1,w	;volatile
   498     00A1  00AB               	movwf	_processbuttonclicks+1	;volatile
   499     00A2                     l804:
   500                           
   501                           ;main.c: 134:                    buttonclicks= 0;
   502     00A2  01BA               	clrf	_buttonclicks	;volatile
   503     00A3  01BB               	clrf	_buttonclicks+1	;volatile
   504                           
   505                           ;main.c: 135:                    canstartblinking= 1;
   506     00A4  3001               	movlw	1
   507     00A5  00AC               	movwf	_canstartblinking	;volatile
   508     00A6  3000               	movlw	0
   509     00A7  00AD               	movwf	_canstartblinking+1	;volatile
   510     00A8  282B               	goto	l772
   511     00A9  280D               	ljmp	start
   512     00AA                     __end_of_main:
   513                           
   514                           	psect	text1
   515     011E                     __ptext1:	
   516 ;; *************** function _Read_Adc *****************
   517 ;; Defined at:
   518 ;;		line 50 in file "main.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  2    3[BANK0 ] unsigned int 
   525 ;; Registers used:
   526 ;;		wreg
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMMON   BANK0
   532 ;;      Params:         0       2
   533 ;;      Locals:         0       0
   534 ;;      Temps:          0       0
   535 ;;      Totals:         0       2
   536 ;;Total ram usage:        2 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; Hardware stack levels required when called: 1
   539 ;; This function calls:
   540 ;;		Nothing
   541 ;; This function is called by:
   542 ;;		_main
   543 ;; This function uses a non-reentrant model
   544 ;;
   545                           
   546     011E                     _Read_Adc:	
   547                           ;psect for function _Read_Adc
   548                           
   549     011E                     l720:	
   550                           ;incstack = 0
   551                           ; Regs used in _Read_Adc: [wreg]
   552                           
   553                           
   554                           ;main.c: 51:     ADCON0bits.GO_nDONE = 1;
   555     011E  1283               	bcf	3,5	;RP0=0, select bank0
   556     011F  149F               	bsf	31,1	;volatile
   557     0120                     l57:	
   558                           ;main.c: 52:     while (ADCON0bits.GO_nDONE);
   559                           
   560     0120  189F               	btfsc	31,1	;volatile
   561     0121  2923               	goto	u191
   562     0122  2924               	goto	u190
   563     0123                     u191:
   564     0123  2920               	goto	l57
   565     0124                     u190:
   566     0124                     l722:
   567                           
   568                           ;main.c: 53:     return ((unsigned int)ADRESH << 8) | ADRESL;
   569     0124  081E               	movf	30,w	;volatile
   570     0125  00C0               	movwf	?_Read_Adc+1
   571     0126  1683               	bsf	3,5	;RP0=1, select bank1
   572     0127  081E               	movf	30,w	;volatile
   573     0128  1283               	bcf	3,5	;RP0=0, select bank0
   574     0129  00BF               	movwf	?_Read_Adc
   575     012A                     l60:
   576     012A  0008               	return
   577     012B                     __end_of_Read_Adc:
   578                           
   579                           	psect	text2
   580     00AA                     __ptext2:	
   581 ;; *************** function _ISR *****************
   582 ;; Defined at:
   583 ;;		line 56 in file "main.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, btemp+1
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0
   597 ;;      Params:         0       0
   598 ;;      Locals:         0       0
   599 ;;      Temps:          0       3
   600 ;;      Totals:         0       3
   601 ;;Total ram usage:        3 bytes
   602 ;; Hardware stack levels used: 1
   603 ;; This function calls:
   604 ;;		Nothing
   605 ;; This function is called by:
   606 ;;		Interrupt level 1
   607 ;; This function uses a non-reentrant model
   608 ;;
   609                           
   610     00AA                     _ISR:	
   611                           ;psect for function _ISR
   612                           
   613     00AA                     i1l726:
   614                           
   615                           ;main.c: 58:     if(T0IF)
   616     00AA  1D0B               	btfss	11,2	;volatile
   617     00AB  28AD               	goto	u20_21
   618     00AC  28AE               	goto	u20_20
   619     00AD                     u20_21:
   620     00AD  2916               	goto	i1l75
   621     00AE                     u20_20:
   622     00AE                     i1l728:
   623                           
   624                           ;main.c: 59:     {;main.c: 61:         ledtimer++;
   625     00AE  3001               	movlw	1
   626     00AF  07B6               	addwf	_ledtimer,f	;volatile
   627     00B0  1803               	skipnc
   628     00B1  0AB7               	incf	_ledtimer+1,f	;volatile
   629     00B2  3000               	movlw	0
   630     00B3  07B7               	addwf	_ledtimer+1,f	;volatile
   631                           
   632                           ;main.c: 62:         buttonstimer++;
   633     00B4  3001               	movlw	1
   634     00B5  07B4               	addwf	_buttonstimer,f	;volatile
   635     00B6  1803               	skipnc
   636     00B7  0AB5               	incf	_buttonstimer+1,f	;volatile
   637     00B8  3000               	movlw	0
   638     00B9  07B5               	addwf	_buttonstimer+1,f	;volatile
   639     00BA                     i1l730:
   640                           
   641                           ;main.c: 65:         if(ledtimer >= 200 && processbuttonclicks != 0 && canstartblinking 
      +                          == 1){
   642     00BA  0837               	movf	_ledtimer+1,w	;volatile
   643     00BB  3A80               	xorlw	128
   644     00BC  00DF               	movwf	btemp+1
   645     00BD  3080               	movlw	128
   646     00BE  025F               	subwf	btemp+1,w
   647     00BF  1D03               	skipz
   648     00C0  28C3               	goto	u21_25
   649     00C1  30C8               	movlw	200
   650     00C2  0236               	subwf	_ledtimer,w	;volatile
   651     00C3                     u21_25:
   652     00C3  1C03               	skipc
   653     00C4  28C6               	goto	u21_21
   654     00C5  28C7               	goto	u21_20
   655     00C6                     u21_21:
   656     00C6  28EA               	goto	i1l746
   657     00C7                     u21_20:
   658     00C7                     i1l732:
   659     00C7  1283               	bcf	3,5	;RP0=0, select bank0
   660     00C8  082A               	movf	_processbuttonclicks,w	;volatile
   661     00C9  042B               	iorwf	_processbuttonclicks+1,w	;volatile
   662     00CA  1903               	btfsc	3,2
   663     00CB  28CD               	goto	u22_21
   664     00CC  28CE               	goto	u22_20
   665     00CD                     u22_21:
   666     00CD  28EA               	goto	i1l746
   667     00CE                     u22_20:
   668     00CE                     i1l734:
   669     00CE  032C               	decf	_canstartblinking,w	;volatile
   670     00CF  042D               	iorwf	_canstartblinking+1,w	;volatile
   671     00D0  1D03               	btfss	3,2
   672     00D1  28D3               	goto	u23_21
   673     00D2  28D4               	goto	u23_20
   674     00D3                     u23_21:
   675     00D3  28EA               	goto	i1l746
   676     00D4                     u23_20:
   677     00D4                     i1l736:
   678                           
   679                           ;main.c: 66:             processbuttonclicks--;
   680     00D4  30FF               	movlw	255
   681     00D5  07AA               	addwf	_processbuttonclicks,f	;volatile
   682     00D6  1803               	skipnc
   683     00D7  0AAB               	incf	_processbuttonclicks+1,f	;volatile
   684     00D8  30FF               	movlw	255
   685     00D9  07AB               	addwf	_processbuttonclicks+1,f	;volatile
   686     00DA                     i1l738:
   687                           
   688                           ;main.c: 67:             if(start == 1){
   689     00DA  0332               	decf	_start,w	;volatile
   690     00DB  0433               	iorwf	_start+1,w	;volatile
   691     00DC  1D03               	btfss	3,2
   692     00DD  28DF               	goto	u24_21
   693     00DE  28E0               	goto	u24_20
   694     00DF                     u24_21:
   695     00DF  28E3               	goto	i1l742
   696     00E0                     u24_20:
   697     00E0                     i1l740:
   698                           
   699                           ;main.c: 68:                 start= 0;
   700     00E0  01B2               	clrf	_start	;volatile
   701     00E1  01B3               	clrf	_start+1	;volatile
   702                           
   703                           ;main.c: 69:             }else{
   704     00E2  28E7               	goto	i1l744
   705     00E3                     i1l742:
   706                           
   707                           ;main.c: 70:               start= 1;
   708     00E3  3001               	movlw	1
   709     00E4  00B2               	movwf	_start	;volatile
   710     00E5  3000               	movlw	0
   711     00E6  00B3               	movwf	_start+1	;volatile
   712     00E7                     i1l744:
   713                           
   714                           ;main.c: 72:             ledtimer= 0;
   715     00E7  01B6               	clrf	_ledtimer	;volatile
   716     00E8  01B7               	clrf	_ledtimer+1	;volatile
   717                           
   718                           ;main.c: 73:         }else if(processbuttonclicks <= 0 && canstartblinking == 1){
   719     00E9  2903               	goto	i1l752
   720     00EA                     i1l746:
   721     00EA  1283               	bcf	3,5	;RP0=0, select bank0
   722     00EB  082B               	movf	_processbuttonclicks+1,w	;volatile
   723     00EC  3A80               	xorlw	128
   724     00ED  00DF               	movwf	btemp+1
   725     00EE  3080               	movlw	128
   726     00EF  025F               	subwf	btemp+1,w
   727     00F0  1D03               	skipz
   728     00F1  28F4               	goto	u25_25
   729     00F2  3001               	movlw	1
   730     00F3  022A               	subwf	_processbuttonclicks,w	;volatile
   731     00F4                     u25_25:
   732     00F4  1803               	skipnc
   733     00F5  28F7               	goto	u25_21
   734     00F6  28F8               	goto	u25_20
   735     00F7                     u25_21:
   736     00F7  2903               	goto	i1l752
   737     00F8                     u25_20:
   738     00F8                     i1l748:
   739     00F8  1283               	bcf	3,5	;RP0=0, select bank0
   740     00F9  032C               	decf	_canstartblinking,w	;volatile
   741     00FA  042D               	iorwf	_canstartblinking+1,w	;volatile
   742     00FB  1D03               	btfss	3,2
   743     00FC  28FE               	goto	u26_21
   744     00FD  28FF               	goto	u26_20
   745     00FE                     u26_21:
   746     00FE  2903               	goto	i1l752
   747     00FF                     u26_20:
   748     00FF                     i1l750:
   749                           
   750                           ;main.c: 74:             processbuttonclicks= 0;
   751     00FF  01AA               	clrf	_processbuttonclicks	;volatile
   752     0100  01AB               	clrf	_processbuttonclicks+1	;volatile
   753                           
   754                           ;main.c: 75:             canstartblinking= 0;
   755     0101  01AC               	clrf	_canstartblinking	;volatile
   756     0102  01AD               	clrf	_canstartblinking+1	;volatile
   757     0103                     i1l752:
   758                           
   759                           ;main.c: 77:         if(start == 1){
   760     0103  1283               	bcf	3,5	;RP0=0, select bank0
   761     0104  0332               	decf	_start,w	;volatile
   762     0105  0433               	iorwf	_start+1,w	;volatile
   763     0106  1D03               	btfss	3,2
   764     0107  2909               	goto	u27_21
   765     0108  290A               	goto	u27_20
   766     0109                     u27_21:
   767     0109  290C               	goto	i1l756
   768     010A                     u27_20:
   769     010A                     i1l754:
   770                           
   771                           ;main.c: 78:             GP5= 1;
   772     010A  1685               	bsf	5,5	;volatile
   773                           
   774                           ;main.c: 79:         }else if(start== 0){
   775     010B  2913               	goto	i1l72
   776     010C                     i1l756:
   777     010C  0832               	movf	_start,w	;volatile
   778     010D  0433               	iorwf	_start+1,w	;volatile
   779     010E  1D03               	btfss	3,2
   780     010F  2911               	goto	u28_21
   781     0110  2912               	goto	u28_20
   782     0111                     u28_21:
   783     0111  2913               	goto	i1l72
   784     0112                     u28_20:
   785     0112                     i1l758:
   786                           
   787                           ;main.c: 80:             GP5= 0;
   788     0112  1285               	bcf	5,5	;volatile
   789     0113                     i1l72:	
   790                           ;main.c: 81:         }else{
   791                           
   792                           
   793                           ;main.c: 84:         T0IF = 0;
   794     0113  110B               	bcf	11,2	;volatile
   795                           
   796                           ;main.c: 85:         TMR0 = 6;
   797     0114  3006               	movlw	6
   798     0115  0081               	movwf	1	;volatile
   799     0116                     i1l75:
   800     0116  083E               	movf	??_ISR+2,w
   801     0117  083D               	movf	??_ISR+1,w
   802     0118  008A               	movwf	10
   803     0119  0E3C               	swapf	??_ISR,w
   804     011A  0083               	movwf	3
   805     011B  0EDE               	swapf	btemp,f
   806     011C  0E5E               	swapf	btemp,w
   807     011D  0009               	retfie
   808     011E                     __end_of_ISR:
   809     0000                     ___latbits      equ	0
   810     005E                     btemp           set	94	;btemp
   811     005E                     wtemp0          set	94
   812                           
   813                           	psect	intentry
   814     0004                     __pintentry:	
   815                           ;incstack = 0
   816                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
   817                           
   818     0004                     interrupt_function:
   819     005E                     saved_w         set	btemp
   820     0004  00DE               	movwf	btemp
   821     0005  0E03               	swapf	3,w
   822     0006  1283               	bcf	3,5	;RP0=0, select bank0
   823     0007  00BC               	movwf	??_ISR
   824     0008  080A               	movf	10,w
   825     0009  00BD               	movwf	??_ISR+1
   826     000A  085F               	movf	btemp+1,w
   827     000B  00BE               	movwf	??_ISR+2
   828     000C  28AA               	ljmp	_ISR
   829                           
   830                           	psect	config
   831                           
   832                           ;Config register CONFIG @ 0x2007
   833                           ;	Oscillator Selection bits
   834                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function o
      +                          n GP5/OSC1/CLKIN
   835                           ;	Watchdog Timer Enable bit
   836                           ;	WDTE = OFF, WDT disabled
   837                           ;	Power-Up Timer Enable bit
   838                           ;	PWRTE = OFF, PWRT disabled
   839                           ;	GP3/MCLR pin function select
   840                           ;	MCLRE = OFF, GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   841                           ;	Brown-out Detect Enable bit
   842                           ;	BOREN = OFF, BOD disabled
   843                           ;	Code Protection bit
   844                           ;	CP = OFF, Program Memory code protection is disabled
   845                           ;	Data Code Protection bit
   846                           ;	CPD = OFF, Data memory code protection is disabled
   847     2007                     	org	8199
   848     2007  3194               	dw	12692

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      5      33

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Read_Adc

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _Read_Adc
 ---------------------------------------------------------------------------------
 (1) _Read_Adc                                             2     0      2       0
                                              3 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read_Adc

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON            0      0       0      0.0%
BITBANK0            62      0       0      0.0%
COMMON               0      0       0      0.0%
BANK0               62      5      33     53.2%
STACK                0      0       0      0.0%
DATA                 0      0      33      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Jul 09 21:51:46 2025

                     l60 012A                       l57 0120                       l84 007E  
                     fsr 0004                      l720 011E                      l800 0098  
                    l722 0124                      l802 009D                      l804 00A2  
                    l760 0015                      l770 0029                      l762 001E  
                    l780 004B                      l772 002B                      l764 0022  
                    l790 006B                      l782 0054                      l774 0039  
                    l766 0025                      l792 0078                      l784 005A  
                    l776 003C                      l768 0027                      l786 0060  
                    l794 007E                      l778 0042                      l796 0085  
                    l788 0066                      l798 008B                      _GP5 002D  
                    u300 004B                      u301 004A                      u310 0054  
                    u311 0053                      u320 005A                      u321 0059  
                    u330 0066                      u331 0065                      u340 0078  
                    u341 0077                      u190 0124                      u350 0085  
                    u191 0123                      u351 0084                      u360 0098  
                    u361 0097                      u345 0074                      u290 0039  
                    u291 0038                      _ISR 00AA                      u365 0094  
                    u295 0035       _buttontimercounter 0026                      _WPU 0095  
                    indf 0000              _startbutton 0030                     ?_ISR 003C  
                   _T0IF 005A                     i1l72 0113                     i1l75 0116  
                   _TMR0 0001                     _main 0015                     btemp 005E  
                   start 000D                    ??_ISR 003C                    ?_main 003C  
                  _CMCON 0019                    _ANSEL 009F                    i1l730 00BA  
                  i1l740 00E0                    i1l732 00C7                    i1l750 00FF  
                  i1l742 00E3                    i1l734 00CE                    i1l726 00AA  
                  i1l752 0103                    i1l744 00E7                    i1l736 00D4  
                  i1l728 00AE                    i1l754 010A                    i1l738 00DA  
                  i1l746 00EA                    i1l756 010C                    i1l748 00F8  
                  i1l758 0112                    u20_20 00AE                    u20_21 00AD  
                  u21_20 00C7                    u21_21 00C6                    u21_25 00C3  
                  u22_20 00CE                    u22_21 00CD                    u23_20 00D4  
                  u23_21 00D3                    u24_20 00E0                    u24_21 00DF  
                  u25_20 00F8                    u25_21 00F7                    u25_25 00F4  
                  u26_20 00FF                    u26_21 00FE                    u27_20 010A  
                  u27_21 0109                    u28_20 0112                    u28_21 0111  
                  _start 0032                    pclath 000A                    status 0003  
                  wtemp0 005E          __initialization 000E             __end_of_main 00AA  
       __end_of_Read_Adc 012B             _supercounter 0024                   ??_main 0000  
                 _ADCON0 001F                   _ADRESH 001E                   _ADRESL 009E  
                 _INTCON 000B                   _OSCCAL 0090                   _TRISIO 0085  
                 saved_w 005E  __end_of__initialization 0013           __pcstackCOMMON 0000  
             __pbssBANK0 0020                ?_Read_Adc 003F               __pmaintext 0015  
             __pintentry 0004            _buttonpressed 0038               ??_Read_Adc 0000  
                __ptext1 011E                  __ptext2 00AA                  clrloop0 012C  
   end_of_initialization 0013  _enterbuttontimercounter 0028      _processbuttonclicks 002A  
    start_initialization 000E              __end_of_ISR 011E                ___latbits 0000  
          __pcstackBANK0 003C                _adc_value 002E             _buttonclicks 003A  
           _buttonstimer 0034        interrupt_function 0004                clear_ram0 012B  
              _tempo_led 0020               _ADCON0bits 001F                 _Read_Adc 011E  
               _ledtimer 0036                 intlevel1 0000               _OPTION_REG 0081  
       _canstartblinking 002C  
